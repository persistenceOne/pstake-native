syntax = "proto3";
package cosmos.v1beta1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/v1beta1/cosmos.proto";
import "cosmos/v1beta1/batch.proto";
import "cosmos/v1beta1/proposal.proto";
import "cosmos/base/query/v1beta1/pagination.proto";

option go_package = "github.com/persistenceOne/pStake-native/x/cosmos/types";

// Query provides defines the gRPC querier service.
service Query {
  // Params returns the total set of minting parameters.
  rpc QueryParams(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/pstake/cosmos/v1beta1/params";
  }

  //Outgoing tx query
  rpc QueryTxByID(QueryOutgoingTxByIDRequest) returns (QueryOutgoingTxByIDResponse) {
    option (google.api.http).get = "/pstake/cosmos/v1beta1/txByID";
  }

  //Gov queries
  rpc Proposal(QueryProposalRequest) returns (QueryProposalResponse) {
    option (google.api.http).get = "/pstake/cosmos/v1beta1/proposals/{proposal_id}";
  }
  rpc Proposals(QueryProposalsRequest) returns (QueryProposalsResponse) {
    option (google.api.http).get = "/pstake/cosmos/v1beta1/proposals";
  }
  rpc Vote(QueryVoteRequest) returns (QueryVoteResponse) {
    option (google.api.http).get = "/pstake/cosmos/v1beta1/proposals/{proposal_id}/votes/{voter}";
  }
  rpc Votes(QueryVotesRequest) returns (QueryVotesResponse) {
    option (google.api.http).get = "/pstake/cosmos/v1beta1/proposals/{proposal_id}/votes";
  }

}

message QueryParamsRequest {}

message QueryParamsResponse {
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryOutgoingTxByIDRequest {
  uint64 txID = 1;
}
message QueryOutgoingTxByIDResponse {
  CosmosTx cosmos_tx_details = 1 [(gogoproto.nullable) = false];
}

message QueryProposalRequest {
  uint64 proposal_id = 1;
}

message QueryProposalResponse {
  Proposal proposal = 1 [(gogoproto.nullable) = false];
}

message QueryProposalsRequest {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;
  ProposalStatus proposal_status = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryProposalsResponse {
  repeated Proposal proposals = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryVoteRequest {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  uint64 proposal_id = 1;
  string voter = 2;
}

message QueryVoteResponse {
  Vote vote = 1 [(gogoproto.nullable) = false];
}

message QueryVotesRequest {
  uint64 proposal_id = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryVotesResponse {
  repeated Vote votes = 1 [(gogoproto.nullable) = false];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
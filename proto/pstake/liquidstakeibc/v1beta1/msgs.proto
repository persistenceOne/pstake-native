syntax = "proto3";
package pstake.liquidstakeibc.v1beta1;

import "google/api/annotations.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos/base/v1beta1/coin.proto";

import "pstake/liquidstakeibc/v1beta1/liquidstakeibc.proto";
import "pstake/liquidstakeibc/v1beta1/params.proto";

option go_package = "github.com/persistenceOne/pstake-native/v2/x/liquidstakeibc/types";

// Msg defines the liquidstakeibc services.
service Msg {
  rpc RegisterHostChain(MsgRegisterHostChain) returns (MsgRegisterHostChainResponse);
  rpc UpdateHostChain(MsgUpdateHostChain) returns (MsgUpdateHostChainResponse);

  rpc LiquidStake(MsgLiquidStake) returns (MsgLiquidStakeResponse) {
    option (google.api.http).post = "/pstake/liquidstakeibc/v1beta1/LiquidStake";
  }

  rpc LiquidStakeLSM(MsgLiquidStakeLSM) returns (MsgLiquidStakeLSMResponse) {
    option (google.api.http).post = "/pstake/liquidstakeibc/v1beta1/LiquidStakeLSM";
  }

  rpc LiquidUnstake(MsgLiquidUnstake) returns (MsgLiquidUnstakeResponse) {
    option (google.api.http).post = "/pstake/liquidstakeibc/v1beta1/LiquidUnstake";
  }

  rpc Redeem(MsgRedeem) returns (MsgRedeemResponse) {
    option (google.api.http).post = "/pstake/liquidstakeibc/v1beta1/Redeem";
  }

  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

message MsgRegisterHostChain {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // authority is the address of the governance account
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  string connection_id = 2;
  string deposit_fee = 3 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  string restake_fee = 4 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  string unstake_fee = 5 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  string redemption_fee = 6 [
    (cosmos_proto.scalar) = "cosmos.Dec",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
  string channel_id = 7;
  string port_id = 8;
  string host_denom = 9;
  string minimum_deposit = 10 [
    (cosmos_proto.scalar) = "cosmos.Int",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  int64 unbonding_factor = 11;
  int64 auto_compound_factor = 12;
}

message MsgRegisterHostChainResponse {}

message MsgUpdateHostChain {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // authority is the address of the governance account
  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];

  string chain_id = 2;
  repeated KVUpdate updates = 3;
}

message MsgUpdateHostChainResponse {}

message MsgLiquidStake {
  option (cosmos.msg.v1.signer) = "delegator_address";

  string delegator_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.nullable) = false];
}

message MsgLiquidStakeResponse {}

message MsgLiquidStakeLSM {
  option (cosmos.msg.v1.signer) = "delegator_address";

  string delegator_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  repeated cosmos.base.v1beta1.Coin delegations = 2 [(gogoproto.nullable) = false, (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message MsgLiquidStakeLSMResponse {}

message MsgLiquidUnstake {
  option (cosmos.msg.v1.signer) = "delegator_address";

  string delegator_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.nullable) = false];
}

message MsgLiquidUnstakeResponse {}

message MsgRedeem {
  option (cosmos.msg.v1.signer) = "delegator_address";

  string delegator_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  cosmos.base.v1beta1.Coin amount = 2 [(gogoproto.nullable) = false];
}

message MsgRedeemResponse {}

message MsgUpdateParams {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  option (cosmos.msg.v1.signer) = "authority";

  string authority = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  Params params = 2 [(gogoproto.nullable) = false];
}

message MsgUpdateParamsResponse {}

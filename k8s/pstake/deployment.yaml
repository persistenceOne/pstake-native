apiVersion: apps/v1
kind: Deployment
metadata:
  name: pstake
  namespace: dev-native
spec:
  replicas: 5
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: pstake
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        quality: release
        role: api-gateway
        sla: high
        tier: gateway
      labels:
        app.kubernetes.io/instance: pstake
        app.kubernetes.io/name: pstake
        app.kubernetes.io/version: '0.1'
    spec:
      imagePullSecrets:
        - name: test-docker-creds
      containers:
      - name: init-genesis
        image: anmol1696/pstake
        imagePullPolicy: Always
        env:
        - name: COINS
          value: "100000000000000000stake"
        - name: CHAIN_ID
          valueFrom:
            configMapKeyRef:
              key: chain.id
              name: pstake
        - name: GENTX_DIR
          value: /configs/gentx
        - name: PSTAKE_DIR
          value: /pstaked
        command:
        - bash
        - "-c"
        - |
            RANDOM_VAL_NUM=$(( RANDOM % 3 ))
            echo "Running for random val num $RANDOM_VAL_NUM"

            jq -r ".validators[$RANDOM_VAL_NUM].mnemonic" /configs/validators.json | pstaked init pstake --chain-id $CHAIN_ID --home $PSTAKE_DIR --recover
            jq -r ".validators[$RANDOM_VAL_NUM].mnemonic" /configs/validators.json | pstaked keys add $(jq -r ".validators[$RANDOM_VAL_NUM].name" /configs/validators.json) --recover --keyring-backend='test' --home $PSTAKE_DIR

            for ((i=0; i<$(jq -r '.validators | length' /configs/validators.json); i++))
            do
              pstaked add-genesis-account $(jq -r .validators[$i].address /configs/validators.json) $COINS --keyring-backend='test' --home $PSTAKE_DIR
            done

            for ((i=0; i<$(jq -r '.keys | length' /configs/keys.json); i++))
            do
              pstaked add-genesis-account $(jq -r .keys[$i].address /configs/keys.json) $COINS --keyring-backend='test' --home $PSTAKE_DIR
            done

            echo "Running gentx. Val num: $RANDOM_VAL_NUM"
            pstaked gentx $(jq -r ".validators[$RANDOM_VAL_NUM].name" /configs/validators.json) 5000000000stake --keyring-backend="test" --chain-id $CHAIN_ID --home $PSTAKE_DIR
            echo "Output of gentx"
            cat $PSTAKE_DIR/config/gentx/*.json | jq

            echo "Running collect-gentxs"
            pstaked collect-gentxs --home $PSTAKE_DIR

            sed -i 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $PSTAKE_DIR/config/config.toml
            sed -i 's/timeout_commit = "5s"/timeout_commit = "1s"/g' $PSTAKE_DIR/config/config.toml
            sed -i 's/timeout_propose = "3s"/timeout_propose = "1s"/g' $PSTAKE_DIR/config/config.toml
            sed -i 's/index_all_keys = false/index_all_keys = true/g' $PSTAKE_DIR/config/config.toml

            sleep 100000000000
        resources:
          limits:
            cpu: "1"
            memory: 1Gi
          requests:
            cpu: "0.5"
            memory: 0.5Gi
        volumeMounts:
        - mountPath: /pstaked
          name: pstaked
        - mountPath: /configs
          name: addresses
      volumes:
      - name: pstaked
        emptyDir: {}
      - name: addresses
        configMap:
          name: test-addresses

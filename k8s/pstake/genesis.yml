---
apiVersion: v1
kind: Service
metadata:
  name: pstake-genesis
  labels:
    app.kubernetes.io/name: pstake-genesis
spec:
  clusterIP: None
  ports:
    - name: p2p
      port: 26656
      protocol: TCP
      targetPort: 26656
    - name: rpc
      port: 26657
      protocol: TCP
      targetPort: 26657
    - name: http
      port: 8081
      protocol: TCP
      targetPort: 8081
    - name: grpc
      port: 9090
      protocol: TCP
      targetPort: 9090
    - name: rest
      port: 1317
      protocol: TCP
      targetPort: 1317
  selector:
    app.kubernetes.io/name: pstake-genesis
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pstake-genesis
spec:
  serviceName: pstake-genesis
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app.kubernetes.io/instance: pstake
      app.kubernetes.io/name: pstake-genesis
  template:
    metadata:
      annotations:
        quality: release
        role: api-gateway
        sla: high
        tier: gateway
      labels:
        app.kubernetes.io/instance: pstake
        app.kubernetes.io/type: pstake-validator
        app.kubernetes.io/name: pstake-genesis
        app.kubernetes.io/version: '0.1'
    spec:
      imagePullSecrets:
        - name: test-docker-creds
      initContainers:
        - name: init-genesis
          image: persistenceone/pstake
          imagePullPolicy: Always
          env:
            - name: COINS
              value: "100000000000000000uxprt"
            - name: CHAIN_ID
              valueFrom:
                configMapKeyRef:
                  key: chain.id
                  name: pstake
            - name: PSTAKE_DIR
              value: /pstaked
          command:
            - bash
            - "-c"
            - |
              VAL_INDEX=${HOSTNAME##*-}
              echo "Validator Index: $VAL_INDEX"
              
              pstaked init pstake --chain-id $CHAIN_ID --home $PSTAKE_DIR
              jq -r ".genesis[0].mnemonic" /configs/validators.json | pstaked keys add $(jq -r ".genesis[0].name" /configs/validators.json) --recover --keyring-backend='test' --home $PSTAKE_DIR
              
              # Provide genesis validator self deligations
              pstaked add-genesis-account $(jq -r .genesis[$i].address /configs/validators.json) $COINS --keyring-backend='test' --home $PSTAKE_DIR
              
              # Give Validator addresses initial coins
              for ((i=0; i<$(jq -r '.validators | length' /configs/validators.json); i++))
              do
                jq -r ".validators[$i].mnemonic" /configs/validators.json | pstaked keys add $(jq -r ".validators[$i].name" /configs/validators.json) --recover --keyring-backend='test' --home $PSTAKE_DIR
                pstaked add-genesis-account $(jq -r .validators[$i].address /configs/validators.json) $COINS --keyring-backend='test' --home $PSTAKE_DIR
              done
              
              for ((i=0; i<$(jq -r '.keys | length' /configs/keys.json); i++))
              do
                jq -r ".keys[$i].mnemonic" /configs/orchestrator.json | pstaked keys add $(jq -r ".keys[$i].name" /configs/orchestrator.json) --recover --keyring-backend='test' --home $PSTAKE_DIR
              done
              
              pstaked gentx $(jq -r ".genesis[0].name" /configs/validators.json) 5000000000uxprt --keyring-backend="test" --chain-id $CHAIN_ID --home $PSTAKE_DIR
              echo "Output of gentx"
              cat $PSTAKE_DIR/config/gentx/*.json | jq
              
              echo "Running collect-gentxs"
              pstaked collect-gentxs --home $PSTAKE_DIR
              
              sed -i 's#"tcp://127.0.0.1:26657"#"tcp://0.0.0.0:26657"#g' $PSTAKE_DIR/config/config.toml
              sed -i 's/timeout_commit = "5s"/timeout_commit = "1s"/g' $PSTAKE_DIR/config/config.toml
              sed -i 's/timeout_propose = "3s"/timeout_propose = "1s"/g' $PSTAKE_DIR/config/config.toml
              sed -i 's/index_all_keys = false/index_all_keys = true/g' $PSTAKE_DIR/config/config.toml
              sed -i 's/unsafe = false/unsafe = true/g' $PSTAKE_DIR/config/config.toml
              sed -i 's/minimum-gas-prices = ""/minimum-gas-prices = "0.00uxprt"/g' $PSTAKE_DIR/config/config.toml
              sed -i 's/cors_allowed_origins = []/cors_allowed_origins = ["*"]/g' $PSTAKE_DIR/config/config.toml
              
              sed -i 's/enable = false/enable = true/g' $PSTAKE_DIR/config/app.toml
              sed -i 's/swagger = false/swagger = true/g' $PSTAKE_DIR/config/app.toml
              sed -i 's/enabled-unsafe-cors = false/enabled-unsafe-cors = true/g' $PSTAKE_DIR/config/app.toml
              
              jq '.consensus_params.block.max_bytes |= "42020096"' $PSTAKE_DIR/config/genesis.json | tee $PSTAKE_DIR/config/genesis.new.json
              mv $PSTAKE_DIR/config/genesis.new.json $PSTAKE_DIR/config/genesis.json
              jq '.app_state.gov.voting_params.voting_period |= "30s"' $PSTAKE_DIR/config/genesis.json | tee $PSTAKE_DIR/config/genesis.new.json
              mv $PSTAKE_DIR/config/genesis.new.json $PSTAKE_DIR/config/genesis.json
              jq '.app_state.gov.tally_params.quorum |= "0.0"' $PSTAKE_DIR/config/genesis.json | tee $PSTAKE_DIR/config/genesis.new.json
              mv $PSTAKE_DIR/config/genesis.new.json $PSTAKE_DIR/config/genesis.json
              jq '.app_state.gov.deposit_params.min_deposit[0].amount |= "10"' $PSTAKE_DIR/config/genesis.json | tee $PSTAKE_DIR/config/genesis.new.json
              mv $PSTAKE_DIR/config/genesis.new.json $PSTAKE_DIR/config/genesis.json
              
              jq '.app_state.crisis.constant_fee.denom |= "uxprt"' $PSTAKE_DIR/config/genesis.json | tee $PSTAKE_DIR/config/genesis.new.json
              mv $PSTAKE_DIR/config/genesis.new.json $PSTAKE_DIR/config/genesis.json
              jq '.app_state.gov.deposit_params.min_deposit[0].denom |= "uxprt"' $PSTAKE_DIR/config/genesis.json | tee $PSTAKE_DIR/config/genesis.new.json
              mv $PSTAKE_DIR/config/genesis.new.json $PSTAKE_DIR/config/genesis.json
              jq '.app_state.liquidity.params.pool_creation_fee[0].denom |= "uxprt"' $PSTAKE_DIR/config/genesis.json | tee $PSTAKE_DIR/config/genesis.new.json
              mv $PSTAKE_DIR/config/genesis.new.json $PSTAKE_DIR/config/genesis.json
              jq '.app_state.mint.params.mint_denom |= "uxprt"' $PSTAKE_DIR/config/genesis.json | tee $PSTAKE_DIR/config/genesis.new.json
              mv $PSTAKE_DIR/config/genesis.new.json $PSTAKE_DIR/config/genesis.json
              jq '.app_state.staking.params.bond_denom |= "uxprt"' $PSTAKE_DIR/config/genesis.json | tee $PSTAKE_DIR/config/genesis.new.json
              mv $PSTAKE_DIR/config/genesis.new.json $PSTAKE_DIR/config/genesis.json
              
              echo "TRYING TO PRINT GENESIS JSON"
              cat $PSTAKE_DIR/config/genesis.json | jq
              
              
              pstaked tendermint show-node-id --home $PSTAKE_DIR > /pstaked/genesis-node-id.txt
          resources:
            limits:
              cpu: "0.2"
              memory: "200M"
            requests:
              cpu: "0.1"
              memory: "100M"
          volumeMounts:
            - mountPath: /pstaked
              name: pstaked
            - mountPath: /configs
              name: addresses
      containers:
        - name: validator
          image: persistenceone/pstake
          imagePullPolicy: Always
          env:
            - name: CHAIN_ID
              valueFrom:
                configMapKeyRef:
                  key: chain.id
                  name: pstake
            - name: PSTAKE_DIR
              value: /pstaked
          command:
            - bash
            - "-c"
            - |
              pstaked start --home $PSTAKE_DIR
          resources:
            limits:
              cpu: "1"
              memory: "1G"
            requests:
              cpu: "0.5"
              memory: "500M"
          volumeMounts:
            - mountPath: /pstaked
              name: pstaked
            - mountPath: /configs
              name: addresses
        - name: exposer-app
          image: persistenceone/exposer:pstake
          imagePullPolicy: Always
          env:
            - name: HOME_DIR
              value: /pstaked
            - name: GENESIS_FILE
              value: /pstaked/config/genesis.json
            - name: PORT
              value: "8081"
            - name: CLIENT_NAME
              value: "pstaked"
          command: [ "exposer" ]
          resources:
            limits:
              cpu: "0.1"
              memory: "100M"
            requests:
              cpu: "0.1"
              memory: "100M"
          volumeMounts:
            - mountPath: /pstaked
              name: pstaked
      volumes:
        - name: pstaked
          emptyDir: { }
        - name: addresses
          configMap:
            name: test-addresses-pstake
---

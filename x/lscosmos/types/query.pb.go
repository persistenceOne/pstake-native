// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pstake/lscosmos/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_799833dfb4f243e6, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_799833dfb4f243e6, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryHostChainParamsRequest is request for the Ouery/HostChainParams methods.
type QueryHostChainParamsRequest struct {
}

func (m *QueryHostChainParamsRequest) Reset()         { *m = QueryHostChainParamsRequest{} }
func (m *QueryHostChainParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryHostChainParamsRequest) ProtoMessage()    {}
func (*QueryHostChainParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_799833dfb4f243e6, []int{2}
}
func (m *QueryHostChainParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHostChainParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHostChainParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHostChainParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHostChainParamsRequest.Merge(m, src)
}
func (m *QueryHostChainParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryHostChainParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHostChainParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHostChainParamsRequest proto.InternalMessageInfo

// QueryHostChainParamsResponse is response for the Ouery/HostChainParams methods.
type QueryHostChainParamsResponse struct {
	HostChainParams HostChainParams `protobuf:"bytes,1,opt,name=host_chain_params,json=hostChainParams,proto3" json:"host_chain_params"`
}

func (m *QueryHostChainParamsResponse) Reset()         { *m = QueryHostChainParamsResponse{} }
func (m *QueryHostChainParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryHostChainParamsResponse) ProtoMessage()    {}
func (*QueryHostChainParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_799833dfb4f243e6, []int{3}
}
func (m *QueryHostChainParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryHostChainParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryHostChainParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryHostChainParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryHostChainParamsResponse.Merge(m, src)
}
func (m *QueryHostChainParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryHostChainParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryHostChainParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryHostChainParamsResponse proto.InternalMessageInfo

func (m *QueryHostChainParamsResponse) GetHostChainParams() HostChainParams {
	if m != nil {
		return m.HostChainParams
	}
	return HostChainParams{}
}

// QueryDelegationStateRequest is request for the Ouery/DelegationState methods.
type QueryDelegationStateRequest struct {
}

func (m *QueryDelegationStateRequest) Reset()         { *m = QueryDelegationStateRequest{} }
func (m *QueryDelegationStateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDelegationStateRequest) ProtoMessage()    {}
func (*QueryDelegationStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_799833dfb4f243e6, []int{4}
}
func (m *QueryDelegationStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegationStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegationStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegationStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegationStateRequest.Merge(m, src)
}
func (m *QueryDelegationStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegationStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegationStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegationStateRequest proto.InternalMessageInfo

// QueryDelegationStateResponse is response for the Ouery/DelegationState methods.
type QueryDelegationStateResponse struct {
	DelegationState DelegationState `protobuf:"bytes,1,opt,name=delegation_state,json=delegationState,proto3" json:"delegation_state"`
}

func (m *QueryDelegationStateResponse) Reset()         { *m = QueryDelegationStateResponse{} }
func (m *QueryDelegationStateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDelegationStateResponse) ProtoMessage()    {}
func (*QueryDelegationStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_799833dfb4f243e6, []int{5}
}
func (m *QueryDelegationStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegationStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegationStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegationStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegationStateResponse.Merge(m, src)
}
func (m *QueryDelegationStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegationStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegationStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegationStateResponse proto.InternalMessageInfo

func (m *QueryDelegationStateResponse) GetDelegationState() DelegationState {
	if m != nil {
		return m.DelegationState
	}
	return DelegationState{}
}

// QueryListedValidatorsRequest is a request for the Query/AllowListedValidators methods.
type QueryAllowListedValidatorsRequest struct {
}

func (m *QueryAllowListedValidatorsRequest) Reset()         { *m = QueryAllowListedValidatorsRequest{} }
func (m *QueryAllowListedValidatorsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllowListedValidatorsRequest) ProtoMessage()    {}
func (*QueryAllowListedValidatorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_799833dfb4f243e6, []int{6}
}
func (m *QueryAllowListedValidatorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllowListedValidatorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllowListedValidatorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllowListedValidatorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllowListedValidatorsRequest.Merge(m, src)
}
func (m *QueryAllowListedValidatorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllowListedValidatorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllowListedValidatorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllowListedValidatorsRequest proto.InternalMessageInfo

// QueryListedValidatorsResponse is a response for the Query/AllowListedValidators methods.
type QueryAllowListedValidatorsResponse struct {
	AllowListedValidators AllowListedValidators `protobuf:"bytes,1,opt,name=allow_listed_validators,json=allowListedValidators,proto3" json:"allow_listed_validators"`
}

func (m *QueryAllowListedValidatorsResponse) Reset()         { *m = QueryAllowListedValidatorsResponse{} }
func (m *QueryAllowListedValidatorsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllowListedValidatorsResponse) ProtoMessage()    {}
func (*QueryAllowListedValidatorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_799833dfb4f243e6, []int{7}
}
func (m *QueryAllowListedValidatorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllowListedValidatorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllowListedValidatorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllowListedValidatorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllowListedValidatorsResponse.Merge(m, src)
}
func (m *QueryAllowListedValidatorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllowListedValidatorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllowListedValidatorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllowListedValidatorsResponse proto.InternalMessageInfo

func (m *QueryAllowListedValidatorsResponse) GetAllowListedValidators() AllowListedValidators {
	if m != nil {
		return m.AllowListedValidators
	}
	return AllowListedValidators{}
}

// QueryCValueRequest is a request for the Query/CValue methods.
type QueryCValueRequest struct {
}

func (m *QueryCValueRequest) Reset()         { *m = QueryCValueRequest{} }
func (m *QueryCValueRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCValueRequest) ProtoMessage()    {}
func (*QueryCValueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_799833dfb4f243e6, []int{8}
}
func (m *QueryCValueRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCValueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCValueRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCValueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCValueRequest.Merge(m, src)
}
func (m *QueryCValueRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCValueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCValueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCValueRequest proto.InternalMessageInfo

// QueryCValueRequest is a response for the Query/CValue methods.
type QueryCValueResponse struct {
	CValue github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=c_value,json=cValue,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"c_value"`
}

func (m *QueryCValueResponse) Reset()         { *m = QueryCValueResponse{} }
func (m *QueryCValueResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCValueResponse) ProtoMessage()    {}
func (*QueryCValueResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_799833dfb4f243e6, []int{9}
}
func (m *QueryCValueResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCValueResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCValueResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCValueResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCValueResponse.Merge(m, src)
}
func (m *QueryCValueResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCValueResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCValueResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCValueResponse proto.InternalMessageInfo

// QueryModuleStateRequest is a request for the Query/ModuleState methods.
type QueryModuleStateRequest struct {
}

func (m *QueryModuleStateRequest) Reset()         { *m = QueryModuleStateRequest{} }
func (m *QueryModuleStateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryModuleStateRequest) ProtoMessage()    {}
func (*QueryModuleStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_799833dfb4f243e6, []int{10}
}
func (m *QueryModuleStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryModuleStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryModuleStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryModuleStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryModuleStateRequest.Merge(m, src)
}
func (m *QueryModuleStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryModuleStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryModuleStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryModuleStateRequest proto.InternalMessageInfo

// QueryModuleStateRequest is a response for the Query/ModuleState methods.
type QueryModuleStateResponse struct {
	ModuleState bool `protobuf:"varint,1,opt,name=module_state,json=moduleState,proto3" json:"module_state,omitempty"`
}

func (m *QueryModuleStateResponse) Reset()         { *m = QueryModuleStateResponse{} }
func (m *QueryModuleStateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryModuleStateResponse) ProtoMessage()    {}
func (*QueryModuleStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_799833dfb4f243e6, []int{11}
}
func (m *QueryModuleStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryModuleStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryModuleStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryModuleStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryModuleStateResponse.Merge(m, src)
}
func (m *QueryModuleStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryModuleStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryModuleStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryModuleStateResponse proto.InternalMessageInfo

func (m *QueryModuleStateResponse) GetModuleState() bool {
	if m != nil {
		return m.ModuleState
	}
	return false
}

// QueryIBCTransientStoreRequest is a request for the Query/IBCTransientStore methods.
type QueryIBCTransientStoreRequest struct {
}

func (m *QueryIBCTransientStoreRequest) Reset()         { *m = QueryIBCTransientStoreRequest{} }
func (m *QueryIBCTransientStoreRequest) String() string { return proto.CompactTextString(m) }
func (*QueryIBCTransientStoreRequest) ProtoMessage()    {}
func (*QueryIBCTransientStoreRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_799833dfb4f243e6, []int{12}
}
func (m *QueryIBCTransientStoreRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIBCTransientStoreRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIBCTransientStoreRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIBCTransientStoreRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIBCTransientStoreRequest.Merge(m, src)
}
func (m *QueryIBCTransientStoreRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryIBCTransientStoreRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIBCTransientStoreRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIBCTransientStoreRequest proto.InternalMessageInfo

// QueryIBCTransientStoreRequest is a response for the Query/IBCTransientStore methods.
type QueryIBCTransientStoreResponse struct {
	IBCTransientStore IBCAmountTransientStore `protobuf:"bytes,1,opt,name=i_b_c_transient_store,json=iBCTransientStore,proto3" json:"i_b_c_transient_store"`
}

func (m *QueryIBCTransientStoreResponse) Reset()         { *m = QueryIBCTransientStoreResponse{} }
func (m *QueryIBCTransientStoreResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIBCTransientStoreResponse) ProtoMessage()    {}
func (*QueryIBCTransientStoreResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_799833dfb4f243e6, []int{13}
}
func (m *QueryIBCTransientStoreResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIBCTransientStoreResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIBCTransientStoreResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIBCTransientStoreResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIBCTransientStoreResponse.Merge(m, src)
}
func (m *QueryIBCTransientStoreResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIBCTransientStoreResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIBCTransientStoreResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIBCTransientStoreResponse proto.InternalMessageInfo

func (m *QueryIBCTransientStoreResponse) GetIBCTransientStore() IBCAmountTransientStore {
	if m != nil {
		return m.IBCTransientStore
	}
	return IBCAmountTransientStore{}
}

// QueryUnclaimedRequest is a request for the Query/Unclaimed methods.
type QueryUnclaimedRequest struct {
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
}

func (m *QueryUnclaimedRequest) Reset()         { *m = QueryUnclaimedRequest{} }
func (m *QueryUnclaimedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUnclaimedRequest) ProtoMessage()    {}
func (*QueryUnclaimedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_799833dfb4f243e6, []int{14}
}
func (m *QueryUnclaimedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUnclaimedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUnclaimedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUnclaimedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUnclaimedRequest.Merge(m, src)
}
func (m *QueryUnclaimedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUnclaimedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUnclaimedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUnclaimedRequest proto.InternalMessageInfo

func (m *QueryUnclaimedRequest) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

// QueryUnclaimedResponse is a response for the Query/Unclaimed methods.
type QueryUnclaimedResponse struct {
	Unclaimed []QueryUnclaimedResponse_Unclaimed `protobuf:"bytes,1,rep,name=unclaimed,proto3" json:"unclaimed"`
}

func (m *QueryUnclaimedResponse) Reset()         { *m = QueryUnclaimedResponse{} }
func (m *QueryUnclaimedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUnclaimedResponse) ProtoMessage()    {}
func (*QueryUnclaimedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_799833dfb4f243e6, []int{15}
}
func (m *QueryUnclaimedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUnclaimedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUnclaimedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUnclaimedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUnclaimedResponse.Merge(m, src)
}
func (m *QueryUnclaimedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUnclaimedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUnclaimedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUnclaimedResponse proto.InternalMessageInfo

func (m *QueryUnclaimedResponse) GetUnclaimed() []QueryUnclaimedResponse_Unclaimed {
	if m != nil {
		return m.Unclaimed
	}
	return nil
}

type QueryUnclaimedResponse_Unclaimed struct {
	DelegatorAddress string                                 `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	Amount           types.Coin                             `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
	EpochNumber      int64                                  `protobuf:"varint,3,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
	BatchCValue      github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=batch_c_value,json=batchCValue,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"batch_c_value"`
}

func (m *QueryUnclaimedResponse_Unclaimed) Reset()         { *m = QueryUnclaimedResponse_Unclaimed{} }
func (m *QueryUnclaimedResponse_Unclaimed) String() string { return proto.CompactTextString(m) }
func (*QueryUnclaimedResponse_Unclaimed) ProtoMessage()    {}
func (*QueryUnclaimedResponse_Unclaimed) Descriptor() ([]byte, []int) {
	return fileDescriptor_799833dfb4f243e6, []int{15, 0}
}
func (m *QueryUnclaimedResponse_Unclaimed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUnclaimedResponse_Unclaimed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUnclaimedResponse_Unclaimed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUnclaimedResponse_Unclaimed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUnclaimedResponse_Unclaimed.Merge(m, src)
}
func (m *QueryUnclaimedResponse_Unclaimed) XXX_Size() int {
	return m.Size()
}
func (m *QueryUnclaimedResponse_Unclaimed) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUnclaimedResponse_Unclaimed.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUnclaimedResponse_Unclaimed proto.InternalMessageInfo

func (m *QueryUnclaimedResponse_Unclaimed) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

func (m *QueryUnclaimedResponse_Unclaimed) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *QueryUnclaimedResponse_Unclaimed) GetEpochNumber() int64 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

// QueryFailedUnbondingsRequest is a request for the Query/FailedUnbondings methods.
type QueryFailedUnbondingsRequest struct {
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
}

func (m *QueryFailedUnbondingsRequest) Reset()         { *m = QueryFailedUnbondingsRequest{} }
func (m *QueryFailedUnbondingsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryFailedUnbondingsRequest) ProtoMessage()    {}
func (*QueryFailedUnbondingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_799833dfb4f243e6, []int{16}
}
func (m *QueryFailedUnbondingsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFailedUnbondingsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFailedUnbondingsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFailedUnbondingsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFailedUnbondingsRequest.Merge(m, src)
}
func (m *QueryFailedUnbondingsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryFailedUnbondingsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFailedUnbondingsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFailedUnbondingsRequest proto.InternalMessageInfo

func (m *QueryFailedUnbondingsRequest) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

// QueryFailedUnbondingsResponse a response for the Query/FailedUnbondings methods.
type QueryFailedUnbondingsResponse struct {
	FailedUnbondings []QueryFailedUnbondingsResponse_FailedUnbondings `protobuf:"bytes,1,rep,name=failed_unbondings,json=failedUnbondings,proto3" json:"failed_unbondings"`
}

func (m *QueryFailedUnbondingsResponse) Reset()         { *m = QueryFailedUnbondingsResponse{} }
func (m *QueryFailedUnbondingsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryFailedUnbondingsResponse) ProtoMessage()    {}
func (*QueryFailedUnbondingsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_799833dfb4f243e6, []int{17}
}
func (m *QueryFailedUnbondingsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFailedUnbondingsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFailedUnbondingsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFailedUnbondingsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFailedUnbondingsResponse.Merge(m, src)
}
func (m *QueryFailedUnbondingsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryFailedUnbondingsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFailedUnbondingsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFailedUnbondingsResponse proto.InternalMessageInfo

func (m *QueryFailedUnbondingsResponse) GetFailedUnbondings() []QueryFailedUnbondingsResponse_FailedUnbondings {
	if m != nil {
		return m.FailedUnbondings
	}
	return nil
}

type QueryFailedUnbondingsResponse_FailedUnbondings struct {
	DelegatorAddress string     `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	Amount           types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
}

func (m *QueryFailedUnbondingsResponse_FailedUnbondings) Reset() {
	*m = QueryFailedUnbondingsResponse_FailedUnbondings{}
}
func (m *QueryFailedUnbondingsResponse_FailedUnbondings) String() string {
	return proto.CompactTextString(m)
}
func (*QueryFailedUnbondingsResponse_FailedUnbondings) ProtoMessage() {}
func (*QueryFailedUnbondingsResponse_FailedUnbondings) Descriptor() ([]byte, []int) {
	return fileDescriptor_799833dfb4f243e6, []int{17, 0}
}
func (m *QueryFailedUnbondingsResponse_FailedUnbondings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryFailedUnbondingsResponse_FailedUnbondings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryFailedUnbondingsResponse_FailedUnbondings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryFailedUnbondingsResponse_FailedUnbondings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryFailedUnbondingsResponse_FailedUnbondings.Merge(m, src)
}
func (m *QueryFailedUnbondingsResponse_FailedUnbondings) XXX_Size() int {
	return m.Size()
}
func (m *QueryFailedUnbondingsResponse_FailedUnbondings) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryFailedUnbondingsResponse_FailedUnbondings.DiscardUnknown(m)
}

var xxx_messageInfo_QueryFailedUnbondingsResponse_FailedUnbondings proto.InternalMessageInfo

func (m *QueryFailedUnbondingsResponse_FailedUnbondings) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

func (m *QueryFailedUnbondingsResponse_FailedUnbondings) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

// QueryPendingUnbondingsRequest is a request for the Query/PendingUnbondings methods.
type QueryPendingUnbondingsRequest struct {
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
}

func (m *QueryPendingUnbondingsRequest) Reset()         { *m = QueryPendingUnbondingsRequest{} }
func (m *QueryPendingUnbondingsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPendingUnbondingsRequest) ProtoMessage()    {}
func (*QueryPendingUnbondingsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_799833dfb4f243e6, []int{18}
}
func (m *QueryPendingUnbondingsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingUnbondingsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingUnbondingsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingUnbondingsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingUnbondingsRequest.Merge(m, src)
}
func (m *QueryPendingUnbondingsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingUnbondingsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingUnbondingsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingUnbondingsRequest proto.InternalMessageInfo

func (m *QueryPendingUnbondingsRequest) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

// QueryPendingUnbondingsResponse is a response for the Query/PendingUnbondings methods.
type QueryPendingUnbondingsResponse struct {
	PendingUnbondings []QueryPendingUnbondingsResponse_PendingUnbondings `protobuf:"bytes,1,rep,name=pending_unbondings,json=pendingUnbondings,proto3" json:"pending_unbondings"`
}

func (m *QueryPendingUnbondingsResponse) Reset()         { *m = QueryPendingUnbondingsResponse{} }
func (m *QueryPendingUnbondingsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPendingUnbondingsResponse) ProtoMessage()    {}
func (*QueryPendingUnbondingsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_799833dfb4f243e6, []int{19}
}
func (m *QueryPendingUnbondingsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingUnbondingsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingUnbondingsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingUnbondingsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingUnbondingsResponse.Merge(m, src)
}
func (m *QueryPendingUnbondingsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingUnbondingsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingUnbondingsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingUnbondingsResponse proto.InternalMessageInfo

func (m *QueryPendingUnbondingsResponse) GetPendingUnbondings() []QueryPendingUnbondingsResponse_PendingUnbondings {
	if m != nil {
		return m.PendingUnbondings
	}
	return nil
}

type QueryPendingUnbondingsResponse_PendingUnbondings struct {
	DelegatorAddress string                                 `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	Amount           types.Coin                             `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
	CompletionTime   time.Time                              `protobuf:"bytes,3,opt,name=completion_time,json=completionTime,proto3,stdtime" json:"completion_time"`
	EpochNumber      int64                                  `protobuf:"varint,4,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
	BatchCValue      github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=batch_c_value,json=batchCValue,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"batch_c_value"`
}

func (m *QueryPendingUnbondingsResponse_PendingUnbondings) Reset() {
	*m = QueryPendingUnbondingsResponse_PendingUnbondings{}
}
func (m *QueryPendingUnbondingsResponse_PendingUnbondings) String() string {
	return proto.CompactTextString(m)
}
func (*QueryPendingUnbondingsResponse_PendingUnbondings) ProtoMessage() {}
func (*QueryPendingUnbondingsResponse_PendingUnbondings) Descriptor() ([]byte, []int) {
	return fileDescriptor_799833dfb4f243e6, []int{19, 0}
}
func (m *QueryPendingUnbondingsResponse_PendingUnbondings) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingUnbondingsResponse_PendingUnbondings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingUnbondingsResponse_PendingUnbondings.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingUnbondingsResponse_PendingUnbondings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingUnbondingsResponse_PendingUnbondings.Merge(m, src)
}
func (m *QueryPendingUnbondingsResponse_PendingUnbondings) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingUnbondingsResponse_PendingUnbondings) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingUnbondingsResponse_PendingUnbondings.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingUnbondingsResponse_PendingUnbondings proto.InternalMessageInfo

func (m *QueryPendingUnbondingsResponse_PendingUnbondings) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

func (m *QueryPendingUnbondingsResponse_PendingUnbondings) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *QueryPendingUnbondingsResponse_PendingUnbondings) GetCompletionTime() time.Time {
	if m != nil {
		return m.CompletionTime
	}
	return time.Time{}
}

func (m *QueryPendingUnbondingsResponse_PendingUnbondings) GetEpochNumber() int64 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "pstake.lscosmos.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "pstake.lscosmos.v1beta1.QueryParamsResponse")
	proto.RegisterType((*QueryHostChainParamsRequest)(nil), "pstake.lscosmos.v1beta1.QueryHostChainParamsRequest")
	proto.RegisterType((*QueryHostChainParamsResponse)(nil), "pstake.lscosmos.v1beta1.QueryHostChainParamsResponse")
	proto.RegisterType((*QueryDelegationStateRequest)(nil), "pstake.lscosmos.v1beta1.QueryDelegationStateRequest")
	proto.RegisterType((*QueryDelegationStateResponse)(nil), "pstake.lscosmos.v1beta1.QueryDelegationStateResponse")
	proto.RegisterType((*QueryAllowListedValidatorsRequest)(nil), "pstake.lscosmos.v1beta1.QueryAllowListedValidatorsRequest")
	proto.RegisterType((*QueryAllowListedValidatorsResponse)(nil), "pstake.lscosmos.v1beta1.QueryAllowListedValidatorsResponse")
	proto.RegisterType((*QueryCValueRequest)(nil), "pstake.lscosmos.v1beta1.QueryCValueRequest")
	proto.RegisterType((*QueryCValueResponse)(nil), "pstake.lscosmos.v1beta1.QueryCValueResponse")
	proto.RegisterType((*QueryModuleStateRequest)(nil), "pstake.lscosmos.v1beta1.QueryModuleStateRequest")
	proto.RegisterType((*QueryModuleStateResponse)(nil), "pstake.lscosmos.v1beta1.QueryModuleStateResponse")
	proto.RegisterType((*QueryIBCTransientStoreRequest)(nil), "pstake.lscosmos.v1beta1.QueryIBCTransientStoreRequest")
	proto.RegisterType((*QueryIBCTransientStoreResponse)(nil), "pstake.lscosmos.v1beta1.QueryIBCTransientStoreResponse")
	proto.RegisterType((*QueryUnclaimedRequest)(nil), "pstake.lscosmos.v1beta1.QueryUnclaimedRequest")
	proto.RegisterType((*QueryUnclaimedResponse)(nil), "pstake.lscosmos.v1beta1.QueryUnclaimedResponse")
	proto.RegisterType((*QueryUnclaimedResponse_Unclaimed)(nil), "pstake.lscosmos.v1beta1.QueryUnclaimedResponse.Unclaimed")
	proto.RegisterType((*QueryFailedUnbondingsRequest)(nil), "pstake.lscosmos.v1beta1.QueryFailedUnbondingsRequest")
	proto.RegisterType((*QueryFailedUnbondingsResponse)(nil), "pstake.lscosmos.v1beta1.QueryFailedUnbondingsResponse")
	proto.RegisterType((*QueryFailedUnbondingsResponse_FailedUnbondings)(nil), "pstake.lscosmos.v1beta1.QueryFailedUnbondingsResponse.FailedUnbondings")
	proto.RegisterType((*QueryPendingUnbondingsRequest)(nil), "pstake.lscosmos.v1beta1.QueryPendingUnbondingsRequest")
	proto.RegisterType((*QueryPendingUnbondingsResponse)(nil), "pstake.lscosmos.v1beta1.QueryPendingUnbondingsResponse")
	proto.RegisterType((*QueryPendingUnbondingsResponse_PendingUnbondings)(nil), "pstake.lscosmos.v1beta1.QueryPendingUnbondingsResponse.PendingUnbondings")
}

func init() {
	proto.RegisterFile("pstake/lscosmos/v1beta1/query.proto", fileDescriptor_799833dfb4f243e6)
}

var fileDescriptor_799833dfb4f243e6 = []byte{
	// 1251 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x96, 0x4f, 0x6f, 0x1b, 0xc5,
	0x1b, 0xc7, 0xb3, 0x49, 0xea, 0x5f, 0x33, 0xfe, 0x95, 0xc4, 0x43, 0x43, 0x52, 0xd3, 0xda, 0xc9,
	0xb6, 0xb4, 0x21, 0x7f, 0x76, 0x13, 0xb7, 0x4d, 0x0b, 0xa8, 0x87, 0x38, 0x11, 0x25, 0xa2, 0x85,
	0xe2, 0xa6, 0x95, 0xa8, 0x04, 0xab, 0xf1, 0x7a, 0x62, 0xaf, 0xba, 0xbb, 0xb3, 0xdd, 0x99, 0x0d,
	0x4d, 0x0f, 0x1c, 0x38, 0x22, 0x90, 0x2a, 0x10, 0x12, 0x57, 0x5e, 0x02, 0x48, 0x1c, 0xe0, 0xc2,
	0xb5, 0x42, 0x1c, 0x2a, 0x71, 0x41, 0x1c, 0x0a, 0x4a, 0x38, 0xf0, 0x32, 0xd0, 0xce, 0xce, 0x6e,
	0xec, 0x5d, 0x8f, 0x1d, 0xa7, 0x52, 0x4f, 0x89, 0xe7, 0x79, 0xe6, 0x79, 0x3e, 0xf3, 0x3c, 0xcf,
	0xec, 0x7c, 0xc1, 0x59, 0x8f, 0x32, 0x74, 0x1f, 0xeb, 0x36, 0x35, 0x09, 0x75, 0x08, 0xd5, 0x77,
	0x56, 0xea, 0x98, 0xa1, 0x15, 0xfd, 0x41, 0x80, 0xfd, 0x5d, 0xcd, 0xf3, 0x09, 0x23, 0x70, 0x2a,
	0x72, 0xd2, 0x62, 0x27, 0x4d, 0x38, 0x15, 0x4f, 0x36, 0x49, 0x93, 0x70, 0x1f, 0x3d, 0xfc, 0x2f,
	0x72, 0x2f, 0x9e, 0x6e, 0x12, 0xd2, 0xb4, 0xb1, 0x8e, 0x3c, 0x4b, 0x47, 0xae, 0x4b, 0x18, 0x62,
	0x16, 0x71, 0xa9, 0xb0, 0xce, 0x8b, 0x44, 0x75, 0x44, 0x71, 0x94, 0x25, 0xc9, 0xe9, 0xa1, 0xa6,
	0xe5, 0x72, 0x67, 0xe1, 0x7b, 0x4e, 0x46, 0xe7, 0x21, 0x1f, 0x39, 0x71, 0xc4, 0x15, 0x99, 0x57,
	0x93, 0xec, 0x60, 0xdf, 0x45, 0xae, 0x89, 0x0d, 0xcf, 0x27, 0x1e, 0xa1, 0xc8, 0x16, 0x5b, 0xce,
	0xcb, 0xb6, 0x24, 0x47, 0x8c, 0xfc, 0x4a, 0xed, 0xb0, 0xb1, 0x8f, 0x49, 0xac, 0x18, 0xb0, 0x2c,
	0x8e, 0xca, 0x7f, 0xd5, 0x83, 0x6d, 0x9d, 0x59, 0x0e, 0xa6, 0x0c, 0x39, 0x5e, 0xe4, 0xa0, 0x9e,
	0x04, 0xf0, 0x83, 0xf0, 0x8c, 0xb7, 0x38, 0x70, 0x0d, 0x3f, 0x08, 0x30, 0x65, 0xea, 0x16, 0x78,
	0xb9, 0x63, 0x95, 0x7a, 0xc4, 0xa5, 0x18, 0x5e, 0x03, 0xb9, 0xe8, 0x60, 0xd3, 0xca, 0x8c, 0x32,
	0x97, 0xaf, 0x94, 0x35, 0x49, 0xe1, 0xb5, 0x68, 0x63, 0x75, 0xf4, 0xc9, 0xb3, 0xf2, 0x50, 0x4d,
	0x6c, 0x52, 0xcf, 0x80, 0x57, 0x79, 0xd4, 0x77, 0x08, 0x65, 0xeb, 0x2d, 0x64, 0xb9, 0x9d, 0x49,
	0x1f, 0x81, 0xd3, 0xdd, 0xcd, 0x22, 0xfb, 0x3d, 0x50, 0x68, 0x11, 0xca, 0x0c, 0x33, 0xb4, 0x19,
	0x1d, 0x20, 0x73, 0x52, 0x90, 0x54, 0x30, 0x41, 0x34, 0xde, 0xea, 0x5c, 0x4e, 0xd0, 0x36, 0xb0,
	0x8d, 0x9b, 0xbc, 0xc3, 0xb7, 0x19, 0x62, 0x38, 0x46, 0xdb, 0x15, 0x68, 0x19, 0xb3, 0x40, 0xfb,
	0x10, 0x4c, 0x34, 0x12, 0x93, 0x41, 0x43, 0x5b, 0x5f, 0xb2, 0x54, 0xac, 0x98, 0xac, 0xd1, 0xb9,
	0xac, 0x9e, 0x05, 0xb3, 0x3c, 0xf5, 0x9a, 0x6d, 0x93, 0x4f, 0x6e, 0x58, 0x94, 0xe1, 0xc6, 0x5d,
	0x64, 0x5b, 0x0d, 0xc4, 0x88, 0x9f, 0x94, 0xee, 0x2b, 0x05, 0xa8, 0xbd, 0xbc, 0x04, 0xa6, 0x0d,
	0xa6, 0x50, 0xe8, 0x60, 0xd8, 0xdc, 0xc3, 0xd8, 0x49, 0x5c, 0x04, 0xad, 0x26, 0xa5, 0xed, 0x1a,
	0x58, 0x30, 0x4f, 0xa2, 0x6e, 0xc6, 0x64, 0xb4, 0xd6, 0xef, 0x22, 0x3b, 0x48, 0x4a, 0xf9, 0xb1,
	0x18, 0xad, 0x78, 0x55, 0xa0, 0x5d, 0x07, 0xff, 0x33, 0x43, 0x9e, 0x20, 0x2a, 0xdc, 0x58, 0x55,
	0x0b, 0x43, 0xff, 0xf9, 0xac, 0x7c, 0xbe, 0x69, 0xb1, 0x56, 0x50, 0xd7, 0x4c, 0xe2, 0xe8, 0x62,
	0xd8, 0xa3, 0x3f, 0x4b, 0xb4, 0x71, 0x5f, 0x67, 0xbb, 0x1e, 0xa6, 0xda, 0x06, 0x36, 0x6b, 0x39,
	0x93, 0x07, 0x54, 0x4f, 0x81, 0x29, 0x1e, 0xff, 0x26, 0x69, 0x04, 0x36, 0xee, 0xe8, 0xe2, 0x35,
	0x30, 0x9d, 0x35, 0x89, 0xfc, 0xb3, 0xe0, 0xff, 0x0e, 0x5f, 0x6e, 0xeb, 0xde, 0xf1, 0x5a, 0xde,
	0x39, 0x70, 0x55, 0xcb, 0xe0, 0x0c, 0xdf, 0xbe, 0x59, 0x5d, 0xdf, 0xf2, 0x91, 0x4b, 0x2d, 0xec,
	0xb2, 0xdb, 0x8c, 0xf8, 0x49, 0xfc, 0xcf, 0x15, 0x50, 0x92, 0x79, 0x88, 0x34, 0x2d, 0x30, 0x69,
	0x19, 0x75, 0xc3, 0x34, 0x58, 0x6c, 0x37, 0x68, 0xe8, 0x20, 0xea, 0xbf, 0x2c, 0xad, 0xff, 0x66,
	0x75, 0x7d, 0xcd, 0x21, 0x81, 0xcb, 0x3a, 0x03, 0x8b, 0x0e, 0x14, 0xac, 0x74, 0x46, 0x75, 0x03,
	0x4c, 0x72, 0x96, 0x3b, 0xae, 0x69, 0x23, 0xcb, 0xc1, 0x0d, 0x41, 0x09, 0x17, 0x40, 0x41, 0xcc,
	0x18, 0xf1, 0x0d, 0xd4, 0x68, 0xf8, 0x98, 0x46, 0xed, 0x1f, 0xab, 0x4d, 0x24, 0x86, 0xb5, 0x68,
	0x5d, 0xdd, 0x1b, 0x06, 0xaf, 0xa4, 0xc3, 0x88, 0xa3, 0x7c, 0x04, 0xc6, 0x82, 0x78, 0x71, 0x5a,
	0x99, 0x19, 0x99, 0xcb, 0x57, 0xde, 0x90, 0xe2, 0x77, 0x8f, 0xa1, 0x25, 0x2b, 0xe2, 0x1c, 0x07,
	0x11, 0x8b, 0xff, 0x2a, 0x60, 0x2c, 0x31, 0x0f, 0x04, 0x0d, 0xaf, 0x80, 0x1c, 0xe2, 0xb5, 0x9a,
	0x1e, 0xe6, 0x55, 0x3d, 0xa5, 0x09, 0x9a, 0xf0, 0x2b, 0x99, 0x20, 0xad, 0x13, 0xcb, 0x8d, 0x3f,
	0x50, 0x91, 0x7b, 0x38, 0x04, 0xd8, 0x23, 0x66, 0xcb, 0x70, 0x03, 0xa7, 0x8e, 0xfd, 0xe9, 0x91,
	0x19, 0x65, 0x6e, 0xa4, 0x96, 0xe7, 0x6b, 0xef, 0xf1, 0x25, 0x58, 0x03, 0x27, 0xea, 0x88, 0x99,
	0x2d, 0x23, 0x9e, 0xd6, 0xd1, 0x23, 0x4d, 0x6b, 0x9e, 0x07, 0x89, 0xee, 0x80, 0xfa, 0xae, 0xf8,
	0xba, 0xbc, 0x8d, 0x2c, 0x1b, 0x37, 0xee, 0xb8, 0x75, 0xe2, 0x36, 0x2c, 0xb7, 0x49, 0x8f, 0xd4,
	0xb1, 0x6f, 0x86, 0xc5, 0x98, 0x66, 0xa3, 0x89, 0xc6, 0x3d, 0x02, 0x85, 0x6d, 0x6e, 0x33, 0x82,
	0xc4, 0x28, 0x1a, 0x78, 0xbd, 0x77, 0x03, 0x65, 0x21, 0xb5, 0xb4, 0x41, 0xd4, 0x75, 0x62, 0x3b,
	0xb5, 0x5e, 0x7c, 0x08, 0x26, 0xd2, 0xbe, 0x2f, 0xa6, 0xb7, 0xea, 0x0d, 0x51, 0x96, 0x5b, 0x98,
	0xa7, 0x7d, 0xce, 0x2a, 0xef, 0x8d, 0x88, 0xab, 0xde, 0x25, 0x9c, 0x28, 0xf3, 0xa7, 0x00, 0x7a,
	0x91, 0x31, 0x5b, 0xe7, 0xcd, 0xde, 0x75, 0x96, 0x06, 0xd5, 0x32, 0x96, 0xf8, 0x03, 0xe0, 0xa5,
	0x0d, 0xc5, 0x5f, 0x86, 0x41, 0x21, 0xe3, 0xfe, 0x82, 0x2e, 0xd2, 0x4d, 0x30, 0x6e, 0x12, 0xc7,
	0xb3, 0x31, 0x7f, 0x0f, 0x43, 0xcd, 0xc1, 0xef, 0x52, 0xbe, 0x52, 0xd4, 0x22, 0x41, 0xa2, 0xc5,
	0x82, 0x44, 0xdb, 0x8a, 0x05, 0x49, 0xf5, 0x78, 0x18, 0xe2, 0xf1, 0x5f, 0x65, 0xa5, 0xf6, 0xd2,
	0xc1, 0xe6, 0xd0, 0x9c, 0xb9, 0x97, 0xa3, 0x87, 0xb8, 0x97, 0xc7, 0x9e, 0xfb, 0x5e, 0x56, 0x7e,
	0x3b, 0x01, 0x8e, 0xf1, 0x7e, 0xc0, 0x2f, 0x14, 0x90, 0x8b, 0x94, 0x02, 0x5c, 0xe8, 0xd3, 0xba,
	0x76, 0x49, 0x53, 0x5c, 0x3c, 0x9c, 0x73, 0xd4, 0x5c, 0xf5, 0xc2, 0x67, 0xbf, 0xff, 0xf3, 0xf5,
	0xf0, 0x2c, 0x2c, 0xeb, 0xbd, 0x65, 0x25, 0xfc, 0x41, 0x01, 0xe3, 0x29, 0x61, 0x03, 0x2f, 0xf5,
	0x4e, 0xd5, 0x5d, 0x73, 0x15, 0x2f, 0x0f, 0xb8, 0x4b, 0x90, 0x56, 0x38, 0xe9, 0x22, 0x9c, 0x97,
	0x92, 0x66, 0x94, 0x1a, 0xfc, 0x5e, 0x01, 0xe3, 0x29, 0xcd, 0xd3, 0x0f, 0xba, 0xbb, 0x1a, 0xeb,
	0x07, 0x2d, 0x11, 0x69, 0xea, 0x0a, 0x87, 0x5e, 0x80, 0xaf, 0x4b, 0xa1, 0xd3, 0x1a, 0x0e, 0xfe,
	0xaa, 0x80, 0xc9, 0xae, 0xca, 0x07, 0xbe, 0xd9, 0x9b, 0xa1, 0x97, 0x5a, 0x2b, 0xbe, 0x75, 0xa4,
	0xbd, 0xe2, 0x14, 0x57, 0xf9, 0x29, 0x2a, 0x70, 0x59, 0x7a, 0x0a, 0x89, 0xc4, 0x83, 0x5f, 0x2a,
	0x20, 0x17, 0x4d, 0x76, 0xbf, 0x21, 0xee, 0x50, 0x6c, 0xfd, 0x86, 0xb8, 0x53, 0xc8, 0xa9, 0x73,
	0x9c, 0x4f, 0x85, 0x33, 0x52, 0x3e, 0x71, 0x43, 0xe1, 0x77, 0x0a, 0xc8, 0xb7, 0x49, 0x31, 0xb8,
	0xdc, 0x3b, 0x4f, 0x56, 0xd0, 0x15, 0x57, 0x06, 0xd8, 0x21, 0xf0, 0x96, 0x38, 0xde, 0x05, 0xf8,
	0x9a, 0x14, 0xaf, 0x5d, 0x06, 0xc2, 0x9f, 0x15, 0x50, 0xc8, 0xa8, 0x39, 0xb8, 0xda, 0x3b, 0xaf,
	0x4c, 0x20, 0x16, 0xaf, 0x0c, 0xbc, 0x4f, 0x50, 0x5f, 0xe2, 0xd4, 0x1a, 0x5c, 0x94, 0x52, 0x5b,
	0xf5, 0x8c, 0xa6, 0x84, 0xdf, 0x76, 0x48, 0x28, 0xed, 0xd0, 0xe2, 0x2c, 0x82, 0xd5, 0x07, 0x14,
	0x73, 0xea, 0x3c, 0x87, 0x3c, 0x07, 0x55, 0x29, 0x64, 0xa2, 0xee, 0xe0, 0x8f, 0x4a, 0x17, 0x21,
	0x70, 0x79, 0x50, 0xf5, 0x11, 0x81, 0xae, 0x1e, 0x4d, 0xb4, 0x1c, 0xe2, 0x23, 0x96, 0x91, 0x49,
	0xf0, 0x27, 0xa5, 0xdb, 0xa3, 0xba, 0x3a, 0xf0, 0x73, 0x7e, 0xa8, 0x79, 0x90, 0xca, 0x00, 0xf5,
	0x22, 0x47, 0x5f, 0x82, 0x0b, 0xf2, 0x97, 0x22, 0x23, 0x3d, 0xaa, 0xb5, 0x27, 0x7b, 0x25, 0xe5,
	0xe9, 0x5e, 0x49, 0xf9, 0x7b, 0xaf, 0xa4, 0x3c, 0xde, 0x2f, 0x0d, 0x3d, 0xdd, 0x2f, 0x0d, 0xfd,
	0xb1, 0x5f, 0x1a, 0xba, 0x77, 0xb5, 0xed, 0x75, 0xf4, 0xb0, 0x4f, 0xc3, 0x4f, 0x87, 0x6b, 0xe2,
	0xf7, 0x5d, 0x2c, 0xe2, 0x2f, 0xb9, 0x88, 0x59, 0x3b, 0x58, 0x7f, 0x78, 0x90, 0x88, 0xbf, 0x99,
	0xf5, 0x1c, 0x7f, 0xc7, 0x2f, 0xfe, 0x17, 0x00, 0x00, 0xff, 0xff, 0xd0, 0x54, 0xef, 0xf2, 0xa7,
	0x11, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	HostChainParams(ctx context.Context, in *QueryHostChainParamsRequest, opts ...grpc.CallOption) (*QueryHostChainParamsResponse, error)
	DelegationState(ctx context.Context, in *QueryDelegationStateRequest, opts ...grpc.CallOption) (*QueryDelegationStateResponse, error)
	AllowListedValidators(ctx context.Context, in *QueryAllowListedValidatorsRequest, opts ...grpc.CallOption) (*QueryAllowListedValidatorsResponse, error)
	CValue(ctx context.Context, in *QueryCValueRequest, opts ...grpc.CallOption) (*QueryCValueResponse, error)
	ModuleState(ctx context.Context, in *QueryModuleStateRequest, opts ...grpc.CallOption) (*QueryModuleStateResponse, error)
	IBCTransientStore(ctx context.Context, in *QueryIBCTransientStoreRequest, opts ...grpc.CallOption) (*QueryIBCTransientStoreResponse, error)
	Unclaimed(ctx context.Context, in *QueryUnclaimedRequest, opts ...grpc.CallOption) (*QueryUnclaimedResponse, error)
	FailedUnbondings(ctx context.Context, in *QueryFailedUnbondingsRequest, opts ...grpc.CallOption) (*QueryFailedUnbondingsResponse, error)
	PendingUnbondings(ctx context.Context, in *QueryPendingUnbondingsRequest, opts ...grpc.CallOption) (*QueryPendingUnbondingsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/pstake.lscosmos.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HostChainParams(ctx context.Context, in *QueryHostChainParamsRequest, opts ...grpc.CallOption) (*QueryHostChainParamsResponse, error) {
	out := new(QueryHostChainParamsResponse)
	err := c.cc.Invoke(ctx, "/pstake.lscosmos.v1beta1.Query/HostChainParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegationState(ctx context.Context, in *QueryDelegationStateRequest, opts ...grpc.CallOption) (*QueryDelegationStateResponse, error) {
	out := new(QueryDelegationStateResponse)
	err := c.cc.Invoke(ctx, "/pstake.lscosmos.v1beta1.Query/DelegationState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllowListedValidators(ctx context.Context, in *QueryAllowListedValidatorsRequest, opts ...grpc.CallOption) (*QueryAllowListedValidatorsResponse, error) {
	out := new(QueryAllowListedValidatorsResponse)
	err := c.cc.Invoke(ctx, "/pstake.lscosmos.v1beta1.Query/AllowListedValidators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CValue(ctx context.Context, in *QueryCValueRequest, opts ...grpc.CallOption) (*QueryCValueResponse, error) {
	out := new(QueryCValueResponse)
	err := c.cc.Invoke(ctx, "/pstake.lscosmos.v1beta1.Query/CValue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ModuleState(ctx context.Context, in *QueryModuleStateRequest, opts ...grpc.CallOption) (*QueryModuleStateResponse, error) {
	out := new(QueryModuleStateResponse)
	err := c.cc.Invoke(ctx, "/pstake.lscosmos.v1beta1.Query/ModuleState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IBCTransientStore(ctx context.Context, in *QueryIBCTransientStoreRequest, opts ...grpc.CallOption) (*QueryIBCTransientStoreResponse, error) {
	out := new(QueryIBCTransientStoreResponse)
	err := c.cc.Invoke(ctx, "/pstake.lscosmos.v1beta1.Query/IBCTransientStore", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Unclaimed(ctx context.Context, in *QueryUnclaimedRequest, opts ...grpc.CallOption) (*QueryUnclaimedResponse, error) {
	out := new(QueryUnclaimedResponse)
	err := c.cc.Invoke(ctx, "/pstake.lscosmos.v1beta1.Query/Unclaimed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) FailedUnbondings(ctx context.Context, in *QueryFailedUnbondingsRequest, opts ...grpc.CallOption) (*QueryFailedUnbondingsResponse, error) {
	out := new(QueryFailedUnbondingsResponse)
	err := c.cc.Invoke(ctx, "/pstake.lscosmos.v1beta1.Query/FailedUnbondings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingUnbondings(ctx context.Context, in *QueryPendingUnbondingsRequest, opts ...grpc.CallOption) (*QueryPendingUnbondingsResponse, error) {
	out := new(QueryPendingUnbondingsResponse)
	err := c.cc.Invoke(ctx, "/pstake.lscosmos.v1beta1.Query/PendingUnbondings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	HostChainParams(context.Context, *QueryHostChainParamsRequest) (*QueryHostChainParamsResponse, error)
	DelegationState(context.Context, *QueryDelegationStateRequest) (*QueryDelegationStateResponse, error)
	AllowListedValidators(context.Context, *QueryAllowListedValidatorsRequest) (*QueryAllowListedValidatorsResponse, error)
	CValue(context.Context, *QueryCValueRequest) (*QueryCValueResponse, error)
	ModuleState(context.Context, *QueryModuleStateRequest) (*QueryModuleStateResponse, error)
	IBCTransientStore(context.Context, *QueryIBCTransientStoreRequest) (*QueryIBCTransientStoreResponse, error)
	Unclaimed(context.Context, *QueryUnclaimedRequest) (*QueryUnclaimedResponse, error)
	FailedUnbondings(context.Context, *QueryFailedUnbondingsRequest) (*QueryFailedUnbondingsResponse, error)
	PendingUnbondings(context.Context, *QueryPendingUnbondingsRequest) (*QueryPendingUnbondingsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) HostChainParams(ctx context.Context, req *QueryHostChainParamsRequest) (*QueryHostChainParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostChainParams not implemented")
}
func (*UnimplementedQueryServer) DelegationState(ctx context.Context, req *QueryDelegationStateRequest) (*QueryDelegationStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegationState not implemented")
}
func (*UnimplementedQueryServer) AllowListedValidators(ctx context.Context, req *QueryAllowListedValidatorsRequest) (*QueryAllowListedValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllowListedValidators not implemented")
}
func (*UnimplementedQueryServer) CValue(ctx context.Context, req *QueryCValueRequest) (*QueryCValueResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CValue not implemented")
}
func (*UnimplementedQueryServer) ModuleState(ctx context.Context, req *QueryModuleStateRequest) (*QueryModuleStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModuleState not implemented")
}
func (*UnimplementedQueryServer) IBCTransientStore(ctx context.Context, req *QueryIBCTransientStoreRequest) (*QueryIBCTransientStoreResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IBCTransientStore not implemented")
}
func (*UnimplementedQueryServer) Unclaimed(ctx context.Context, req *QueryUnclaimedRequest) (*QueryUnclaimedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unclaimed not implemented")
}
func (*UnimplementedQueryServer) FailedUnbondings(ctx context.Context, req *QueryFailedUnbondingsRequest) (*QueryFailedUnbondingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FailedUnbondings not implemented")
}
func (*UnimplementedQueryServer) PendingUnbondings(ctx context.Context, req *QueryPendingUnbondingsRequest) (*QueryPendingUnbondingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingUnbondings not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pstake.lscosmos.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HostChainParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryHostChainParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HostChainParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pstake.lscosmos.v1beta1.Query/HostChainParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HostChainParams(ctx, req.(*QueryHostChainParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegationState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegationStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegationState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pstake.lscosmos.v1beta1.Query/DelegationState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegationState(ctx, req.(*QueryDelegationStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllowListedValidators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllowListedValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllowListedValidators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pstake.lscosmos.v1beta1.Query/AllowListedValidators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllowListedValidators(ctx, req.(*QueryAllowListedValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCValueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pstake.lscosmos.v1beta1.Query/CValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CValue(ctx, req.(*QueryCValueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ModuleState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryModuleStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ModuleState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pstake.lscosmos.v1beta1.Query/ModuleState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ModuleState(ctx, req.(*QueryModuleStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IBCTransientStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryIBCTransientStoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IBCTransientStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pstake.lscosmos.v1beta1.Query/IBCTransientStore",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IBCTransientStore(ctx, req.(*QueryIBCTransientStoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Unclaimed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUnclaimedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Unclaimed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pstake.lscosmos.v1beta1.Query/Unclaimed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Unclaimed(ctx, req.(*QueryUnclaimedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_FailedUnbondings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryFailedUnbondingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).FailedUnbondings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pstake.lscosmos.v1beta1.Query/FailedUnbondings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).FailedUnbondings(ctx, req.(*QueryFailedUnbondingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingUnbondings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingUnbondingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingUnbondings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pstake.lscosmos.v1beta1.Query/PendingUnbondings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingUnbondings(ctx, req.(*QueryPendingUnbondingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pstake.lscosmos.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "HostChainParams",
			Handler:    _Query_HostChainParams_Handler,
		},
		{
			MethodName: "DelegationState",
			Handler:    _Query_DelegationState_Handler,
		},
		{
			MethodName: "AllowListedValidators",
			Handler:    _Query_AllowListedValidators_Handler,
		},
		{
			MethodName: "CValue",
			Handler:    _Query_CValue_Handler,
		},
		{
			MethodName: "ModuleState",
			Handler:    _Query_ModuleState_Handler,
		},
		{
			MethodName: "IBCTransientStore",
			Handler:    _Query_IBCTransientStore_Handler,
		},
		{
			MethodName: "Unclaimed",
			Handler:    _Query_Unclaimed_Handler,
		},
		{
			MethodName: "FailedUnbondings",
			Handler:    _Query_FailedUnbondings_Handler,
		},
		{
			MethodName: "PendingUnbondings",
			Handler:    _Query_PendingUnbondings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pstake/lscosmos/v1beta1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryHostChainParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHostChainParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHostChainParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryHostChainParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryHostChainParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryHostChainParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.HostChainParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDelegationStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegationStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegationStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryDelegationStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegationStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegationStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DelegationState.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllowListedValidatorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllowListedValidatorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllowListedValidatorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllowListedValidatorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllowListedValidatorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllowListedValidatorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.AllowListedValidators.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCValueRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCValueRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCValueRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCValueResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCValueResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCValueResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.CValue.Size()
		i -= size
		if _, err := m.CValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryModuleStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryModuleStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryModuleStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryModuleStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryModuleStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryModuleStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ModuleState {
		i--
		if m.ModuleState {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryIBCTransientStoreRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIBCTransientStoreRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIBCTransientStoreRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryIBCTransientStoreResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIBCTransientStoreResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIBCTransientStoreResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.IBCTransientStore.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryUnclaimedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUnclaimedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUnclaimedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUnclaimedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUnclaimedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUnclaimedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Unclaimed) > 0 {
		for iNdEx := len(m.Unclaimed) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Unclaimed[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryUnclaimedResponse_Unclaimed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUnclaimedResponse_Unclaimed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUnclaimedResponse_Unclaimed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.BatchCValue.Size()
		i -= size
		if _, err := m.BatchCValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.EpochNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFailedUnbondingsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFailedUnbondingsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFailedUnbondingsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryFailedUnbondingsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFailedUnbondingsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFailedUnbondingsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FailedUnbondings) > 0 {
		for iNdEx := len(m.FailedUnbondings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FailedUnbondings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryFailedUnbondingsResponse_FailedUnbondings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryFailedUnbondingsResponse_FailedUnbondings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryFailedUnbondingsResponse_FailedUnbondings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingUnbondingsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingUnbondingsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingUnbondingsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingUnbondingsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingUnbondingsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingUnbondingsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PendingUnbondings) > 0 {
		for iNdEx := len(m.PendingUnbondings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PendingUnbondings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingUnbondingsResponse_PendingUnbondings) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingUnbondingsResponse_PendingUnbondings) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingUnbondingsResponse_PendingUnbondings) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.BatchCValue.Size()
		i -= size
		if _, err := m.BatchCValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.EpochNumber != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x20
	}
	n8, err8 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.CompletionTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.CompletionTime):])
	if err8 != nil {
		return 0, err8
	}
	i -= n8
	i = encodeVarintQuery(dAtA, i, uint64(n8))
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryHostChainParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryHostChainParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.HostChainParams.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDelegationStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryDelegationStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DelegationState.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllowListedValidatorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllowListedValidatorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.AllowListedValidators.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCValueRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCValueResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CValue.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryModuleStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryModuleStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ModuleState {
		n += 2
	}
	return n
}

func (m *QueryIBCTransientStoreRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryIBCTransientStoreResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.IBCTransientStore.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryUnclaimedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUnclaimedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Unclaimed) > 0 {
		for _, e := range m.Unclaimed {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryUnclaimedResponse_Unclaimed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.EpochNumber != 0 {
		n += 1 + sovQuery(uint64(m.EpochNumber))
	}
	l = m.BatchCValue.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryFailedUnbondingsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryFailedUnbondingsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FailedUnbondings) > 0 {
		for _, e := range m.FailedUnbondings {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryFailedUnbondingsResponse_FailedUnbondings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPendingUnbondingsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPendingUnbondingsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PendingUnbondings) > 0 {
		for _, e := range m.PendingUnbondings {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPendingUnbondingsResponse_PendingUnbondings) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.CompletionTime)
	n += 1 + l + sovQuery(uint64(l))
	if m.EpochNumber != 0 {
		n += 1 + sovQuery(uint64(m.EpochNumber))
	}
	l = m.BatchCValue.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHostChainParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHostChainParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHostChainParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryHostChainParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryHostChainParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryHostChainParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostChainParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.HostChainParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegationStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegationStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegationStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegationStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegationStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegationStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegationState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllowListedValidatorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllowListedValidatorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllowListedValidatorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllowListedValidatorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllowListedValidatorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllowListedValidatorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllowListedValidators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AllowListedValidators.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCValueRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCValueRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCValueRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCValueResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCValueResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCValueResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryModuleStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryModuleStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryModuleStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryModuleStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryModuleStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryModuleStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleState", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ModuleState = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIBCTransientStoreRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIBCTransientStoreRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIBCTransientStoreRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIBCTransientStoreResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIBCTransientStoreResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIBCTransientStoreResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IBCTransientStore", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.IBCTransientStore.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUnclaimedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUnclaimedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUnclaimedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUnclaimedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUnclaimedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUnclaimedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unclaimed", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Unclaimed = append(m.Unclaimed, QueryUnclaimedResponse_Unclaimed{})
			if err := m.Unclaimed[len(m.Unclaimed)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUnclaimedResponse_Unclaimed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Unclaimed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Unclaimed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchCValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BatchCValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFailedUnbondingsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFailedUnbondingsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFailedUnbondingsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFailedUnbondingsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryFailedUnbondingsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryFailedUnbondingsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailedUnbondings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailedUnbondings = append(m.FailedUnbondings, QueryFailedUnbondingsResponse_FailedUnbondings{})
			if err := m.FailedUnbondings[len(m.FailedUnbondings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryFailedUnbondingsResponse_FailedUnbondings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FailedUnbondings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FailedUnbondings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingUnbondingsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingUnbondingsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingUnbondingsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingUnbondingsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingUnbondingsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingUnbondingsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingUnbondings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingUnbondings = append(m.PendingUnbondings, QueryPendingUnbondingsResponse_PendingUnbondings{})
			if err := m.PendingUnbondings[len(m.PendingUnbondings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingUnbondingsResponse_PendingUnbondings) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingUnbondings: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingUnbondings: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.CompletionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BatchCValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BatchCValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)

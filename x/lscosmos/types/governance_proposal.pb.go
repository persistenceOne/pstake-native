// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lscosmos/v1beta1/governance_proposal.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RegisterCosmosChainProposal defines the details needed to register cosmos chain for
// liquid staking transactions through lscosmos module
type RegisterCosmosChainProposal struct {
	Title                string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description          string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	IBCConnection        string `protobuf:"bytes,3,opt,name=i_b_c_connection,json=iBCConnection,proto3" json:"i_b_c_connection,omitempty"`
	TokenTransferChannel string `protobuf:"bytes,4,opt,name=token_transfer_channel,json=tokenTransferChannel,proto3" json:"token_transfer_channel,omitempty"`
	TokenTransferPort    string `protobuf:"bytes,5,opt,name=token_transfer_port,json=tokenTransferPort,proto3" json:"token_transfer_port,omitempty"`
	BaseDenom            string `protobuf:"bytes,6,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty"`
	MintDenom            string `protobuf:"bytes,7,opt,name=mint_denom,json=mintDenom,proto3" json:"mint_denom,omitempty"`
	MinDeposit           string `protobuf:"bytes,8,opt,name=min_deposit,json=minDeposit,proto3" json:"min_deposit,omitempty"`
	PStakeFee            string `protobuf:"bytes,9,opt,name=p_stake_fee,json=pStakeFee,proto3" json:"p_stake_fee,omitempty"`
}

func (m *RegisterCosmosChainProposal) Reset()      { *m = RegisterCosmosChainProposal{} }
func (*RegisterCosmosChainProposal) ProtoMessage() {}
func (*RegisterCosmosChainProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_abbb79eadcf33bd7, []int{0}
}
func (m *RegisterCosmosChainProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterCosmosChainProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterCosmosChainProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterCosmosChainProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterCosmosChainProposal.Merge(m, src)
}
func (m *RegisterCosmosChainProposal) XXX_Size() int {
	return m.Size()
}
func (m *RegisterCosmosChainProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterCosmosChainProposal.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterCosmosChainProposal proto.InternalMessageInfo

type CosmosIBCParams struct {
	IBCConnection        string                                 `protobuf:"bytes,1,opt,name=i_b_c_connection,json=iBCConnection,proto3" json:"i_b_c_connection,omitempty"`
	TokenTransferChannel string                                 `protobuf:"bytes,2,opt,name=token_transfer_channel,json=tokenTransferChannel,proto3" json:"token_transfer_channel,omitempty"`
	TokenTransferPort    string                                 `protobuf:"bytes,3,opt,name=token_transfer_port,json=tokenTransferPort,proto3" json:"token_transfer_port,omitempty"`
	BaseDenom            string                                 `protobuf:"bytes,4,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty"`
	MintDenom            string                                 `protobuf:"bytes,5,opt,name=mint_denom,json=mintDenom,proto3" json:"mint_denom,omitempty"`
	MinDeposit           github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,6,opt,name=min_deposit,json=minDeposit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"min_deposit"`
	PStakeFee            github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=p_stake_fee,json=pStakeFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"p_stake_fee"`
}

func (m *CosmosIBCParams) Reset()         { *m = CosmosIBCParams{} }
func (m *CosmosIBCParams) String() string { return proto.CompactTextString(m) }
func (*CosmosIBCParams) ProtoMessage()    {}
func (*CosmosIBCParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_abbb79eadcf33bd7, []int{1}
}
func (m *CosmosIBCParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CosmosIBCParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CosmosIBCParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CosmosIBCParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CosmosIBCParams.Merge(m, src)
}
func (m *CosmosIBCParams) XXX_Size() int {
	return m.Size()
}
func (m *CosmosIBCParams) XXX_DiscardUnknown() {
	xxx_messageInfo_CosmosIBCParams.DiscardUnknown(m)
}

var xxx_messageInfo_CosmosIBCParams proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RegisterCosmosChainProposal)(nil), "lscosmos.v1beta1.RegisterCosmosChainProposal")
	proto.RegisterType((*CosmosIBCParams)(nil), "lscosmos.v1beta1.CosmosIBCParams")
}

func init() {
	proto.RegisterFile("lscosmos/v1beta1/governance_proposal.proto", fileDescriptor_abbb79eadcf33bd7)
}

var fileDescriptor_abbb79eadcf33bd7 = []byte{
	// 520 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x31, 0x6f, 0x13, 0x31,
	0x14, 0xc7, 0xef, 0x9a, 0xa4, 0x34, 0x8e, 0x10, 0xe5, 0x88, 0xd0, 0xa9, 0xa8, 0xbe, 0xaa, 0x03,
	0x20, 0xa4, 0xde, 0xa9, 0xc0, 0x80, 0x18, 0x73, 0x11, 0x52, 0xa7, 0x46, 0x85, 0x89, 0x81, 0x93,
	0xe3, 0xbc, 0x26, 0x56, 0x72, 0xb6, 0x65, 0x9b, 0x08, 0x36, 0x3e, 0x02, 0x63, 0xc7, 0x0c, 0x0c,
	0x7c, 0x94, 0x8c, 0x1d, 0x11, 0x43, 0x05, 0x97, 0x85, 0x85, 0xef, 0x80, 0xec, 0xbb, 0x46, 0x49,
	0x85, 0x10, 0x99, 0x92, 0xfb, 0xff, 0xff, 0xef, 0xd9, 0xfa, 0xf9, 0x3d, 0xf4, 0x64, 0xa2, 0xa9,
	0xd0, 0xb9, 0xd0, 0xc9, 0xf4, 0xb8, 0x0f, 0x86, 0x1c, 0x27, 0x43, 0x31, 0x05, 0xc5, 0x09, 0xa7,
	0x90, 0x49, 0x25, 0xa4, 0xd0, 0x64, 0x12, 0x4b, 0x25, 0x8c, 0x08, 0x76, 0xaf, 0xb3, 0x71, 0x95,
	0xdd, 0x6b, 0x0f, 0xc5, 0x50, 0x38, 0x33, 0xb1, 0xff, 0xca, 0xdc, 0x1e, 0xae, 0x3a, 0xf6, 0x89,
	0x86, 0x65, 0x5b, 0x2a, 0x18, 0x2f, 0xfd, 0xc3, 0xdf, 0x5b, 0xe8, 0xc1, 0x19, 0x0c, 0x99, 0x36,
	0xa0, 0x52, 0x17, 0x4d, 0x47, 0x84, 0xf1, 0x5e, 0x75, 0x5a, 0xd0, 0x46, 0x0d, 0xc3, 0xcc, 0x04,
	0x42, 0xff, 0xc0, 0x7f, 0xdc, 0x3c, 0x2b, 0x3f, 0x82, 0x03, 0xd4, 0x1a, 0x80, 0xa6, 0x8a, 0x49,
	0xc3, 0x04, 0x0f, 0xb7, 0x9c, 0xb7, 0x2a, 0x05, 0x8f, 0xd0, 0x2e, 0xcb, 0xfa, 0x19, 0xcd, 0xa8,
	0xe0, 0x1c, 0xa8, 0x8b, 0xd5, 0x5c, 0xec, 0x36, 0xeb, 0xa4, 0xe9, 0x52, 0x0c, 0x9e, 0xa3, 0xfb,
	0x46, 0x8c, 0x81, 0x67, 0x46, 0x11, 0xae, 0xcf, 0x41, 0x65, 0x74, 0x44, 0x38, 0x87, 0x49, 0x58,
	0x77, 0xf1, 0xb6, 0x73, 0xdf, 0x54, 0x66, 0x5a, 0x7a, 0x41, 0x8c, 0xee, 0xdd, 0xa8, 0x92, 0x42,
	0x99, 0xb0, 0xe1, 0x4a, 0xee, 0xae, 0x95, 0xf4, 0x84, 0x32, 0xc1, 0x3e, 0x42, 0x96, 0x40, 0x36,
	0x00, 0x2e, 0xf2, 0x70, 0xdb, 0xc5, 0x9a, 0x56, 0xe9, 0x5a, 0xc1, 0xda, 0x39, 0xe3, 0xa6, 0xb2,
	0x6f, 0x95, 0xb6, 0x55, 0x4a, 0x3b, 0x42, 0xad, 0x9c, 0xf1, 0x6c, 0x00, 0x52, 0x68, 0x66, 0xc2,
	0x1d, 0xe7, 0xdb, 0x8a, 0x6e, 0xa9, 0x04, 0x18, 0xb5, 0x64, 0xa6, 0x0d, 0x19, 0x43, 0x76, 0x0e,
	0x10, 0x36, 0xcb, 0x06, 0xf2, 0xb5, 0x55, 0x5e, 0x01, 0xbc, 0xdc, 0xb9, 0x98, 0x45, 0xde, 0xaf,
	0x59, 0xe4, 0x1d, 0x7e, 0xa9, 0xa1, 0x3b, 0x25, 0xe7, 0x93, 0x4e, 0xda, 0x23, 0x8a, 0xe4, 0xfa,
	0xaf, 0xac, 0xfc, 0xcd, 0x58, 0x6d, 0x6d, 0xce, 0xaa, 0xf6, 0x7f, 0xac, 0xea, 0xff, 0x66, 0xd5,
	0xb8, 0xc9, 0xea, 0x74, 0x9d, 0x95, 0x43, 0xdd, 0x89, 0xe7, 0x57, 0x91, 0xf7, 0xfd, 0x2a, 0x7a,
	0x38, 0x64, 0x66, 0xf4, 0xbe, 0x1f, 0x53, 0x91, 0x27, 0xd5, 0x60, 0x96, 0x3f, 0x47, 0x7a, 0x30,
	0x4e, 0xcc, 0x47, 0x09, 0x3a, 0x3e, 0xe1, 0x66, 0x8d, 0x6d, 0xbe, 0xce, 0xd6, 0x3e, 0x4e, 0xeb,
	0xe9, 0x7e, 0x5c, 0x4d, 0xbf, 0xbd, 0xd7, 0xf5, 0x0a, 0xc4, 0x5d, 0xa0, 0x3d, 0x3b, 0xd5, 0x1b,
	0x9d, 0xd7, 0x05, 0xba, 0xfa, 0x54, 0xf5, 0x8b, 0x59, 0xe4, 0x77, 0xde, 0xcd, 0x7f, 0x62, 0xef,
	0x53, 0x81, 0xbd, 0xaf, 0x05, 0xf6, 0xe7, 0x05, 0xf6, 0x2f, 0x0b, 0xec, 0xff, 0x28, 0xb0, 0xff,
	0x79, 0x81, 0xbd, 0xcb, 0x05, 0xf6, 0xbe, 0x2d, 0xb0, 0xf7, 0xf6, 0xc5, 0x4a, 0x7b, 0x09, 0x4a,
	0xdb, 0x2d, 0xe2, 0x14, 0x4e, 0x39, 0x24, 0xd2, 0xdd, 0xf8, 0x88, 0x13, 0xc3, 0xa6, 0x90, 0x7c,
	0x48, 0x96, 0xab, 0xed, 0x0e, 0xed, 0x6f, 0xbb, 0xed, 0x7b, 0xf6, 0x27, 0x00, 0x00, 0xff, 0xff,
	0x09, 0xc9, 0x81, 0x96, 0xf3, 0x03, 0x00, 0x00,
}

func (this *CosmosIBCParams) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CosmosIBCParams)
	if !ok {
		that2, ok := that.(CosmosIBCParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.IBCConnection != that1.IBCConnection {
		return false
	}
	if this.TokenTransferChannel != that1.TokenTransferChannel {
		return false
	}
	if this.TokenTransferPort != that1.TokenTransferPort {
		return false
	}
	if this.BaseDenom != that1.BaseDenom {
		return false
	}
	if this.MintDenom != that1.MintDenom {
		return false
	}
	if !this.MinDeposit.Equal(that1.MinDeposit) {
		return false
	}
	if !this.PStakeFee.Equal(that1.PStakeFee) {
		return false
	}
	return true
}
func (m *RegisterCosmosChainProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterCosmosChainProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisterCosmosChainProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PStakeFee) > 0 {
		i -= len(m.PStakeFee)
		copy(dAtA[i:], m.PStakeFee)
		i = encodeVarintGovernanceProposal(dAtA, i, uint64(len(m.PStakeFee)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.MinDeposit) > 0 {
		i -= len(m.MinDeposit)
		copy(dAtA[i:], m.MinDeposit)
		i = encodeVarintGovernanceProposal(dAtA, i, uint64(len(m.MinDeposit)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.MintDenom) > 0 {
		i -= len(m.MintDenom)
		copy(dAtA[i:], m.MintDenom)
		i = encodeVarintGovernanceProposal(dAtA, i, uint64(len(m.MintDenom)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintGovernanceProposal(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TokenTransferPort) > 0 {
		i -= len(m.TokenTransferPort)
		copy(dAtA[i:], m.TokenTransferPort)
		i = encodeVarintGovernanceProposal(dAtA, i, uint64(len(m.TokenTransferPort)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TokenTransferChannel) > 0 {
		i -= len(m.TokenTransferChannel)
		copy(dAtA[i:], m.TokenTransferChannel)
		i = encodeVarintGovernanceProposal(dAtA, i, uint64(len(m.TokenTransferChannel)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.IBCConnection) > 0 {
		i -= len(m.IBCConnection)
		copy(dAtA[i:], m.IBCConnection)
		i = encodeVarintGovernanceProposal(dAtA, i, uint64(len(m.IBCConnection)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintGovernanceProposal(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintGovernanceProposal(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CosmosIBCParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CosmosIBCParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CosmosIBCParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.PStakeFee.Size()
		i -= size
		if _, err := m.PStakeFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGovernanceProposal(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.MinDeposit.Size()
		i -= size
		if _, err := m.MinDeposit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGovernanceProposal(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.MintDenom) > 0 {
		i -= len(m.MintDenom)
		copy(dAtA[i:], m.MintDenom)
		i = encodeVarintGovernanceProposal(dAtA, i, uint64(len(m.MintDenom)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintGovernanceProposal(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenTransferPort) > 0 {
		i -= len(m.TokenTransferPort)
		copy(dAtA[i:], m.TokenTransferPort)
		i = encodeVarintGovernanceProposal(dAtA, i, uint64(len(m.TokenTransferPort)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenTransferChannel) > 0 {
		i -= len(m.TokenTransferChannel)
		copy(dAtA[i:], m.TokenTransferChannel)
		i = encodeVarintGovernanceProposal(dAtA, i, uint64(len(m.TokenTransferChannel)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.IBCConnection) > 0 {
		i -= len(m.IBCConnection)
		copy(dAtA[i:], m.IBCConnection)
		i = encodeVarintGovernanceProposal(dAtA, i, uint64(len(m.IBCConnection)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGovernanceProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovGovernanceProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RegisterCosmosChainProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovGovernanceProposal(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovGovernanceProposal(uint64(l))
	}
	l = len(m.IBCConnection)
	if l > 0 {
		n += 1 + l + sovGovernanceProposal(uint64(l))
	}
	l = len(m.TokenTransferChannel)
	if l > 0 {
		n += 1 + l + sovGovernanceProposal(uint64(l))
	}
	l = len(m.TokenTransferPort)
	if l > 0 {
		n += 1 + l + sovGovernanceProposal(uint64(l))
	}
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovGovernanceProposal(uint64(l))
	}
	l = len(m.MintDenom)
	if l > 0 {
		n += 1 + l + sovGovernanceProposal(uint64(l))
	}
	l = len(m.MinDeposit)
	if l > 0 {
		n += 1 + l + sovGovernanceProposal(uint64(l))
	}
	l = len(m.PStakeFee)
	if l > 0 {
		n += 1 + l + sovGovernanceProposal(uint64(l))
	}
	return n
}

func (m *CosmosIBCParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.IBCConnection)
	if l > 0 {
		n += 1 + l + sovGovernanceProposal(uint64(l))
	}
	l = len(m.TokenTransferChannel)
	if l > 0 {
		n += 1 + l + sovGovernanceProposal(uint64(l))
	}
	l = len(m.TokenTransferPort)
	if l > 0 {
		n += 1 + l + sovGovernanceProposal(uint64(l))
	}
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovGovernanceProposal(uint64(l))
	}
	l = len(m.MintDenom)
	if l > 0 {
		n += 1 + l + sovGovernanceProposal(uint64(l))
	}
	l = m.MinDeposit.Size()
	n += 1 + l + sovGovernanceProposal(uint64(l))
	l = m.PStakeFee.Size()
	n += 1 + l + sovGovernanceProposal(uint64(l))
	return n
}

func sovGovernanceProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGovernanceProposal(x uint64) (n int) {
	return sovGovernanceProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RegisterCosmosChainProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernanceProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterCosmosChainProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterCosmosChainProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernanceProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovernanceProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernanceProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernanceProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovernanceProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernanceProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IBCConnection", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernanceProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovernanceProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernanceProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IBCConnection = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenTransferChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernanceProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovernanceProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernanceProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenTransferChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenTransferPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernanceProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovernanceProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernanceProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenTransferPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernanceProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovernanceProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernanceProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernanceProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovernanceProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernanceProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDeposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernanceProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovernanceProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernanceProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MinDeposit = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PStakeFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernanceProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovernanceProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernanceProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PStakeFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernanceProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernanceProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CosmosIBCParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGovernanceProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CosmosIBCParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CosmosIBCParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IBCConnection", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernanceProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovernanceProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernanceProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IBCConnection = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenTransferChannel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernanceProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovernanceProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernanceProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenTransferChannel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenTransferPort", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernanceProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovernanceProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernanceProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenTransferPort = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernanceProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovernanceProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernanceProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernanceProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovernanceProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernanceProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinDeposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernanceProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGovernanceProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGovernanceProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinDeposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PStakeFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGovernanceProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGovernanceProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGovernanceProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PStakeFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGovernanceProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGovernanceProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGovernanceProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGovernanceProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGovernanceProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGovernanceProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGovernanceProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGovernanceProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGovernanceProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGovernanceProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGovernanceProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGovernanceProposal = fmt.Errorf("proto: unexpected end of group")
)

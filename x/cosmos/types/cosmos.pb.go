// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/v1beta1/cosmos.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TODO: Do no use in proposals, use WeightedAddress for proposals
type WeightedAddressAmount struct {
	Address string                                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	Weight  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=weight,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"weight" yaml:"weight"`
	Denom   string                                 `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	Amount  github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount" yaml:"amount"`
}

func (m *WeightedAddressAmount) Reset()         { *m = WeightedAddressAmount{} }
func (m *WeightedAddressAmount) String() string { return proto.CompactTextString(m) }
func (*WeightedAddressAmount) ProtoMessage()    {}
func (*WeightedAddressAmount) Descriptor() ([]byte, []int) {
	return fileDescriptor_f498af9dcbf643f8, []int{0}
}
func (m *WeightedAddressAmount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WeightedAddressAmount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WeightedAddressAmount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WeightedAddressAmount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeightedAddressAmount.Merge(m, src)
}
func (m *WeightedAddressAmount) XXX_Size() int {
	return m.Size()
}
func (m *WeightedAddressAmount) XXX_DiscardUnknown() {
	xxx_messageInfo_WeightedAddressAmount.DiscardUnknown(m)
}

var xxx_messageInfo_WeightedAddressAmount proto.InternalMessageInfo

func (m *WeightedAddressAmount) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *WeightedAddressAmount) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type WeightedAddress struct {
	Address string                                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	Weight  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=weight,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"weight" yaml:"weight"`
}

func (m *WeightedAddress) Reset()         { *m = WeightedAddress{} }
func (m *WeightedAddress) String() string { return proto.CompactTextString(m) }
func (*WeightedAddress) ProtoMessage()    {}
func (*WeightedAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_f498af9dcbf643f8, []int{1}
}
func (m *WeightedAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WeightedAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WeightedAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WeightedAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeightedAddress.Merge(m, src)
}
func (m *WeightedAddress) XXX_Size() int {
	return m.Size()
}
func (m *WeightedAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_WeightedAddress.DiscardUnknown(m)
}

var xxx_messageInfo_WeightedAddress proto.InternalMessageInfo

func (m *WeightedAddress) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type DistributionProportions struct {
	ValidatorRewards github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=validator_rewards,json=validatorRewards,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"validator_rewards" yaml:"validator_rewards"`
	DeveloperRewards github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=developer_rewards,json=developerRewards,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"developer_rewards" yaml:"developer_rewards"`
}

func (m *DistributionProportions) Reset()         { *m = DistributionProportions{} }
func (m *DistributionProportions) String() string { return proto.CompactTextString(m) }
func (*DistributionProportions) ProtoMessage()    {}
func (*DistributionProportions) Descriptor() ([]byte, []int) {
	return fileDescriptor_f498af9dcbf643f8, []int{2}
}
func (m *DistributionProportions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DistributionProportions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DistributionProportions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DistributionProportions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributionProportions.Merge(m, src)
}
func (m *DistributionProportions) XXX_Size() int {
	return m.Size()
}
func (m *DistributionProportions) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributionProportions.DiscardUnknown(m)
}

var xxx_messageInfo_DistributionProportions proto.InternalMessageInfo

type CosmosChainProposalParams struct {
	ChainID              string        `protobuf:"bytes,1,opt,name=chain_i_d,json=chainID,proto3" json:"chain_i_d,omitempty"`
	ReduceVotingPeriodBy time.Duration `protobuf:"bytes,3,opt,name=reduce_voting_period_by,json=reduceVotingPeriodBy,proto3,stdduration" json:"voting_period,omitempty" yaml:"voting_period"`
}

func (m *CosmosChainProposalParams) Reset()         { *m = CosmosChainProposalParams{} }
func (m *CosmosChainProposalParams) String() string { return proto.CompactTextString(m) }
func (*CosmosChainProposalParams) ProtoMessage()    {}
func (*CosmosChainProposalParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_f498af9dcbf643f8, []int{3}
}
func (m *CosmosChainProposalParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CosmosChainProposalParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CosmosChainProposalParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CosmosChainProposalParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CosmosChainProposalParams.Merge(m, src)
}
func (m *CosmosChainProposalParams) XXX_Size() int {
	return m.Size()
}
func (m *CosmosChainProposalParams) XXX_DiscardUnknown() {
	xxx_messageInfo_CosmosChainProposalParams.DiscardUnknown(m)
}

var xxx_messageInfo_CosmosChainProposalParams proto.InternalMessageInfo

func (m *CosmosChainProposalParams) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *CosmosChainProposalParams) GetReduceVotingPeriodBy() time.Duration {
	if m != nil {
		return m.ReduceVotingPeriodBy
	}
	return 0
}

//Params hold the parameters for cosmos module
//TODO : check correct moretags naming convention
type Params struct {
	MintDenom                         string                    `protobuf:"bytes,1,opt,name=mint_denom,json=mintDenom,proto3" json:"mint_denom,omitempty" yaml:"mint_denom"`
	MinMintingAmount                  types.Coin                `protobuf:"bytes,2,opt,name=min_minting_amount,json=minMintingAmount,proto3" json:"min_minting_amount" yaml:"min_minting_amount"`
	MaxMintingAmount                  types.Coin                `protobuf:"bytes,3,opt,name=max_minting_amount,json=maxMintingAmount,proto3" json:"max_minting_amount" yaml:"max_minting_amount"`
	MinBurningAmount                  types.Coin                `protobuf:"bytes,4,opt,name=min_burning_amount,json=minBurningAmount,proto3" json:"min_burning_amount" yaml:"min_burning_amount"`
	MaxBurningAmount                  types.Coin                `protobuf:"bytes,5,opt,name=max_burning_amount,json=maxBurningAmount,proto3" json:"max_burning_amount" yaml:"max_burning_amount"`
	MaxValidatorToDelegate            uint64                    `protobuf:"varint,6,opt,name=max_validator_to_delegate,json=maxValidatorToDelegate,proto3" json:"max_validator_to_delegate,omitempty" yaml:"max_validator_to_delegate"`
	WeightedDeveloperRewardsReceivers []WeightedAddress         `protobuf:"bytes,9,rep,name=weighted_developer_rewards_receivers,json=weightedDeveloperRewardsReceivers,proto3" json:"weighted_developer_rewards_receivers" yaml:"weightedDeveloperRewardsReceivers"`
	DistributionProportion            DistributionProportions   `protobuf:"bytes,10,opt,name=distribution_proportion,json=distributionProportion,proto3" json:"distribution_proportion" yaml:"weightedDeveloperRewardsReceivers"`
	Epochs                            int64                     `protobuf:"varint,11,opt,name=epochs,proto3" json:"epochs,omitempty" yaml:"epochs"`
	MaxIncomingAndOutgoingTxns        int64                     `protobuf:"varint,12,opt,name=max_incoming_and_outgoing_txns,json=maxIncomingAndOutgoingTxns,proto3" json:"max_incoming_and_outgoing_txns,omitempty" yaml:"maxIncomingAndOutgoingTxns"`
	CosmosProposalParams              CosmosChainProposalParams `protobuf:"bytes,13,opt,name=cosmos_proposal_params,json=cosmosProposalParams,proto3" json:"cosmos_proposal_params" yaml:"cosmos_proposal_params"`
	CustodialAddress                  string                    `protobuf:"bytes,14,opt,name=custodial_address,json=custodialAddress,proto3" json:"custodial_address,omitempty" yaml:"custodial_address"`
	DelegationThreshold               types.Coin                `protobuf:"bytes,15,opt,name=delegation_threshold,json=delegationThreshold,proto3" json:"delegation_threshold" yaml:"delegation_threshold"`
	ModuleEnabled                     bool                      `protobuf:"varint,16,opt,name=module_enabled,json=moduleEnabled,proto3" json:"module_enabled,omitempty"`
	StakingEpochIdentifier            string                    `protobuf:"bytes,17,opt,name=staking_epoch_identifier,json=stakingEpochIdentifier,proto3" json:"staking_epoch_identifier,omitempty"`
	ChunkSize                         int64                     `protobuf:"varint,19,opt,name=chunk_size,json=chunkSize,proto3" json:"chunk_size,omitempty"`
	UndelegateEpochIdentifier         string                    `protobuf:"bytes,20,opt,name=undelegate_epoch_identifier,json=undelegateEpochIdentifier,proto3" json:"undelegate_epoch_identifier,omitempty"`
	BondDenoms                        []string                  `protobuf:"bytes,21,rep,name=bond_denoms,json=bondDenoms,proto3" json:"bond_denoms,omitempty"`
	StakingDenom                      string                    `protobuf:"bytes,22,opt,name=staking_denom,json=stakingDenom,proto3" json:"staking_denom,omitempty"`
	MultisigThreshold                 uint64                    `protobuf:"varint,23,opt,name=multisig_threshold,json=multisigThreshold,proto3" json:"multisig_threshold,omitempty"`
	RetryLimit                        uint64                    `protobuf:"varint,24,opt,name=retry_limit,json=retryLimit,proto3" json:"retry_limit,omitempty"`
	RewardEpochIdentifier             string                    `protobuf:"bytes,25,opt,name=reward_epoch_identifier,json=rewardEpochIdentifier,proto3" json:"reward_epoch_identifier,omitempty"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_f498af9dcbf643f8, []int{4}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMintDenom() string {
	if m != nil {
		return m.MintDenom
	}
	return ""
}

func (m *Params) GetMinMintingAmount() types.Coin {
	if m != nil {
		return m.MinMintingAmount
	}
	return types.Coin{}
}

func (m *Params) GetMaxMintingAmount() types.Coin {
	if m != nil {
		return m.MaxMintingAmount
	}
	return types.Coin{}
}

func (m *Params) GetMinBurningAmount() types.Coin {
	if m != nil {
		return m.MinBurningAmount
	}
	return types.Coin{}
}

func (m *Params) GetMaxBurningAmount() types.Coin {
	if m != nil {
		return m.MaxBurningAmount
	}
	return types.Coin{}
}

func (m *Params) GetMaxValidatorToDelegate() uint64 {
	if m != nil {
		return m.MaxValidatorToDelegate
	}
	return 0
}

func (m *Params) GetWeightedDeveloperRewardsReceivers() []WeightedAddress {
	if m != nil {
		return m.WeightedDeveloperRewardsReceivers
	}
	return nil
}

func (m *Params) GetDistributionProportion() DistributionProportions {
	if m != nil {
		return m.DistributionProportion
	}
	return DistributionProportions{}
}

func (m *Params) GetEpochs() int64 {
	if m != nil {
		return m.Epochs
	}
	return 0
}

func (m *Params) GetMaxIncomingAndOutgoingTxns() int64 {
	if m != nil {
		return m.MaxIncomingAndOutgoingTxns
	}
	return 0
}

func (m *Params) GetCosmosProposalParams() CosmosChainProposalParams {
	if m != nil {
		return m.CosmosProposalParams
	}
	return CosmosChainProposalParams{}
}

func (m *Params) GetCustodialAddress() string {
	if m != nil {
		return m.CustodialAddress
	}
	return ""
}

func (m *Params) GetDelegationThreshold() types.Coin {
	if m != nil {
		return m.DelegationThreshold
	}
	return types.Coin{}
}

func (m *Params) GetModuleEnabled() bool {
	if m != nil {
		return m.ModuleEnabled
	}
	return false
}

func (m *Params) GetStakingEpochIdentifier() string {
	if m != nil {
		return m.StakingEpochIdentifier
	}
	return ""
}

func (m *Params) GetChunkSize() int64 {
	if m != nil {
		return m.ChunkSize
	}
	return 0
}

func (m *Params) GetUndelegateEpochIdentifier() string {
	if m != nil {
		return m.UndelegateEpochIdentifier
	}
	return ""
}

func (m *Params) GetBondDenoms() []string {
	if m != nil {
		return m.BondDenoms
	}
	return nil
}

func (m *Params) GetStakingDenom() string {
	if m != nil {
		return m.StakingDenom
	}
	return ""
}

func (m *Params) GetMultisigThreshold() uint64 {
	if m != nil {
		return m.MultisigThreshold
	}
	return 0
}

func (m *Params) GetRetryLimit() uint64 {
	if m != nil {
		return m.RetryLimit
	}
	return 0
}

func (m *Params) GetRewardEpochIdentifier() string {
	if m != nil {
		return m.RewardEpochIdentifier
	}
	return ""
}

func init() {
	proto.RegisterType((*WeightedAddressAmount)(nil), "cosmos.v1beta1.WeightedAddressAmount")
	proto.RegisterType((*WeightedAddress)(nil), "cosmos.v1beta1.WeightedAddress")
	proto.RegisterType((*DistributionProportions)(nil), "cosmos.v1beta1.DistributionProportions")
	proto.RegisterType((*CosmosChainProposalParams)(nil), "cosmos.v1beta1.CosmosChainProposalParams")
	proto.RegisterType((*Params)(nil), "cosmos.v1beta1.Params")
}

func init() { proto.RegisterFile("cosmos/v1beta1/cosmos.proto", fileDescriptor_f498af9dcbf643f8) }

var fileDescriptor_f498af9dcbf643f8 = []byte{
	// 1164 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0x4d, 0x6f, 0xdb, 0x46,
	0x13, 0x36, 0x6d, 0xc7, 0x79, 0xb5, 0x8e, 0x1d, 0x8b, 0x91, 0x6d, 0xca, 0x79, 0x23, 0x2a, 0x4c,
	0xd2, 0x2a, 0x40, 0x2c, 0x35, 0x69, 0x11, 0x14, 0x29, 0xd0, 0xc2, 0xb2, 0x72, 0x70, 0xd1, 0x22,
	0x06, 0x63, 0x24, 0x40, 0x2f, 0xc4, 0x4a, 0xbb, 0x91, 0xb6, 0x26, 0x77, 0x55, 0xee, 0x52, 0x96,
	0xf2, 0x03, 0x7a, 0x29, 0x02, 0x14, 0x3d, 0xf9, 0x58, 0xf4, 0xcf, 0x34, 0xc7, 0x1c, 0x8b, 0x1e,
	0xd4, 0xc2, 0xbe, 0xf5, 0xa8, 0x63, 0x4f, 0xc5, 0x7e, 0x50, 0x9f, 0x36, 0x02, 0xbb, 0x97, 0x9e,
	0xa4, 0x7d, 0x66, 0xf8, 0x3c, 0x3b, 0x33, 0x9c, 0x19, 0x82, 0x9b, 0x0d, 0xc6, 0x23, 0xc6, 0x2b,
	0x9d, 0x87, 0x75, 0x2c, 0xe0, 0xc3, 0x8a, 0x3e, 0x96, 0xdb, 0x31, 0x13, 0xcc, 0x5e, 0x35, 0x27,
	0x63, 0xdc, 0x2a, 0x18, 0xe7, 0x3a, 0xe4, 0x78, 0xec, 0x09, 0x42, 0xb5, 0xff, 0x56, 0x5e, 0xdb,
	0x03, 0x75, 0x9a, 0xa0, 0xda, 0xca, 0x35, 0x59, 0x93, 0x69, 0x5c, 0xfe, 0x33, 0x68, 0xa1, 0xc9,
	0x58, 0x33, 0xc4, 0x15, 0x75, 0xaa, 0x27, 0xaf, 0x2a, 0x28, 0x89, 0xa1, 0x20, 0xcc, 0x10, 0x7a,
	0x6f, 0xe6, 0xc1, 0xfa, 0x4b, 0x4c, 0x9a, 0x2d, 0x81, 0xd1, 0x0e, 0x42, 0x31, 0xe6, 0x7c, 0x27,
	0x62, 0x09, 0x15, 0xf6, 0x03, 0x70, 0x15, 0x6a, 0xc0, 0xb1, 0x8a, 0x56, 0x29, 0x53, 0xb5, 0x07,
	0x7d, 0x77, 0xb5, 0x07, 0xa3, 0xf0, 0x89, 0x67, 0x0c, 0x9e, 0x9f, 0xba, 0xd8, 0x2f, 0xc1, 0xd2,
	0x91, 0xa2, 0x71, 0xe6, 0x95, 0xf3, 0x17, 0x6f, 0xfb, 0xee, 0xdc, 0xef, 0x7d, 0xf7, 0x83, 0x26,
	0x11, 0xad, 0xa4, 0x5e, 0x6e, 0xb0, 0xc8, 0x5c, 0xd7, 0xfc, 0x6c, 0x73, 0x74, 0x58, 0x11, 0xbd,
	0x36, 0xe6, 0xe5, 0x1a, 0x6e, 0x0c, 0xfa, 0xee, 0x8a, 0xa6, 0xd6, 0x2c, 0x9e, 0x6f, 0xe8, 0xec,
	0x1c, 0xb8, 0x82, 0x30, 0x65, 0x91, 0xb3, 0x20, 0x79, 0x7d, 0x7d, 0x90, 0x72, 0x50, 0x5d, 0xd3,
	0x59, 0xbc, 0xb0, 0xdc, 0x1e, 0x15, 0x23, 0x39, 0xcd, 0xe2, 0xf9, 0x86, 0xce, 0x3b, 0xb6, 0xc0,
	0xf5, 0xa9, 0x7c, 0xfc, 0x47, 0x32, 0xe1, 0xfd, 0x30, 0x0f, 0x36, 0x6b, 0x84, 0x8b, 0x98, 0xd4,
	0x13, 0x59, 0xc1, 0xfd, 0x98, 0xb5, 0x59, 0x2c, 0xff, 0x71, 0xfb, 0x08, 0x64, 0x3b, 0x30, 0x24,
	0x08, 0x0a, 0x16, 0x07, 0x31, 0x3e, 0x82, 0x31, 0x4a, 0x2f, 0xfb, 0xe5, 0x85, 0xf5, 0x1d, 0xad,
	0x3f, 0x43, 0xe8, 0xf9, 0x6b, 0x43, 0xcc, 0xd7, 0x90, 0x14, 0x46, 0xb8, 0x83, 0x43, 0xd6, 0xc6,
	0x23, 0xe1, 0xf9, 0x7f, 0x27, 0x3c, 0x43, 0xe8, 0xf9, 0x6b, 0x43, 0xcc, 0x08, 0x7b, 0xbf, 0x5a,
	0x20, 0xbf, 0xab, 0x68, 0x76, 0x5b, 0x90, 0xe8, 0x64, 0x70, 0x18, 0xee, 0xc3, 0x18, 0x46, 0xdc,
	0xde, 0x02, 0x99, 0x86, 0x84, 0x03, 0x12, 0x20, 0x9d, 0x07, 0xff, 0xaa, 0x02, 0xf6, 0x6a, 0xf6,
	0x1b, 0x0b, 0x6c, 0xc6, 0x18, 0x25, 0x0d, 0x1c, 0x74, 0x98, 0x20, 0xb4, 0x19, 0xb4, 0x71, 0x4c,
	0x18, 0x0a, 0xea, 0x3d, 0xf5, 0x92, 0x2d, 0x3f, 0xca, 0x97, 0x75, 0xd7, 0x94, 0xd3, 0xae, 0x29,
	0xd7, 0x4c, 0xd7, 0x54, 0x3f, 0x93, 0x41, 0xfd, 0xd5, 0x77, 0x37, 0x27, 0x1e, 0x7d, 0xc0, 0x22,
	0x22, 0x70, 0xd4, 0x16, 0xbd, 0x41, 0xdf, 0xcd, 0x99, 0xf4, 0x8d, 0x3b, 0x78, 0xc7, 0x7f, 0xb8,
	0x96, 0x9f, 0xd3, 0xb2, 0x2f, 0x94, 0x65, 0x5f, 0x19, 0xaa, 0x3d, 0xef, 0xef, 0x15, 0xb0, 0x64,
	0xae, 0xfd, 0x09, 0x00, 0x11, 0xa1, 0x22, 0xd0, 0x6f, 0xbc, 0xae, 0xdf, 0xfa, 0xa0, 0xef, 0x66,
	0x35, 0xe5, 0xc8, 0xe6, 0xf9, 0x19, 0x79, 0xa8, 0xa9, 0x66, 0xf8, 0x16, 0xd8, 0x11, 0xa1, 0x81,
	0x04, 0xa4, 0xa2, 0x69, 0x8c, 0x79, 0x13, 0x8a, 0x19, 0x12, 0x72, 0xa2, 0xa4, 0x63, 0xa6, 0xbc,
	0xcb, 0x08, 0xad, 0xde, 0x96, 0xa1, 0x0c, 0xfa, 0x6e, 0x7e, 0x48, 0x3e, 0x45, 0xe1, 0xf9, 0x6b,
	0x11, 0xa1, 0x5f, 0x6b, 0xcc, 0x4c, 0x05, 0xa9, 0x05, 0xbb, 0xd3, 0x5a, 0x0b, 0x17, 0xd5, 0x9a,
	0xa1, 0x90, 0x5a, 0xb0, 0x3b, 0xab, 0x45, 0x68, 0x50, 0x4f, 0x62, 0x3a, 0xa6, 0xb5, 0x78, 0x89,
	0xb8, 0x26, 0x29, 0x74, 0x5c, 0x55, 0x8d, 0x4d, 0xc6, 0x35, 0xa5, 0x75, 0xe5, 0x12, 0x71, 0xcd,
	0x6a, 0xc1, 0xee, 0xa4, 0x56, 0x00, 0xf2, 0xd2, 0x71, 0xd4, 0x5f, 0x82, 0x05, 0x08, 0x87, 0xb8,
	0x09, 0x05, 0x76, 0x96, 0x8a, 0x56, 0x69, 0xb1, 0x7a, 0x77, 0xd0, 0x77, 0x8b, 0x23, 0xce, 0x33,
	0x5d, 0x3d, 0x7f, 0x23, 0x82, 0xdd, 0x17, 0xa9, 0xe9, 0x80, 0xd5, 0x8c, 0xc1, 0xfe, 0xc5, 0x02,
	0x77, 0x8f, 0xcc, 0x10, 0x0b, 0x66, 0xba, 0x29, 0x88, 0x71, 0x03, 0x93, 0x0e, 0x8e, 0xb9, 0x93,
	0x29, 0x2e, 0x94, 0x96, 0x1f, 0xb9, 0xe5, 0xc9, 0x2d, 0x54, 0x9e, 0x1a, 0x80, 0xd5, 0x8f, 0x4c,
	0x94, 0xa5, 0xf1, 0xc1, 0x84, 0x51, 0x6d, 0xaa, 0x27, 0xfd, 0x94, 0xd7, 0xf3, 0x6f, 0xbf, 0xd7,
	0xc7, 0xfe, 0xc9, 0x02, 0x9b, 0x68, 0x6c, 0x9c, 0xc9, 0x9d, 0x66, 0xe6, 0x99, 0x03, 0x54, 0xde,
	0x3f, 0x9c, 0xbe, 0xd7, 0x39, 0xd3, 0xef, 0x12, 0xf7, 0xdb, 0x40, 0x67, 0x52, 0xd9, 0xf7, 0xc1,
	0x12, 0x6e, 0xb3, 0x46, 0x8b, 0x3b, 0xcb, 0x45, 0xab, 0xb4, 0x50, 0xcd, 0x8e, 0xc6, 0xb1, 0xc6,
	0x3d, 0xdf, 0x38, 0xd8, 0x04, 0x14, 0x64, 0x69, 0x08, 0x6d, 0xb0, 0x48, 0xd5, 0x9b, 0xa2, 0x80,
	0x25, 0xa2, 0xc9, 0xe4, 0x41, 0x74, 0x29, 0x77, 0xae, 0x29, 0x8a, 0x7b, 0x83, 0xbe, 0x7b, 0x7b,
	0x58, 0xca, 0x3d, 0xe3, 0xbe, 0x43, 0xd1, 0x33, 0xe3, 0x7c, 0xd0, 0xa5, 0xdc, 0xf3, 0xb7, 0xce,
	0x37, 0xda, 0xdf, 0x5b, 0x60, 0x63, 0xb4, 0xf8, 0xd5, 0x9c, 0x0b, 0xda, 0x6a, 0x62, 0x38, 0x2b,
	0x2a, 0x53, 0xf7, 0xa7, 0x33, 0x75, 0xee, 0x64, 0xac, 0xde, 0x33, 0xb9, 0xba, 0xa5, 0xaf, 0x74,
	0x36, 0xad, 0xe7, 0xe7, 0xb4, 0x61, 0x6a, 0xac, 0xee, 0x81, 0x6c, 0x23, 0xe1, 0x82, 0x21, 0x02,
	0xc3, 0x20, 0xdd, 0x89, 0xab, 0x6a, 0x4c, 0xfd, 0x7f, 0x34, 0xbf, 0x67, 0x5c, 0x3c, 0x7f, 0x6d,
	0x88, 0xa5, 0x4b, 0xf5, 0x3b, 0x90, 0x33, 0x2f, 0xb2, 0xac, 0xbd, 0x68, 0xc5, 0x98, 0xb7, 0x58,
	0x88, 0x9c, 0xeb, 0xef, 0x6b, 0xb9, 0x3b, 0x26, 0x80, 0x9b, 0xe9, 0xb2, 0x98, 0x25, 0xf1, 0xfc,
	0x1b, 0x23, 0xf8, 0x20, 0x45, 0xed, 0x7b, 0x60, 0x35, 0x62, 0x28, 0x09, 0x71, 0x80, 0x29, 0xac,
	0x87, 0x18, 0x39, 0x6b, 0x45, 0xab, 0xf4, 0x3f, 0x7f, 0x45, 0xa3, 0x4f, 0x35, 0x68, 0x7f, 0x0a,
	0x1c, 0x2e, 0xe0, 0xa1, 0x2c, 0xa3, 0x2a, 0x75, 0x40, 0x10, 0xa6, 0x82, 0xbc, 0x22, 0x38, 0x76,
	0xb2, 0x6a, 0x95, 0x6c, 0x18, 0xfb, 0x53, 0x69, 0xde, 0x1b, 0x5a, 0xed, 0x5b, 0x00, 0x34, 0x5a,
	0x09, 0x3d, 0x0c, 0x38, 0x79, 0x8d, 0x9d, 0x1b, 0xb2, 0xfc, 0x7e, 0x46, 0x21, 0xcf, 0xc9, 0x6b,
	0x6c, 0x7f, 0x0e, 0x6e, 0x26, 0x34, 0xed, 0xde, 0x59, 0xee, 0x9c, 0xe2, 0xce, 0x8f, 0x5c, 0xa6,
	0xe9, 0x5d, 0xb0, 0x5c, 0x67, 0x14, 0xe9, 0x0d, 0xc0, 0x9d, 0xf5, 0xe2, 0x42, 0x29, 0xe3, 0x03,
	0x09, 0xa9, 0x3d, 0xc0, 0xed, 0x3b, 0x60, 0x25, 0xbd, 0xb9, 0xde, 0x20, 0x1b, 0x8a, 0xf2, 0x9a,
	0x01, 0xf5, 0xb6, 0xd8, 0x06, 0x76, 0x94, 0x84, 0x82, 0x70, 0xd2, 0x1c, 0x4b, 0xfb, 0xa6, 0x1c,
	0x3b, 0x7e, 0x36, 0xb5, 0x8c, 0x92, 0xe6, 0x82, 0xe5, 0x18, 0x8b, 0xb8, 0x17, 0x84, 0x24, 0x22,
	0xc2, 0x71, 0x94, 0x1f, 0x50, 0xd0, 0x57, 0x12, 0xb1, 0x1f, 0xcb, 0x6d, 0x2a, 0xfb, 0x6b, 0x36,
	0xa2, 0xbc, 0x92, 0x5f, 0xd7, 0xe6, 0xa9, 0x68, 0x9e, 0x2c, 0x1e, 0xff, 0xec, 0xce, 0x55, 0xf7,
	0xdf, 0x9e, 0x14, 0xac, 0x77, 0x27, 0x05, 0xeb, 0xcf, 0x93, 0x82, 0xf5, 0xe3, 0x69, 0x61, 0xee,
	0xdd, 0x69, 0x61, 0xee, 0xb7, 0xd3, 0xc2, 0xdc, 0x37, 0x8f, 0xc7, 0x3e, 0x1b, 0xda, 0x38, 0xe6,
	0x84, 0x0b, 0x4c, 0x1b, 0xf8, 0x19, 0xc5, 0x95, 0xf6, 0x73, 0x01, 0x0f, 0xf1, 0x36, 0x85, 0x82,
	0x74, 0x70, 0xa5, 0x9b, 0x7e, 0x55, 0xa8, 0x4f, 0x89, 0xfa, 0x92, 0x5a, 0xda, 0x1f, 0xff, 0x13,
	0x00, 0x00, 0xff, 0xff, 0xa9, 0x82, 0x69, 0x3f, 0x78, 0x0b, 0x00, 0x00,
}

func (m *WeightedAddressAmount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WeightedAddressAmount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeightedAddressAmount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCosmos(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintCosmos(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size := m.Weight.Size()
		i -= size
		if _, err := m.Weight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCosmos(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintCosmos(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *WeightedAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WeightedAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WeightedAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Weight.Size()
		i -= size
		if _, err := m.Weight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCosmos(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintCosmos(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DistributionProportions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DistributionProportions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DistributionProportions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.DeveloperRewards.Size()
		i -= size
		if _, err := m.DeveloperRewards.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCosmos(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.ValidatorRewards.Size()
		i -= size
		if _, err := m.ValidatorRewards.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCosmos(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CosmosChainProposalParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CosmosChainProposalParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CosmosChainProposalParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(m.ReduceVotingPeriodBy, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(m.ReduceVotingPeriodBy):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintCosmos(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x1a
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintCosmos(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RewardEpochIdentifier) > 0 {
		i -= len(m.RewardEpochIdentifier)
		copy(dAtA[i:], m.RewardEpochIdentifier)
		i = encodeVarintCosmos(dAtA, i, uint64(len(m.RewardEpochIdentifier)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if m.RetryLimit != 0 {
		i = encodeVarintCosmos(dAtA, i, uint64(m.RetryLimit))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.MultisigThreshold != 0 {
		i = encodeVarintCosmos(dAtA, i, uint64(m.MultisigThreshold))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if len(m.StakingDenom) > 0 {
		i -= len(m.StakingDenom)
		copy(dAtA[i:], m.StakingDenom)
		i = encodeVarintCosmos(dAtA, i, uint64(len(m.StakingDenom)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.BondDenoms) > 0 {
		for iNdEx := len(m.BondDenoms) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BondDenoms[iNdEx])
			copy(dAtA[i:], m.BondDenoms[iNdEx])
			i = encodeVarintCosmos(dAtA, i, uint64(len(m.BondDenoms[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
	}
	if len(m.UndelegateEpochIdentifier) > 0 {
		i -= len(m.UndelegateEpochIdentifier)
		copy(dAtA[i:], m.UndelegateEpochIdentifier)
		i = encodeVarintCosmos(dAtA, i, uint64(len(m.UndelegateEpochIdentifier)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.ChunkSize != 0 {
		i = encodeVarintCosmos(dAtA, i, uint64(m.ChunkSize))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if len(m.StakingEpochIdentifier) > 0 {
		i -= len(m.StakingEpochIdentifier)
		copy(dAtA[i:], m.StakingEpochIdentifier)
		i = encodeVarintCosmos(dAtA, i, uint64(len(m.StakingEpochIdentifier)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.ModuleEnabled {
		i--
		if m.ModuleEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	{
		size, err := m.DelegationThreshold.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCosmos(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x7a
	if len(m.CustodialAddress) > 0 {
		i -= len(m.CustodialAddress)
		copy(dAtA[i:], m.CustodialAddress)
		i = encodeVarintCosmos(dAtA, i, uint64(len(m.CustodialAddress)))
		i--
		dAtA[i] = 0x72
	}
	{
		size, err := m.CosmosProposalParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCosmos(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	if m.MaxIncomingAndOutgoingTxns != 0 {
		i = encodeVarintCosmos(dAtA, i, uint64(m.MaxIncomingAndOutgoingTxns))
		i--
		dAtA[i] = 0x60
	}
	if m.Epochs != 0 {
		i = encodeVarintCosmos(dAtA, i, uint64(m.Epochs))
		i--
		dAtA[i] = 0x58
	}
	{
		size, err := m.DistributionProportion.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCosmos(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	if len(m.WeightedDeveloperRewardsReceivers) > 0 {
		for iNdEx := len(m.WeightedDeveloperRewardsReceivers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WeightedDeveloperRewardsReceivers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCosmos(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.MaxValidatorToDelegate != 0 {
		i = encodeVarintCosmos(dAtA, i, uint64(m.MaxValidatorToDelegate))
		i--
		dAtA[i] = 0x30
	}
	{
		size, err := m.MaxBurningAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCosmos(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.MinBurningAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCosmos(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.MaxMintingAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCosmos(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.MinMintingAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintCosmos(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.MintDenom) > 0 {
		i -= len(m.MintDenom)
		copy(dAtA[i:], m.MintDenom)
		i = encodeVarintCosmos(dAtA, i, uint64(len(m.MintDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCosmos(dAtA []byte, offset int, v uint64) int {
	offset -= sovCosmos(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WeightedAddressAmount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovCosmos(uint64(l))
	}
	l = m.Weight.Size()
	n += 1 + l + sovCosmos(uint64(l))
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovCosmos(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovCosmos(uint64(l))
	return n
}

func (m *WeightedAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovCosmos(uint64(l))
	}
	l = m.Weight.Size()
	n += 1 + l + sovCosmos(uint64(l))
	return n
}

func (m *DistributionProportions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ValidatorRewards.Size()
	n += 1 + l + sovCosmos(uint64(l))
	l = m.DeveloperRewards.Size()
	n += 1 + l + sovCosmos(uint64(l))
	return n
}

func (m *CosmosChainProposalParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovCosmos(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdDuration(m.ReduceVotingPeriodBy)
	n += 1 + l + sovCosmos(uint64(l))
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MintDenom)
	if l > 0 {
		n += 1 + l + sovCosmos(uint64(l))
	}
	l = m.MinMintingAmount.Size()
	n += 1 + l + sovCosmos(uint64(l))
	l = m.MaxMintingAmount.Size()
	n += 1 + l + sovCosmos(uint64(l))
	l = m.MinBurningAmount.Size()
	n += 1 + l + sovCosmos(uint64(l))
	l = m.MaxBurningAmount.Size()
	n += 1 + l + sovCosmos(uint64(l))
	if m.MaxValidatorToDelegate != 0 {
		n += 1 + sovCosmos(uint64(m.MaxValidatorToDelegate))
	}
	if len(m.WeightedDeveloperRewardsReceivers) > 0 {
		for _, e := range m.WeightedDeveloperRewardsReceivers {
			l = e.Size()
			n += 1 + l + sovCosmos(uint64(l))
		}
	}
	l = m.DistributionProportion.Size()
	n += 1 + l + sovCosmos(uint64(l))
	if m.Epochs != 0 {
		n += 1 + sovCosmos(uint64(m.Epochs))
	}
	if m.MaxIncomingAndOutgoingTxns != 0 {
		n += 1 + sovCosmos(uint64(m.MaxIncomingAndOutgoingTxns))
	}
	l = m.CosmosProposalParams.Size()
	n += 1 + l + sovCosmos(uint64(l))
	l = len(m.CustodialAddress)
	if l > 0 {
		n += 1 + l + sovCosmos(uint64(l))
	}
	l = m.DelegationThreshold.Size()
	n += 1 + l + sovCosmos(uint64(l))
	if m.ModuleEnabled {
		n += 3
	}
	l = len(m.StakingEpochIdentifier)
	if l > 0 {
		n += 2 + l + sovCosmos(uint64(l))
	}
	if m.ChunkSize != 0 {
		n += 2 + sovCosmos(uint64(m.ChunkSize))
	}
	l = len(m.UndelegateEpochIdentifier)
	if l > 0 {
		n += 2 + l + sovCosmos(uint64(l))
	}
	if len(m.BondDenoms) > 0 {
		for _, s := range m.BondDenoms {
			l = len(s)
			n += 2 + l + sovCosmos(uint64(l))
		}
	}
	l = len(m.StakingDenom)
	if l > 0 {
		n += 2 + l + sovCosmos(uint64(l))
	}
	if m.MultisigThreshold != 0 {
		n += 2 + sovCosmos(uint64(m.MultisigThreshold))
	}
	if m.RetryLimit != 0 {
		n += 2 + sovCosmos(uint64(m.RetryLimit))
	}
	l = len(m.RewardEpochIdentifier)
	if l > 0 {
		n += 2 + l + sovCosmos(uint64(l))
	}
	return n
}

func sovCosmos(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCosmos(x uint64) (n int) {
	return sovCosmos(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WeightedAddressAmount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCosmos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WeightedAddressAmount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WeightedAddressAmount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosmos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCosmos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCosmos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosmos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCosmos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCosmos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Weight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosmos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCosmos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCosmos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosmos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCosmos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCosmos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCosmos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCosmos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WeightedAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCosmos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WeightedAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WeightedAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosmos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCosmos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCosmos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosmos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCosmos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCosmos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Weight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCosmos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCosmos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DistributionProportions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCosmos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DistributionProportions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DistributionProportions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorRewards", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosmos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCosmos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCosmos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidatorRewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeveloperRewards", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosmos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCosmos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCosmos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DeveloperRewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCosmos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCosmos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CosmosChainProposalParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCosmos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CosmosChainProposalParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CosmosChainProposalParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosmos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCosmos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCosmos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReduceVotingPeriodBy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosmos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCosmos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCosmos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(&m.ReduceVotingPeriodBy, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCosmos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCosmos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCosmos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosmos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCosmos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCosmos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinMintingAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosmos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCosmos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCosmos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinMintingAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMintingAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosmos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCosmos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCosmos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxMintingAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinBurningAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosmos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCosmos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCosmos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinBurningAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxBurningAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosmos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCosmos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCosmos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxBurningAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxValidatorToDelegate", wireType)
			}
			m.MaxValidatorToDelegate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosmos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxValidatorToDelegate |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeightedDeveloperRewardsReceivers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosmos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCosmos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCosmos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WeightedDeveloperRewardsReceivers = append(m.WeightedDeveloperRewardsReceivers, WeightedAddress{})
			if err := m.WeightedDeveloperRewardsReceivers[len(m.WeightedDeveloperRewardsReceivers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistributionProportion", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosmos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCosmos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCosmos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DistributionProportion.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epochs", wireType)
			}
			m.Epochs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosmos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Epochs |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxIncomingAndOutgoingTxns", wireType)
			}
			m.MaxIncomingAndOutgoingTxns = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosmos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxIncomingAndOutgoingTxns |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CosmosProposalParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosmos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCosmos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCosmos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CosmosProposalParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustodialAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosmos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCosmos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCosmos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustodialAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationThreshold", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosmos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCosmos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCosmos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegationThreshold.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosmos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ModuleEnabled = bool(v != 0)
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingEpochIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosmos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCosmos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCosmos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingEpochIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkSize", wireType)
			}
			m.ChunkSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosmos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChunkSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UndelegateEpochIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosmos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCosmos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCosmos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UndelegateEpochIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondDenoms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosmos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCosmos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCosmos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondDenoms = append(m.BondDenoms, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosmos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCosmos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCosmos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultisigThreshold", wireType)
			}
			m.MultisigThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosmos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MultisigThreshold |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryLimit", wireType)
			}
			m.RetryLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosmos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetryLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardEpochIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCosmos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCosmos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCosmos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardEpochIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCosmos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCosmos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCosmos(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCosmos
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCosmos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCosmos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCosmos
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCosmos
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCosmos
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCosmos        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCosmos          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCosmos = fmt.Errorf("proto: unexpected end of group")
)

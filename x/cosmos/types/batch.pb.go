// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/v1beta1/batch.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	tx "github.com/cosmos/cosmos-sdk/types/tx"
	signing "github.com/cosmos/cosmos-sdk/types/tx/signing"
	types "github.com/cosmos/cosmos-sdk/x/staking/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/regen-network/cosmos-proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ChainIDHeightAndTxHashKey struct {
	ChainID     string `protobuf:"bytes,1,opt,name=chain_i_d,json=chainID,proto3" json:"chain_i_d,omitempty"`
	BlockHeight int64  `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	TxHash      string `protobuf:"bytes,3,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (m *ChainIDHeightAndTxHashKey) Reset()         { *m = ChainIDHeightAndTxHashKey{} }
func (m *ChainIDHeightAndTxHashKey) String() string { return proto.CompactTextString(m) }
func (*ChainIDHeightAndTxHashKey) ProtoMessage()    {}
func (*ChainIDHeightAndTxHashKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbd4e547303b7d7c, []int{0}
}
func (m *ChainIDHeightAndTxHashKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainIDHeightAndTxHashKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainIDHeightAndTxHashKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainIDHeightAndTxHashKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainIDHeightAndTxHashKey.Merge(m, src)
}
func (m *ChainIDHeightAndTxHashKey) XXX_Size() int {
	return m.Size()
}
func (m *ChainIDHeightAndTxHashKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainIDHeightAndTxHashKey.DiscardUnknown(m)
}

var xxx_messageInfo_ChainIDHeightAndTxHashKey proto.InternalMessageInfo

func (m *ChainIDHeightAndTxHashKey) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *ChainIDHeightAndTxHashKey) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *ChainIDHeightAndTxHashKey) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

type ProposalKey struct {
	ChainID     string `protobuf:"bytes,1,opt,name=chain_i_d,json=chainID,proto3" json:"chain_i_d,omitempty"`
	BlockHeight int64  `protobuf:"varint,2,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
	ProposalID  uint64 `protobuf:"varint,3,opt,name=proposal_i_d,json=proposalID,proto3" json:"proposal_i_d,omitempty"`
}

func (m *ProposalKey) Reset()         { *m = ProposalKey{} }
func (m *ProposalKey) String() string { return proto.CompactTextString(m) }
func (*ProposalKey) ProtoMessage()    {}
func (*ProposalKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbd4e547303b7d7c, []int{1}
}
func (m *ProposalKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalKey.Merge(m, src)
}
func (m *ProposalKey) XXX_Size() int {
	return m.Size()
}
func (m *ProposalKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalKey.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalKey proto.InternalMessageInfo

func (m *ProposalKey) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *ProposalKey) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *ProposalKey) GetProposalID() uint64 {
	if m != nil {
		return m.ProposalID
	}
	return 0
}

type ProposalValue struct {
	ProposalDetails    MsgMakeProposal                        `protobuf:"bytes,1,opt,name=proposal_details,json=proposalDetails,proto3" json:"proposal_details"`
	ProposalPosted     bool                                   `protobuf:"varint,2,opt,name=proposal_posted,json=proposalPosted,proto3" json:"proposal_posted,omitempty"`
	ValidatorAddresses []string                               `protobuf:"bytes,3,rep,name=validator_addresses,json=validatorAddresses,proto3" json:"validator_addresses,omitempty"`
	Ratio              github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=ratio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"ratio"`
	Counter            int64                                  `protobuf:"varint,5,opt,name=counter,proto3" json:"counter,omitempty"`
	ActiveBlockHeight  int64                                  `protobuf:"varint,6,opt,name=active_block_height,json=activeBlockHeight,proto3" json:"active_block_height,omitempty"`
}

func (m *ProposalValue) Reset()         { *m = ProposalValue{} }
func (m *ProposalValue) String() string { return proto.CompactTextString(m) }
func (*ProposalValue) ProtoMessage()    {}
func (*ProposalValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbd4e547303b7d7c, []int{2}
}
func (m *ProposalValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProposalValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProposalValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProposalValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProposalValue.Merge(m, src)
}
func (m *ProposalValue) XXX_Size() int {
	return m.Size()
}
func (m *ProposalValue) XXX_DiscardUnknown() {
	xxx_messageInfo_ProposalValue.DiscardUnknown(m)
}

var xxx_messageInfo_ProposalValue proto.InternalMessageInfo

func (m *ProposalValue) GetProposalDetails() MsgMakeProposal {
	if m != nil {
		return m.ProposalDetails
	}
	return MsgMakeProposal{}
}

func (m *ProposalValue) GetProposalPosted() bool {
	if m != nil {
		return m.ProposalPosted
	}
	return false
}

func (m *ProposalValue) GetValidatorAddresses() []string {
	if m != nil {
		return m.ValidatorAddresses
	}
	return nil
}

func (m *ProposalValue) GetCounter() int64 {
	if m != nil {
		return m.Counter
	}
	return 0
}

func (m *ProposalValue) GetActiveBlockHeight() int64 {
	if m != nil {
		return m.ActiveBlockHeight
	}
	return 0
}

type CosmosTx struct {
	Tx                tx.Tx  `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx"`
	EventEmitted      bool   `protobuf:"varint,2,opt,name=event_emitted,json=eventEmitted,proto3" json:"event_emitted,omitempty"`
	Status            string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	TxHash            string `protobuf:"bytes,4,opt,name=txHash,proto3" json:"txHash,omitempty"`
	ActiveBlockHeight int64  `protobuf:"varint,5,opt,name=active_block_height,json=activeBlockHeight,proto3" json:"active_block_height,omitempty"`
	SignerAddress     string `protobuf:"bytes,6,opt,name=signer_address,json=signerAddress,proto3" json:"signer_address,omitempty"`
}

func (m *CosmosTx) Reset()         { *m = CosmosTx{} }
func (m *CosmosTx) String() string { return proto.CompactTextString(m) }
func (*CosmosTx) ProtoMessage()    {}
func (*CosmosTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbd4e547303b7d7c, []int{3}
}
func (m *CosmosTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CosmosTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CosmosTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CosmosTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CosmosTx.Merge(m, src)
}
func (m *CosmosTx) XXX_Size() int {
	return m.Size()
}
func (m *CosmosTx) XXX_DiscardUnknown() {
	xxx_messageInfo_CosmosTx.DiscardUnknown(m)
}

var xxx_messageInfo_CosmosTx proto.InternalMessageInfo

func (m *CosmosTx) GetTx() tx.Tx {
	if m != nil {
		return m.Tx
	}
	return tx.Tx{}
}

func (m *CosmosTx) GetEventEmitted() bool {
	if m != nil {
		return m.EventEmitted
	}
	return false
}

func (m *CosmosTx) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *CosmosTx) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *CosmosTx) GetActiveBlockHeight() int64 {
	if m != nil {
		return m.ActiveBlockHeight
	}
	return 0
}

func (m *CosmosTx) GetSignerAddress() string {
	if m != nil {
		return m.SignerAddress
	}
	return ""
}

type TxHashValue struct {
	TxStatus           MsgTxStatus                            `protobuf:"bytes,1,opt,name=tx_status,json=txStatus,proto3" json:"tx_status"`
	ValidatorAddresses []string                               `protobuf:"bytes,2,rep,name=validator_addresses,json=validatorAddresses,proto3" json:"validator_addresses,omitempty"`
	Status             []string                               `protobuf:"bytes,3,rep,name=status,proto3" json:"status,omitempty"`
	Ratio              github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=ratio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"ratio"`
	TxCleared          bool                                   `protobuf:"varint,5,opt,name=tx_cleared,json=txCleared,proto3" json:"tx_cleared,omitempty"`
	Counter            int64                                  `protobuf:"varint,6,opt,name=counter,proto3" json:"counter,omitempty"`
	ActiveBlockHeight  int64                                  `protobuf:"varint,7,opt,name=active_block_height,json=activeBlockHeight,proto3" json:"active_block_height,omitempty"`
}

func (m *TxHashValue) Reset()         { *m = TxHashValue{} }
func (m *TxHashValue) String() string { return proto.CompactTextString(m) }
func (*TxHashValue) ProtoMessage()    {}
func (*TxHashValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbd4e547303b7d7c, []int{4}
}
func (m *TxHashValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxHashValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxHashValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxHashValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxHashValue.Merge(m, src)
}
func (m *TxHashValue) XXX_Size() int {
	return m.Size()
}
func (m *TxHashValue) XXX_DiscardUnknown() {
	xxx_messageInfo_TxHashValue.DiscardUnknown(m)
}

var xxx_messageInfo_TxHashValue proto.InternalMessageInfo

func (m *TxHashValue) GetTxStatus() MsgTxStatus {
	if m != nil {
		return m.TxStatus
	}
	return MsgTxStatus{}
}

func (m *TxHashValue) GetValidatorAddresses() []string {
	if m != nil {
		return m.ValidatorAddresses
	}
	return nil
}

func (m *TxHashValue) GetStatus() []string {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *TxHashValue) GetTxCleared() bool {
	if m != nil {
		return m.TxCleared
	}
	return false
}

func (m *TxHashValue) GetCounter() int64 {
	if m != nil {
		return m.Counter
	}
	return 0
}

func (m *TxHashValue) GetActiveBlockHeight() int64 {
	if m != nil {
		return m.ActiveBlockHeight
	}
	return 0
}

type WithdrawStoreValue struct {
	WithdrawDetails []MsgWithdrawStkAsset `protobuf:"bytes,1,rep,name=withdraw_details,json=withdrawDetails,proto3" json:"withdraw_details"`
	UnbondEmitFlag  []bool                `protobuf:"varint,2,rep,packed,name=unbond_emit_flag,json=unbondEmitFlag,proto3" json:"unbond_emit_flag,omitempty"`
}

func (m *WithdrawStoreValue) Reset()         { *m = WithdrawStoreValue{} }
func (m *WithdrawStoreValue) String() string { return proto.CompactTextString(m) }
func (*WithdrawStoreValue) ProtoMessage()    {}
func (*WithdrawStoreValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbd4e547303b7d7c, []int{5}
}
func (m *WithdrawStoreValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WithdrawStoreValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WithdrawStoreValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WithdrawStoreValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WithdrawStoreValue.Merge(m, src)
}
func (m *WithdrawStoreValue) XXX_Size() int {
	return m.Size()
}
func (m *WithdrawStoreValue) XXX_DiscardUnknown() {
	xxx_messageInfo_WithdrawStoreValue.DiscardUnknown(m)
}

var xxx_messageInfo_WithdrawStoreValue proto.InternalMessageInfo

func (m *WithdrawStoreValue) GetWithdrawDetails() []MsgWithdrawStkAsset {
	if m != nil {
		return m.WithdrawDetails
	}
	return nil
}

func (m *WithdrawStoreValue) GetUnbondEmitFlag() []bool {
	if m != nil {
		return m.UnbondEmitFlag
	}
	return nil
}

type ValueOutgoingUnbondStore struct {
	EpochNumber        int64                                  `protobuf:"varint,1,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
	UndelegateMessages []types.MsgUndelegate                  `protobuf:"bytes,2,rep,name=undelegate_messages,json=undelegateMessages,proto3" json:"undelegate_messages"`
	CValue             github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=c_value,json=cValue,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"c_value"`
}

func (m *ValueOutgoingUnbondStore) Reset()         { *m = ValueOutgoingUnbondStore{} }
func (m *ValueOutgoingUnbondStore) String() string { return proto.CompactTextString(m) }
func (*ValueOutgoingUnbondStore) ProtoMessage()    {}
func (*ValueOutgoingUnbondStore) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbd4e547303b7d7c, []int{6}
}
func (m *ValueOutgoingUnbondStore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValueOutgoingUnbondStore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValueOutgoingUnbondStore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValueOutgoingUnbondStore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValueOutgoingUnbondStore.Merge(m, src)
}
func (m *ValueOutgoingUnbondStore) XXX_Size() int {
	return m.Size()
}
func (m *ValueOutgoingUnbondStore) XXX_DiscardUnknown() {
	xxx_messageInfo_ValueOutgoingUnbondStore.DiscardUnknown(m)
}

var xxx_messageInfo_ValueOutgoingUnbondStore proto.InternalMessageInfo

func (m *ValueOutgoingUnbondStore) GetEpochNumber() int64 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

func (m *ValueOutgoingUnbondStore) GetUndelegateMessages() []types.MsgUndelegate {
	if m != nil {
		return m.UndelegateMessages
	}
	return nil
}

type ValidatorStoreValue struct {
	OrchestratorAddresses []string `protobuf:"bytes,1,rep,name=orchestrator_addresses,json=orchestratorAddresses,proto3" json:"orchestrator_addresses,omitempty"`
}

func (m *ValidatorStoreValue) Reset()         { *m = ValidatorStoreValue{} }
func (m *ValidatorStoreValue) String() string { return proto.CompactTextString(m) }
func (*ValidatorStoreValue) ProtoMessage()    {}
func (*ValidatorStoreValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbd4e547303b7d7c, []int{7}
}
func (m *ValidatorStoreValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorStoreValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorStoreValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorStoreValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorStoreValue.Merge(m, src)
}
func (m *ValidatorStoreValue) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorStoreValue) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorStoreValue.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorStoreValue proto.InternalMessageInfo

func (m *ValidatorStoreValue) GetOrchestratorAddresses() []string {
	if m != nil {
		return m.OrchestratorAddresses
	}
	return nil
}

type MintingEpochValueMember struct {
	TxID   uint64 `protobuf:"varint,1,opt,name=txID,proto3" json:"txID,omitempty"`
	Status bool   `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MintingEpochValueMember) Reset()         { *m = MintingEpochValueMember{} }
func (m *MintingEpochValueMember) String() string { return proto.CompactTextString(m) }
func (*MintingEpochValueMember) ProtoMessage()    {}
func (*MintingEpochValueMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbd4e547303b7d7c, []int{8}
}
func (m *MintingEpochValueMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MintingEpochValueMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MintingEpochValueMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MintingEpochValueMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MintingEpochValueMember.Merge(m, src)
}
func (m *MintingEpochValueMember) XXX_Size() int {
	return m.Size()
}
func (m *MintingEpochValueMember) XXX_DiscardUnknown() {
	xxx_messageInfo_MintingEpochValueMember.DiscardUnknown(m)
}

var xxx_messageInfo_MintingEpochValueMember proto.InternalMessageInfo

func (m *MintingEpochValueMember) GetTxID() uint64 {
	if m != nil {
		return m.TxID
	}
	return 0
}

func (m *MintingEpochValueMember) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

type ValueUndelegateSuccessStore struct {
	UndelegateSuccess  MsgUndelegateSuccess                   `protobuf:"bytes,1,opt,name=undelegate_success,json=undelegateSuccess,proto3" json:"undelegate_success"`
	ValidatorAddresses []string                               `protobuf:"bytes,2,rep,name=validator_addresses,json=validatorAddresses,proto3" json:"validator_addresses,omitempty"`
	Ratio              github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=ratio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"ratio"`
	Counter            int64                                  `protobuf:"varint,4,opt,name=counter,proto3" json:"counter,omitempty"`
	ActiveBlockHeight  int64                                  `protobuf:"varint,5,opt,name=active_block_height,json=activeBlockHeight,proto3" json:"active_block_height,omitempty"`
}

func (m *ValueUndelegateSuccessStore) Reset()         { *m = ValueUndelegateSuccessStore{} }
func (m *ValueUndelegateSuccessStore) String() string { return proto.CompactTextString(m) }
func (*ValueUndelegateSuccessStore) ProtoMessage()    {}
func (*ValueUndelegateSuccessStore) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbd4e547303b7d7c, []int{9}
}
func (m *ValueUndelegateSuccessStore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValueUndelegateSuccessStore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValueUndelegateSuccessStore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValueUndelegateSuccessStore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValueUndelegateSuccessStore.Merge(m, src)
}
func (m *ValueUndelegateSuccessStore) XXX_Size() int {
	return m.Size()
}
func (m *ValueUndelegateSuccessStore) XXX_DiscardUnknown() {
	xxx_messageInfo_ValueUndelegateSuccessStore.DiscardUnknown(m)
}

var xxx_messageInfo_ValueUndelegateSuccessStore proto.InternalMessageInfo

func (m *ValueUndelegateSuccessStore) GetUndelegateSuccess() MsgUndelegateSuccess {
	if m != nil {
		return m.UndelegateSuccess
	}
	return MsgUndelegateSuccess{}
}

func (m *ValueUndelegateSuccessStore) GetValidatorAddresses() []string {
	if m != nil {
		return m.ValidatorAddresses
	}
	return nil
}

func (m *ValueUndelegateSuccessStore) GetCounter() int64 {
	if m != nil {
		return m.Counter
	}
	return 0
}

func (m *ValueUndelegateSuccessStore) GetActiveBlockHeight() int64 {
	if m != nil {
		return m.ActiveBlockHeight
	}
	return 0
}

type SingleSignatureDataForOutgoingPool struct {
	SignMode  signing.SignMode `protobuf:"varint,1,opt,name=sign_mode,json=signMode,proto3,enum=cosmos.tx.signing.v1beta1.SignMode" json:"sign_mode,omitempty"`
	Signature []byte           `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *SingleSignatureDataForOutgoingPool) Reset()         { *m = SingleSignatureDataForOutgoingPool{} }
func (m *SingleSignatureDataForOutgoingPool) String() string { return proto.CompactTextString(m) }
func (*SingleSignatureDataForOutgoingPool) ProtoMessage()    {}
func (*SingleSignatureDataForOutgoingPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbd4e547303b7d7c, []int{10}
}
func (m *SingleSignatureDataForOutgoingPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SingleSignatureDataForOutgoingPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SingleSignatureDataForOutgoingPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SingleSignatureDataForOutgoingPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SingleSignatureDataForOutgoingPool.Merge(m, src)
}
func (m *SingleSignatureDataForOutgoingPool) XXX_Size() int {
	return m.Size()
}
func (m *SingleSignatureDataForOutgoingPool) XXX_DiscardUnknown() {
	xxx_messageInfo_SingleSignatureDataForOutgoingPool.DiscardUnknown(m)
}

var xxx_messageInfo_SingleSignatureDataForOutgoingPool proto.InternalMessageInfo

func (m *SingleSignatureDataForOutgoingPool) GetSignMode() signing.SignMode {
	if m != nil {
		return m.SignMode
	}
	return signing.SignMode_SIGN_MODE_UNSPECIFIED
}

func (m *SingleSignatureDataForOutgoingPool) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

type OutgoingSignaturePoolValue struct {
	SingleSignatures      []SingleSignatureDataForOutgoingPool   `protobuf:"bytes,1,rep,name=single_signatures,json=singleSignatures,proto3" json:"single_signatures"`
	Ratio                 github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=ratio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"ratio"`
	ValidatorAddresses    []string                               `protobuf:"bytes,3,rep,name=validator_addresses,json=validatorAddresses,proto3" json:"validator_addresses,omitempty"`
	OrchestratorAddresses []string                               `protobuf:"bytes,4,rep,name=orchestrator_addresses,json=orchestratorAddresses,proto3" json:"orchestrator_addresses,omitempty"`
	Counter               uint64                                 `protobuf:"varint,5,opt,name=counter,proto3" json:"counter,omitempty"`
	ActiveBlockHeight     int64                                  `protobuf:"varint,6,opt,name=active_block_height,json=activeBlockHeight,proto3" json:"active_block_height,omitempty"`
	SignedEventEmitted    bool                                   `protobuf:"varint,7,opt,name=signed_event_emitted,json=signedEventEmitted,proto3" json:"signed_event_emitted,omitempty"`
}

func (m *OutgoingSignaturePoolValue) Reset()         { *m = OutgoingSignaturePoolValue{} }
func (m *OutgoingSignaturePoolValue) String() string { return proto.CompactTextString(m) }
func (*OutgoingSignaturePoolValue) ProtoMessage()    {}
func (*OutgoingSignaturePoolValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbd4e547303b7d7c, []int{11}
}
func (m *OutgoingSignaturePoolValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutgoingSignaturePoolValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutgoingSignaturePoolValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutgoingSignaturePoolValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutgoingSignaturePoolValue.Merge(m, src)
}
func (m *OutgoingSignaturePoolValue) XXX_Size() int {
	return m.Size()
}
func (m *OutgoingSignaturePoolValue) XXX_DiscardUnknown() {
	xxx_messageInfo_OutgoingSignaturePoolValue.DiscardUnknown(m)
}

var xxx_messageInfo_OutgoingSignaturePoolValue proto.InternalMessageInfo

func (m *OutgoingSignaturePoolValue) GetSingleSignatures() []SingleSignatureDataForOutgoingPool {
	if m != nil {
		return m.SingleSignatures
	}
	return nil
}

func (m *OutgoingSignaturePoolValue) GetValidatorAddresses() []string {
	if m != nil {
		return m.ValidatorAddresses
	}
	return nil
}

func (m *OutgoingSignaturePoolValue) GetOrchestratorAddresses() []string {
	if m != nil {
		return m.OrchestratorAddresses
	}
	return nil
}

func (m *OutgoingSignaturePoolValue) GetCounter() uint64 {
	if m != nil {
		return m.Counter
	}
	return 0
}

func (m *OutgoingSignaturePoolValue) GetActiveBlockHeight() int64 {
	if m != nil {
		return m.ActiveBlockHeight
	}
	return 0
}

func (m *OutgoingSignaturePoolValue) GetSignedEventEmitted() bool {
	if m != nil {
		return m.SignedEventEmitted
	}
	return false
}

type OutgoingQueueValue struct {
	Active       bool   `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
	RetryCounter uint64 `protobuf:"varint,2,opt,name=retry_counter,json=retryCounter,proto3" json:"retry_counter,omitempty"`
}

func (m *OutgoingQueueValue) Reset()         { *m = OutgoingQueueValue{} }
func (m *OutgoingQueueValue) String() string { return proto.CompactTextString(m) }
func (*OutgoingQueueValue) ProtoMessage()    {}
func (*OutgoingQueueValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbd4e547303b7d7c, []int{12}
}
func (m *OutgoingQueueValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutgoingQueueValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutgoingQueueValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutgoingQueueValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutgoingQueueValue.Merge(m, src)
}
func (m *OutgoingQueueValue) XXX_Size() int {
	return m.Size()
}
func (m *OutgoingQueueValue) XXX_DiscardUnknown() {
	xxx_messageInfo_OutgoingQueueValue.DiscardUnknown(m)
}

var xxx_messageInfo_OutgoingQueueValue proto.InternalMessageInfo

func (m *OutgoingQueueValue) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

func (m *OutgoingQueueValue) GetRetryCounter() uint64 {
	if m != nil {
		return m.RetryCounter
	}
	return 0
}

type SlashingStoreValue struct {
	SlashingDetails    MsgSlashingEventOnCosmosChain          `protobuf:"bytes,1,opt,name=slashing_details,json=slashingDetails,proto3" json:"slashing_details"`
	Ratio              github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=ratio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"ratio"`
	ValidatorAddresses []string                               `protobuf:"bytes,3,rep,name=validator_addresses,json=validatorAddresses,proto3" json:"validator_addresses,omitempty"`
	Counter            int64                                  `protobuf:"varint,4,opt,name=counter,proto3" json:"counter,omitempty"`
	AddedToCValue      bool                                   `protobuf:"varint,5,opt,name=added_to_c_value,json=addedToCValue,proto3" json:"added_to_c_value,omitempty"`
	ActiveBlockHeight  int64                                  `protobuf:"varint,6,opt,name=active_block_height,json=activeBlockHeight,proto3" json:"active_block_height,omitempty"`
}

func (m *SlashingStoreValue) Reset()         { *m = SlashingStoreValue{} }
func (m *SlashingStoreValue) String() string { return proto.CompactTextString(m) }
func (*SlashingStoreValue) ProtoMessage()    {}
func (*SlashingStoreValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbd4e547303b7d7c, []int{13}
}
func (m *SlashingStoreValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SlashingStoreValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SlashingStoreValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SlashingStoreValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SlashingStoreValue.Merge(m, src)
}
func (m *SlashingStoreValue) XXX_Size() int {
	return m.Size()
}
func (m *SlashingStoreValue) XXX_DiscardUnknown() {
	xxx_messageInfo_SlashingStoreValue.DiscardUnknown(m)
}

var xxx_messageInfo_SlashingStoreValue proto.InternalMessageInfo

func (m *SlashingStoreValue) GetSlashingDetails() MsgSlashingEventOnCosmosChain {
	if m != nil {
		return m.SlashingDetails
	}
	return MsgSlashingEventOnCosmosChain{}
}

func (m *SlashingStoreValue) GetValidatorAddresses() []string {
	if m != nil {
		return m.ValidatorAddresses
	}
	return nil
}

func (m *SlashingStoreValue) GetCounter() int64 {
	if m != nil {
		return m.Counter
	}
	return 0
}

func (m *SlashingStoreValue) GetAddedToCValue() bool {
	if m != nil {
		return m.AddedToCValue
	}
	return false
}

func (m *SlashingStoreValue) GetActiveBlockHeight() int64 {
	if m != nil {
		return m.ActiveBlockHeight
	}
	return 0
}

type MintTokenStoreValue struct {
	MintTokens         MsgMintTokensForAccount                `protobuf:"bytes,1,opt,name=mint_tokens,json=mintTokens,proto3" json:"mint_tokens"`
	Ratio              github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=ratio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"ratio"`
	ValidatorAddresses []string                               `protobuf:"bytes,3,rep,name=validator_addresses,json=validatorAddresses,proto3" json:"validator_addresses,omitempty"`
	Counter            int64                                  `protobuf:"varint,4,opt,name=counter,proto3" json:"counter,omitempty"`
	Minted             bool                                   `protobuf:"varint,5,opt,name=minted,proto3" json:"minted,omitempty"`
	AddedToEpoch       bool                                   `protobuf:"varint,6,opt,name=added_to_epoch,json=addedToEpoch,proto3" json:"added_to_epoch,omitempty"`
	ActiveBlockHeight  int64                                  `protobuf:"varint,7,opt,name=active_block_height,json=activeBlockHeight,proto3" json:"active_block_height,omitempty"`
}

func (m *MintTokenStoreValue) Reset()         { *m = MintTokenStoreValue{} }
func (m *MintTokenStoreValue) String() string { return proto.CompactTextString(m) }
func (*MintTokenStoreValue) ProtoMessage()    {}
func (*MintTokenStoreValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbd4e547303b7d7c, []int{14}
}
func (m *MintTokenStoreValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MintTokenStoreValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MintTokenStoreValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MintTokenStoreValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MintTokenStoreValue.Merge(m, src)
}
func (m *MintTokenStoreValue) XXX_Size() int {
	return m.Size()
}
func (m *MintTokenStoreValue) XXX_DiscardUnknown() {
	xxx_messageInfo_MintTokenStoreValue.DiscardUnknown(m)
}

var xxx_messageInfo_MintTokenStoreValue proto.InternalMessageInfo

func (m *MintTokenStoreValue) GetMintTokens() MsgMintTokensForAccount {
	if m != nil {
		return m.MintTokens
	}
	return MsgMintTokensForAccount{}
}

func (m *MintTokenStoreValue) GetValidatorAddresses() []string {
	if m != nil {
		return m.ValidatorAddresses
	}
	return nil
}

func (m *MintTokenStoreValue) GetCounter() int64 {
	if m != nil {
		return m.Counter
	}
	return 0
}

func (m *MintTokenStoreValue) GetMinted() bool {
	if m != nil {
		return m.Minted
	}
	return false
}

func (m *MintTokenStoreValue) GetAddedToEpoch() bool {
	if m != nil {
		return m.AddedToEpoch
	}
	return false
}

func (m *MintTokenStoreValue) GetActiveBlockHeight() int64 {
	if m != nil {
		return m.ActiveBlockHeight
	}
	return 0
}

type EpochWithdrawSuccessStoreValue struct {
	Status bool                                   `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	CValue github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=cValue,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"cValue"`
}

func (m *EpochWithdrawSuccessStoreValue) Reset()         { *m = EpochWithdrawSuccessStoreValue{} }
func (m *EpochWithdrawSuccessStoreValue) String() string { return proto.CompactTextString(m) }
func (*EpochWithdrawSuccessStoreValue) ProtoMessage()    {}
func (*EpochWithdrawSuccessStoreValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_cbd4e547303b7d7c, []int{15}
}
func (m *EpochWithdrawSuccessStoreValue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EpochWithdrawSuccessStoreValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EpochWithdrawSuccessStoreValue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EpochWithdrawSuccessStoreValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EpochWithdrawSuccessStoreValue.Merge(m, src)
}
func (m *EpochWithdrawSuccessStoreValue) XXX_Size() int {
	return m.Size()
}
func (m *EpochWithdrawSuccessStoreValue) XXX_DiscardUnknown() {
	xxx_messageInfo_EpochWithdrawSuccessStoreValue.DiscardUnknown(m)
}

var xxx_messageInfo_EpochWithdrawSuccessStoreValue proto.InternalMessageInfo

func (m *EpochWithdrawSuccessStoreValue) GetStatus() bool {
	if m != nil {
		return m.Status
	}
	return false
}

func init() {
	proto.RegisterType((*ChainIDHeightAndTxHashKey)(nil), "cosmos.v1beta1.ChainIDHeightAndTxHashKey")
	proto.RegisterType((*ProposalKey)(nil), "cosmos.v1beta1.ProposalKey")
	proto.RegisterType((*ProposalValue)(nil), "cosmos.v1beta1.ProposalValue")
	proto.RegisterType((*CosmosTx)(nil), "cosmos.v1beta1.CosmosTx")
	proto.RegisterType((*TxHashValue)(nil), "cosmos.v1beta1.TxHashValue")
	proto.RegisterType((*WithdrawStoreValue)(nil), "cosmos.v1beta1.WithdrawStoreValue")
	proto.RegisterType((*ValueOutgoingUnbondStore)(nil), "cosmos.v1beta1.ValueOutgoingUnbondStore")
	proto.RegisterType((*ValidatorStoreValue)(nil), "cosmos.v1beta1.ValidatorStoreValue")
	proto.RegisterType((*MintingEpochValueMember)(nil), "cosmos.v1beta1.MintingEpochValueMember")
	proto.RegisterType((*ValueUndelegateSuccessStore)(nil), "cosmos.v1beta1.ValueUndelegateSuccessStore")
	proto.RegisterType((*SingleSignatureDataForOutgoingPool)(nil), "cosmos.v1beta1.SingleSignatureDataForOutgoingPool")
	proto.RegisterType((*OutgoingSignaturePoolValue)(nil), "cosmos.v1beta1.OutgoingSignaturePoolValue")
	proto.RegisterType((*OutgoingQueueValue)(nil), "cosmos.v1beta1.OutgoingQueueValue")
	proto.RegisterType((*SlashingStoreValue)(nil), "cosmos.v1beta1.SlashingStoreValue")
	proto.RegisterType((*MintTokenStoreValue)(nil), "cosmos.v1beta1.MintTokenStoreValue")
	proto.RegisterType((*EpochWithdrawSuccessStoreValue)(nil), "cosmos.v1beta1.EpochWithdrawSuccessStoreValue")
}

func init() { proto.RegisterFile("cosmos/v1beta1/batch.proto", fileDescriptor_cbd4e547303b7d7c) }

var fileDescriptor_cbd4e547303b7d7c = []byte{
	// 1350 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0x5f, 0x6f, 0x1b, 0x45,
	0x10, 0x8f, 0xff, 0xd4, 0xb1, 0xc7, 0x49, 0x48, 0x37, 0x6d, 0xea, 0xa6, 0xc5, 0x09, 0xd7, 0x96,
	0x44, 0x42, 0xb5, 0x69, 0x10, 0x3c, 0x22, 0x92, 0x38, 0xa1, 0x15, 0xa4, 0x4d, 0xcf, 0x6e, 0x11,
	0x08, 0x71, 0x5a, 0xdf, 0x6d, 0xcf, 0x27, 0xdb, 0xbb, 0xd6, 0xed, 0x5e, 0x7a, 0x79, 0xe3, 0x81,
	0x0f, 0xc0, 0x03, 0x5f, 0x83, 0x0f, 0xc0, 0x07, 0x40, 0xaa, 0xc4, 0x4b, 0x1f, 0x11, 0x0f, 0x15,
	0x6a, 0xfa, 0x41, 0xd0, 0xed, 0x9f, 0xf3, 0xc5, 0x8d, 0xa1, 0x29, 0x91, 0xe0, 0xc9, 0xb7, 0x33,
	0x3b, 0xb3, 0x33, 0xbf, 0xfd, 0xcd, 0xcc, 0x1a, 0x56, 0x5c, 0xc6, 0x87, 0x8c, 0x37, 0x0f, 0xef,
	0x74, 0x89, 0xc0, 0x77, 0x9a, 0x5d, 0x2c, 0xdc, 0x5e, 0x63, 0x14, 0x32, 0xc1, 0xd0, 0x82, 0xd2,
	0x35, 0xb4, 0x6e, 0xe5, 0x92, 0xcf, 0x7c, 0x26, 0x55, 0xcd, 0xe4, 0x4b, 0xed, 0x5a, 0xb9, 0xee,
	0x33, 0xe6, 0x0f, 0x48, 0x13, 0x8f, 0x82, 0x26, 0xa6, 0x94, 0x09, 0x2c, 0x02, 0x46, 0xb9, 0xd6,
	0x5e, 0xd5, 0x5a, 0xb9, 0xea, 0x46, 0x4f, 0x9a, 0x98, 0x1e, 0x69, 0xd5, 0xea, 0xa4, 0x4a, 0x04,
	0x43, 0xc2, 0x05, 0x1e, 0x8e, 0x8c, 0xed, 0x44, 0x6c, 0x43, 0xee, 0x1b, 0xb7, 0x75, 0xad, 0xea,
	0x62, 0x4e, 0x52, 0xbd, 0xcb, 0x02, 0xaa, 0xf5, 0x26, 0x2d, 0x11, 0xa7, 0x5a, 0x11, 0x9f, 0x74,
	0xeb, 0xa8, 0x4c, 0x74, 0x8e, 0x3a, 0x24, 0x6d, 0xc6, 0x05, 0xee, 0x07, 0xd4, 0x7f, 0xdd, 0x76,
	0x7d, 0xec, 0x97, 0x07, 0x3e, 0xcd, 0xee, 0xd1, 0x6b, 0xb5, 0xd1, 0xe2, 0x70, 0x75, 0xa7, 0x87,
	0x03, 0x7a, 0xaf, 0x75, 0x97, 0x04, 0x7e, 0x4f, 0x6c, 0x51, 0xaf, 0x13, 0xdf, 0xc5, 0xbc, 0xf7,
	0x05, 0x39, 0x42, 0x2b, 0x50, 0x71, 0x13, 0xa5, 0x13, 0x38, 0x5e, 0x2d, 0xb7, 0x96, 0xdb, 0xa8,
	0xd8, 0xb3, 0xae, 0xda, 0x8d, 0xde, 0x83, 0xb9, 0xee, 0x80, 0xb9, 0x7d, 0xa7, 0x27, 0xed, 0x6a,
	0xf9, 0xb5, 0xdc, 0x46, 0xc1, 0xae, 0x4a, 0x99, 0x72, 0x85, 0xae, 0xc0, 0xac, 0x88, 0x9d, 0x1e,
	0xe6, 0xbd, 0x5a, 0x41, 0x1a, 0x97, 0x84, 0x74, 0x6d, 0x51, 0xa8, 0x1e, 0x84, 0x6c, 0xc4, 0x38,
	0x1e, 0x9c, 0xc3, 0x31, 0x6b, 0x30, 0x37, 0xd2, 0xde, 0xa4, 0x87, 0xe4, 0xac, 0xa2, 0x0d, 0x46,
	0x76, 0xaf, 0x65, 0xfd, 0x96, 0x87, 0x79, 0x73, 0xe0, 0x63, 0x3c, 0x88, 0x08, 0x3a, 0x80, 0xc5,
	0xd4, 0xc6, 0x23, 0x02, 0x07, 0x03, 0x2e, 0x4f, 0xae, 0x6e, 0xae, 0x36, 0x4e, 0xb2, 0xa9, 0xb1,
	0xcf, 0xfd, 0x7d, 0xdc, 0x27, 0xc6, 0x7e, 0xbb, 0xf8, 0xec, 0xc5, 0xea, 0x8c, 0xfd, 0x8e, 0x31,
	0x6f, 0x29, 0x6b, 0xb4, 0x0e, 0xa9, 0xc8, 0x19, 0x31, 0x2e, 0x88, 0x27, 0x63, 0x2d, 0xdb, 0x0b,
	0x46, 0x7c, 0x20, 0xa5, 0xa8, 0x09, 0x4b, 0x87, 0x78, 0x10, 0x78, 0x58, 0xb0, 0xd0, 0xc1, 0x9e,
	0x17, 0x12, 0xce, 0x09, 0xaf, 0x15, 0xd6, 0x0a, 0x1b, 0x15, 0x1b, 0xa5, 0xaa, 0x2d, 0xa3, 0x41,
	0x2d, 0xb8, 0x10, 0x26, 0x5c, 0xad, 0x15, 0x13, 0x68, 0xb6, 0x1b, 0xc9, 0xf9, 0x7f, 0xbc, 0x58,
	0x7d, 0xdf, 0x0f, 0x44, 0x2f, 0xea, 0x36, 0x5c, 0x36, 0xd4, 0xe4, 0xd0, 0x3f, 0xb7, 0xb9, 0xd7,
	0x6f, 0x8a, 0xa3, 0x11, 0xe1, 0x8d, 0x16, 0x71, 0x6d, 0x65, 0x8c, 0x6a, 0x30, 0xeb, 0xb2, 0x88,
	0x0a, 0x12, 0xd6, 0x2e, 0x48, 0x0c, 0xcd, 0x12, 0x35, 0x60, 0x09, 0xbb, 0x22, 0x38, 0x24, 0xce,
	0x09, 0xa4, 0x4b, 0x72, 0xd7, 0x45, 0xa5, 0xda, 0x1e, 0xe3, 0x6d, 0x1d, 0xe7, 0xa0, 0xbc, 0x23,
	0x4f, 0xea, 0xc4, 0xe8, 0x03, 0xc8, 0x8b, 0x58, 0x43, 0x77, 0xd9, 0x40, 0x27, 0xe2, 0x14, 0xbd,
	0x4e, 0xac, 0x01, 0xcb, 0x8b, 0x18, 0xdd, 0x80, 0x79, 0x72, 0x48, 0xa8, 0x70, 0xc8, 0x30, 0x10,
	0x63, 0x84, 0xe6, 0xa4, 0x70, 0x57, 0xc9, 0xd0, 0x32, 0x94, 0xb8, 0xc0, 0x22, 0xe2, 0x86, 0x34,
	0x6a, 0x95, 0xc8, 0x15, 0x7d, 0x14, 0x0e, 0x86, 0x4c, 0xd3, 0xc2, 0xbf, 0x30, 0x25, 0x7c, 0x74,
	0x0b, 0x16, 0x92, 0x12, 0x20, 0x29, 0xf8, 0x32, 0xd3, 0x8a, 0x3d, 0xaf, 0xa4, 0x1a, 0x77, 0xeb,
	0xd7, 0x3c, 0x54, 0x55, 0x25, 0x28, 0xc6, 0x7c, 0x0a, 0x15, 0x11, 0x3b, 0x3a, 0x32, 0x95, 0xef,
	0xb5, 0x53, 0xa8, 0xd2, 0x89, 0xdb, 0x72, 0x8b, 0xce, 0xba, 0x2c, 0xf4, 0x7a, 0xda, 0xb5, 0xe7,
	0xa7, 0x5e, 0x7b, 0x16, 0x87, 0x42, 0x06, 0x87, 0xf3, 0xa1, 0xc3, 0xbb, 0x00, 0x22, 0x76, 0xdc,
	0x01, 0xc1, 0x21, 0xf1, 0x24, 0x58, 0x65, 0xbb, 0x22, 0xe2, 0x1d, 0x25, 0xc8, 0xb2, 0xa5, 0xf4,
	0x46, 0x6c, 0x99, 0x9d, 0xc6, 0x96, 0x9f, 0x72, 0x80, 0xbe, 0x0a, 0x44, 0xcf, 0x0b, 0xf1, 0xd3,
	0xb6, 0x60, 0x21, 0x51, 0x70, 0x76, 0x60, 0xf1, 0xa9, 0x96, 0x66, 0x0a, 0xb0, 0xb0, 0x51, 0xdd,
	0xbc, 0x71, 0x0a, 0xaa, 0x63, 0x07, 0xfd, 0x2d, 0xce, 0x89, 0x30, 0x45, 0x68, 0x5c, 0x98, 0x22,
	0xdc, 0x80, 0xc5, 0x88, 0x76, 0x19, 0xf5, 0x24, 0xc3, 0x9c, 0x27, 0x03, 0xec, 0x4b, 0x84, 0xcb,
	0xf6, 0x82, 0x92, 0x27, 0x24, 0xdb, 0x1b, 0x60, 0xdf, 0x7a, 0x95, 0x83, 0x9a, 0x8c, 0xe4, 0x41,
	0x24, 0x7c, 0x16, 0x50, 0xff, 0x91, 0xd4, 0xcb, 0x08, 0x93, 0xa6, 0x43, 0x46, 0xcc, 0xed, 0x39,
	0x34, 0x1a, 0x76, 0x49, 0x28, 0xaf, 0xbb, 0x60, 0x57, 0xa5, 0xec, 0xbe, 0x14, 0xa1, 0x6f, 0x61,
	0x29, 0xa2, 0x1e, 0x19, 0x10, 0x1f, 0x0b, 0xe2, 0x0c, 0x09, 0xe7, 0xd8, 0xd7, 0xd7, 0x59, 0xdd,
	0xbc, 0x65, 0x52, 0xd0, 0xfd, 0x39, 0x9b, 0xca, 0xa3, 0xd4, 0x4a, 0x27, 0x81, 0xc6, 0x7e, 0xf6,
	0xb5, 0x1b, 0xf4, 0x39, 0xcc, 0xba, 0xce, 0x61, 0x12, 0x9e, 0x2a, 0x82, 0x33, 0xdf, 0x72, 0xc9,
	0x95, 0xc9, 0x59, 0x5f, 0xc2, 0xd2, 0x63, 0x43, 0xad, 0x0c, 0xfa, 0x1f, 0xc3, 0x32, 0x0b, 0xdd,
	0x1e, 0xe1, 0x22, 0x9c, 0xe0, 0x63, 0x4e, 0x72, 0xed, 0x72, 0x56, 0x9b, 0x52, 0xd2, 0xda, 0x85,
	0x2b, 0xfb, 0x01, 0x15, 0x01, 0xf5, 0x77, 0x13, 0x28, 0xa4, 0xaf, 0x7d, 0x22, 0xf1, 0x40, 0x50,
	0x14, 0xf1, 0xbd, 0x96, 0x84, 0xaa, 0x68, 0xcb, 0xef, 0x0c, 0x83, 0x55, 0x9d, 0xeb, 0x95, 0xf5,
	0x4b, 0x1e, 0xae, 0x49, 0xdb, 0x31, 0x16, 0xed, 0xc8, 0x75, 0x09, 0xe7, 0x0a, 0xfe, 0xaf, 0x21,
	0x83, 0x89, 0xc3, 0x95, 0x4a, 0xd7, 0xdc, 0xcd, 0x53, 0xd8, 0xf1, 0x9a, 0x1b, 0x8d, 0xec, 0xc5,
	0x68, 0x52, 0x71, 0xf6, 0x2a, 0x4c, 0xab, 0xad, 0x70, 0x4e, 0xcd, 0xb7, 0xf8, 0x46, 0xe5, 0x34,
	0xad, 0x7b, 0x59, 0x3f, 0xe4, 0xc0, 0x6a, 0x07, 0xd4, 0x1f, 0x90, 0x76, 0xe0, 0x53, 0x2c, 0xa2,
	0x90, 0xb4, 0xb0, 0xc0, 0x7b, 0x2c, 0x34, 0x44, 0x3e, 0x60, 0x6c, 0x80, 0x3e, 0x83, 0x4a, 0xd2,
	0xce, 0x9c, 0x21, 0xf3, 0x88, 0x44, 0x6e, 0x61, 0x5c, 0x57, 0x22, 0x6e, 0x98, 0x37, 0x80, 0x01,
	0x31, 0xf1, 0xb5, 0xcf, 0x3c, 0x62, 0x97, 0xb9, 0xfe, 0x42, 0xd7, 0x95, 0x07, 0x79, 0x82, 0xbc,
	0xbf, 0x39, 0x7b, 0x2c, 0xb0, 0x7e, 0x2e, 0xc0, 0x8a, 0x39, 0x30, 0x0d, 0x24, 0x39, 0x59, 0xf1,
	0x8b, 0xc0, 0x45, 0x2e, 0x83, 0x74, 0x52, 0x13, 0x53, 0xde, 0x9b, 0x93, 0x17, 0xf8, 0xcf, 0xd9,
	0xe8, 0xeb, 0x5c, 0xe4, 0x27, 0x77, 0x66, 0x2e, 0x27, 0xff, 0x6f, 0x2e, 0xe7, 0xcc, 0x03, 0x79,
	0x7a, 0xf5, 0x14, 0xff, 0xa6, 0x7a, 0x26, 0x27, 0x70, 0xf1, 0xad, 0x27, 0x30, 0xfa, 0x10, 0x2e,
	0xc9, 0x61, 0xe5, 0x39, 0x27, 0xc7, 0xe9, 0xac, 0x2c, 0x33, 0xa4, 0x74, 0xbb, 0x99, 0xa1, 0x6a,
	0x3d, 0x04, 0x64, 0x10, 0x7d, 0x18, 0x91, 0x48, 0xb7, 0x81, 0x65, 0x28, 0x29, 0xe7, 0x92, 0x22,
	0x65, 0x5b, 0xaf, 0x92, 0x39, 0x1d, 0x12, 0x11, 0x1e, 0x39, 0x26, 0xde, 0xbc, 0x8c, 0x77, 0x4e,
	0x0a, 0x77, 0x94, 0xcc, 0x7a, 0x91, 0x07, 0xd4, 0x1e, 0x60, 0xde, 0x4b, 0x28, 0x30, 0x6e, 0x2d,
	0xdf, 0xc1, 0x22, 0xd7, 0xd2, 0x89, 0x97, 0xd5, 0xed, 0x53, 0x4a, 0xd7, 0x38, 0x90, 0xc1, 0x3e,
	0xa0, 0xea, 0x59, 0x21, 0x1f, 0xa4, 0xa6, 0xc5, 0x1b, 0x67, 0xa6, 0xc5, 0xff, 0x47, 0x77, 0x3e,
	0xbd, 0x82, 0xd7, 0x61, 0x11, 0x7b, 0x1e, 0xf1, 0x1c, 0xc1, 0x1c, 0xd3, 0xb4, 0xd5, 0x3c, 0x9d,
	0x97, 0xf2, 0x0e, 0xdb, 0x51, 0xc8, 0x9c, 0xf5, 0x9d, 0xf5, 0x2a, 0x0f, 0x4b, 0x49, 0xbb, 0xed,
	0xb0, 0x3e, 0xa1, 0x19, 0x84, 0xef, 0x43, 0x75, 0x18, 0x50, 0xe1, 0x88, 0x44, 0x6e, 0xc0, 0x5d,
	0x3f, 0xed, 0xd9, 0x6a, 0x8c, 0xf9, 0x1e, 0x0b, 0xb7, 0x5c, 0x19, 0xb0, 0x86, 0x15, 0x86, 0xa9,
	0xee, 0xff, 0x87, 0xe8, 0x32, 0x94, 0x92, 0xf0, 0xd2, 0x77, 0x89, 0x5e, 0xa1, 0x9b, 0xb0, 0x90,
	0x22, 0x2d, 0x67, 0xb1, 0xc4, 0xae, 0x6c, 0xcf, 0x69, 0x9c, 0xe5, 0x50, 0x3a, 0xf3, 0x03, 0xe5,
	0xfb, 0x1c, 0xd4, 0xa5, 0x65, 0xfa, 0xc8, 0xc8, 0xcc, 0xa2, 0xb4, 0x4e, 0x32, 0x0f, 0xbf, 0x74,
	0x90, 0xa1, 0x3d, 0xd0, 0x73, 0xf6, 0x2d, 0xa1, 0xd3, 0xd6, 0xdb, 0x07, 0xcf, 0x5e, 0xd6, 0x73,
	0xcf, 0x5f, 0xd6, 0x73, 0x7f, 0xbe, 0xac, 0xe7, 0x7e, 0x3c, 0xae, 0xcf, 0x3c, 0x3f, 0xae, 0xcf,
	0xfc, 0x7e, 0x5c, 0x9f, 0xf9, 0xe6, 0x93, 0x8c, 0xa7, 0x11, 0x09, 0x79, 0xc0, 0x05, 0xa1, 0x2e,
	0x79, 0x40, 0x49, 0x73, 0xd4, 0x16, 0xb8, 0x4f, 0x6e, 0x53, 0x9c, 0x24, 0xd4, 0x8c, 0xcd, 0x41,
	0xd2, 0x7b, 0xb7, 0x24, 0xff, 0xdd, 0x7d, 0xf4, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x94, 0xd0,
	0x7f, 0x7d, 0x37, 0x0f, 0x00, 0x00,
}

func (m *ChainIDHeightAndTxHashKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainIDHeightAndTxHashKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainIDHeightAndTxHashKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BlockHeight != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposalKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProposalID != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.ProposalID))
		i--
		dAtA[i] = 0x18
	}
	if m.BlockHeight != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProposalValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProposalValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProposalValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActiveBlockHeight != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.ActiveBlockHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.Counter != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.Counter))
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.Ratio.Size()
		i -= size
		if _, err := m.Ratio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBatch(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.ValidatorAddresses) > 0 {
		for iNdEx := len(m.ValidatorAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ValidatorAddresses[iNdEx])
			copy(dAtA[i:], m.ValidatorAddresses[iNdEx])
			i = encodeVarintBatch(dAtA, i, uint64(len(m.ValidatorAddresses[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ProposalPosted {
		i--
		if m.ProposalPosted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.ProposalDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBatch(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *CosmosTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CosmosTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CosmosTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SignerAddress) > 0 {
		i -= len(m.SignerAddress)
		copy(dAtA[i:], m.SignerAddress)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.SignerAddress)))
		i--
		dAtA[i] = 0x32
	}
	if m.ActiveBlockHeight != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.ActiveBlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EventEmitted {
		i--
		if m.EventEmitted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Tx.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBatch(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TxHashValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxHashValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxHashValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActiveBlockHeight != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.ActiveBlockHeight))
		i--
		dAtA[i] = 0x38
	}
	if m.Counter != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.Counter))
		i--
		dAtA[i] = 0x30
	}
	if m.TxCleared {
		i--
		if m.TxCleared {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.Ratio.Size()
		i -= size
		if _, err := m.Ratio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBatch(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Status) > 0 {
		for iNdEx := len(m.Status) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Status[iNdEx])
			copy(dAtA[i:], m.Status[iNdEx])
			i = encodeVarintBatch(dAtA, i, uint64(len(m.Status[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ValidatorAddresses) > 0 {
		for iNdEx := len(m.ValidatorAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ValidatorAddresses[iNdEx])
			copy(dAtA[i:], m.ValidatorAddresses[iNdEx])
			i = encodeVarintBatch(dAtA, i, uint64(len(m.ValidatorAddresses[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.TxStatus.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBatch(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *WithdrawStoreValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WithdrawStoreValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WithdrawStoreValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UnbondEmitFlag) > 0 {
		for iNdEx := len(m.UnbondEmitFlag) - 1; iNdEx >= 0; iNdEx-- {
			i--
			if m.UnbondEmitFlag[iNdEx] {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
		}
		i = encodeVarintBatch(dAtA, i, uint64(len(m.UnbondEmitFlag)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.WithdrawDetails) > 0 {
		for iNdEx := len(m.WithdrawDetails) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.WithdrawDetails[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBatch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ValueOutgoingUnbondStore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValueOutgoingUnbondStore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValueOutgoingUnbondStore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.CValue.Size()
		i -= size
		if _, err := m.CValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBatch(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.UndelegateMessages) > 0 {
		for iNdEx := len(m.UndelegateMessages) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UndelegateMessages[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBatch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.EpochNumber != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorStoreValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorStoreValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorStoreValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrchestratorAddresses) > 0 {
		for iNdEx := len(m.OrchestratorAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OrchestratorAddresses[iNdEx])
			copy(dAtA[i:], m.OrchestratorAddresses[iNdEx])
			i = encodeVarintBatch(dAtA, i, uint64(len(m.OrchestratorAddresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MintingEpochValueMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MintingEpochValueMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MintingEpochValueMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.TxID != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.TxID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ValueUndelegateSuccessStore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValueUndelegateSuccessStore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValueUndelegateSuccessStore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActiveBlockHeight != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.ActiveBlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.Counter != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.Counter))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.Ratio.Size()
		i -= size
		if _, err := m.Ratio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBatch(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ValidatorAddresses) > 0 {
		for iNdEx := len(m.ValidatorAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ValidatorAddresses[iNdEx])
			copy(dAtA[i:], m.ValidatorAddresses[iNdEx])
			i = encodeVarintBatch(dAtA, i, uint64(len(m.ValidatorAddresses[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.UndelegateSuccess.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBatch(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SingleSignatureDataForOutgoingPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SingleSignatureDataForOutgoingPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SingleSignatureDataForOutgoingPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintBatch(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x12
	}
	if m.SignMode != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.SignMode))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OutgoingSignaturePoolValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutgoingSignaturePoolValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutgoingSignaturePoolValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SignedEventEmitted {
		i--
		if m.SignedEventEmitted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.ActiveBlockHeight != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.ActiveBlockHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.Counter != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.Counter))
		i--
		dAtA[i] = 0x28
	}
	if len(m.OrchestratorAddresses) > 0 {
		for iNdEx := len(m.OrchestratorAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OrchestratorAddresses[iNdEx])
			copy(dAtA[i:], m.OrchestratorAddresses[iNdEx])
			i = encodeVarintBatch(dAtA, i, uint64(len(m.OrchestratorAddresses[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ValidatorAddresses) > 0 {
		for iNdEx := len(m.ValidatorAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ValidatorAddresses[iNdEx])
			copy(dAtA[i:], m.ValidatorAddresses[iNdEx])
			i = encodeVarintBatch(dAtA, i, uint64(len(m.ValidatorAddresses[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size := m.Ratio.Size()
		i -= size
		if _, err := m.Ratio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBatch(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.SingleSignatures) > 0 {
		for iNdEx := len(m.SingleSignatures) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SingleSignatures[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBatch(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OutgoingQueueValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutgoingQueueValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutgoingQueueValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RetryCounter != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.RetryCounter))
		i--
		dAtA[i] = 0x10
	}
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SlashingStoreValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SlashingStoreValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SlashingStoreValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActiveBlockHeight != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.ActiveBlockHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.AddedToCValue {
		i--
		if m.AddedToCValue {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Counter != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.Counter))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ValidatorAddresses) > 0 {
		for iNdEx := len(m.ValidatorAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ValidatorAddresses[iNdEx])
			copy(dAtA[i:], m.ValidatorAddresses[iNdEx])
			i = encodeVarintBatch(dAtA, i, uint64(len(m.ValidatorAddresses[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size := m.Ratio.Size()
		i -= size
		if _, err := m.Ratio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBatch(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.SlashingDetails.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBatch(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *MintTokenStoreValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MintTokenStoreValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MintTokenStoreValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ActiveBlockHeight != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.ActiveBlockHeight))
		i--
		dAtA[i] = 0x38
	}
	if m.AddedToEpoch {
		i--
		if m.AddedToEpoch {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Minted {
		i--
		if m.Minted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Counter != 0 {
		i = encodeVarintBatch(dAtA, i, uint64(m.Counter))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ValidatorAddresses) > 0 {
		for iNdEx := len(m.ValidatorAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ValidatorAddresses[iNdEx])
			copy(dAtA[i:], m.ValidatorAddresses[iNdEx])
			i = encodeVarintBatch(dAtA, i, uint64(len(m.ValidatorAddresses[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size := m.Ratio.Size()
		i -= size
		if _, err := m.Ratio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBatch(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.MintTokens.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBatch(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EpochWithdrawSuccessStoreValue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EpochWithdrawSuccessStoreValue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EpochWithdrawSuccessStoreValue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.CValue.Size()
		i -= size
		if _, err := m.CValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBatch(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Status {
		i--
		if m.Status {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBatch(dAtA []byte, offset int, v uint64) int {
	offset -= sovBatch(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChainIDHeightAndTxHashKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovBatch(uint64(m.BlockHeight))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	return n
}

func (m *ProposalKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovBatch(uint64(m.BlockHeight))
	}
	if m.ProposalID != 0 {
		n += 1 + sovBatch(uint64(m.ProposalID))
	}
	return n
}

func (m *ProposalValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ProposalDetails.Size()
	n += 1 + l + sovBatch(uint64(l))
	if m.ProposalPosted {
		n += 2
	}
	if len(m.ValidatorAddresses) > 0 {
		for _, s := range m.ValidatorAddresses {
			l = len(s)
			n += 1 + l + sovBatch(uint64(l))
		}
	}
	l = m.Ratio.Size()
	n += 1 + l + sovBatch(uint64(l))
	if m.Counter != 0 {
		n += 1 + sovBatch(uint64(m.Counter))
	}
	if m.ActiveBlockHeight != 0 {
		n += 1 + sovBatch(uint64(m.ActiveBlockHeight))
	}
	return n
}

func (m *CosmosTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Tx.Size()
	n += 1 + l + sovBatch(uint64(l))
	if m.EventEmitted {
		n += 2
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	if m.ActiveBlockHeight != 0 {
		n += 1 + sovBatch(uint64(m.ActiveBlockHeight))
	}
	l = len(m.SignerAddress)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	return n
}

func (m *TxHashValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TxStatus.Size()
	n += 1 + l + sovBatch(uint64(l))
	if len(m.ValidatorAddresses) > 0 {
		for _, s := range m.ValidatorAddresses {
			l = len(s)
			n += 1 + l + sovBatch(uint64(l))
		}
	}
	if len(m.Status) > 0 {
		for _, s := range m.Status {
			l = len(s)
			n += 1 + l + sovBatch(uint64(l))
		}
	}
	l = m.Ratio.Size()
	n += 1 + l + sovBatch(uint64(l))
	if m.TxCleared {
		n += 2
	}
	if m.Counter != 0 {
		n += 1 + sovBatch(uint64(m.Counter))
	}
	if m.ActiveBlockHeight != 0 {
		n += 1 + sovBatch(uint64(m.ActiveBlockHeight))
	}
	return n
}

func (m *WithdrawStoreValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.WithdrawDetails) > 0 {
		for _, e := range m.WithdrawDetails {
			l = e.Size()
			n += 1 + l + sovBatch(uint64(l))
		}
	}
	if len(m.UnbondEmitFlag) > 0 {
		n += 1 + sovBatch(uint64(len(m.UnbondEmitFlag))) + len(m.UnbondEmitFlag)*1
	}
	return n
}

func (m *ValueOutgoingUnbondStore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochNumber != 0 {
		n += 1 + sovBatch(uint64(m.EpochNumber))
	}
	if len(m.UndelegateMessages) > 0 {
		for _, e := range m.UndelegateMessages {
			l = e.Size()
			n += 1 + l + sovBatch(uint64(l))
		}
	}
	l = m.CValue.Size()
	n += 1 + l + sovBatch(uint64(l))
	return n
}

func (m *ValidatorStoreValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OrchestratorAddresses) > 0 {
		for _, s := range m.OrchestratorAddresses {
			l = len(s)
			n += 1 + l + sovBatch(uint64(l))
		}
	}
	return n
}

func (m *MintingEpochValueMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxID != 0 {
		n += 1 + sovBatch(uint64(m.TxID))
	}
	if m.Status {
		n += 2
	}
	return n
}

func (m *ValueUndelegateSuccessStore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.UndelegateSuccess.Size()
	n += 1 + l + sovBatch(uint64(l))
	if len(m.ValidatorAddresses) > 0 {
		for _, s := range m.ValidatorAddresses {
			l = len(s)
			n += 1 + l + sovBatch(uint64(l))
		}
	}
	l = m.Ratio.Size()
	n += 1 + l + sovBatch(uint64(l))
	if m.Counter != 0 {
		n += 1 + sovBatch(uint64(m.Counter))
	}
	if m.ActiveBlockHeight != 0 {
		n += 1 + sovBatch(uint64(m.ActiveBlockHeight))
	}
	return n
}

func (m *SingleSignatureDataForOutgoingPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SignMode != 0 {
		n += 1 + sovBatch(uint64(m.SignMode))
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovBatch(uint64(l))
	}
	return n
}

func (m *OutgoingSignaturePoolValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SingleSignatures) > 0 {
		for _, e := range m.SingleSignatures {
			l = e.Size()
			n += 1 + l + sovBatch(uint64(l))
		}
	}
	l = m.Ratio.Size()
	n += 1 + l + sovBatch(uint64(l))
	if len(m.ValidatorAddresses) > 0 {
		for _, s := range m.ValidatorAddresses {
			l = len(s)
			n += 1 + l + sovBatch(uint64(l))
		}
	}
	if len(m.OrchestratorAddresses) > 0 {
		for _, s := range m.OrchestratorAddresses {
			l = len(s)
			n += 1 + l + sovBatch(uint64(l))
		}
	}
	if m.Counter != 0 {
		n += 1 + sovBatch(uint64(m.Counter))
	}
	if m.ActiveBlockHeight != 0 {
		n += 1 + sovBatch(uint64(m.ActiveBlockHeight))
	}
	if m.SignedEventEmitted {
		n += 2
	}
	return n
}

func (m *OutgoingQueueValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Active {
		n += 2
	}
	if m.RetryCounter != 0 {
		n += 1 + sovBatch(uint64(m.RetryCounter))
	}
	return n
}

func (m *SlashingStoreValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SlashingDetails.Size()
	n += 1 + l + sovBatch(uint64(l))
	l = m.Ratio.Size()
	n += 1 + l + sovBatch(uint64(l))
	if len(m.ValidatorAddresses) > 0 {
		for _, s := range m.ValidatorAddresses {
			l = len(s)
			n += 1 + l + sovBatch(uint64(l))
		}
	}
	if m.Counter != 0 {
		n += 1 + sovBatch(uint64(m.Counter))
	}
	if m.AddedToCValue {
		n += 2
	}
	if m.ActiveBlockHeight != 0 {
		n += 1 + sovBatch(uint64(m.ActiveBlockHeight))
	}
	return n
}

func (m *MintTokenStoreValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.MintTokens.Size()
	n += 1 + l + sovBatch(uint64(l))
	l = m.Ratio.Size()
	n += 1 + l + sovBatch(uint64(l))
	if len(m.ValidatorAddresses) > 0 {
		for _, s := range m.ValidatorAddresses {
			l = len(s)
			n += 1 + l + sovBatch(uint64(l))
		}
	}
	if m.Counter != 0 {
		n += 1 + sovBatch(uint64(m.Counter))
	}
	if m.Minted {
		n += 2
	}
	if m.AddedToEpoch {
		n += 2
	}
	if m.ActiveBlockHeight != 0 {
		n += 1 + sovBatch(uint64(m.ActiveBlockHeight))
	}
	return n
}

func (m *EpochWithdrawSuccessStoreValue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status {
		n += 2
	}
	l = m.CValue.Size()
	n += 1 + l + sovBatch(uint64(l))
	return n
}

func sovBatch(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBatch(x uint64) (n int) {
	return sovBatch(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChainIDHeightAndTxHashKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainIDHeightAndTxHashKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainIDHeightAndTxHashKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalID", wireType)
			}
			m.ProposalID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProposalValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProposalValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProposalValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProposalDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalPosted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ProposalPosted = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddresses = append(m.ValidatorAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Ratio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			m.Counter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Counter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveBlockHeight", wireType)
			}
			m.ActiveBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CosmosTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CosmosTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CosmosTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventEmitted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EventEmitted = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveBlockHeight", wireType)
			}
			m.ActiveBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxHashValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxHashValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxHashValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TxStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddresses = append(m.ValidatorAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = append(m.Status, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Ratio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxCleared", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TxCleared = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			m.Counter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Counter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveBlockHeight", wireType)
			}
			m.ActiveBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WithdrawStoreValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WithdrawStoreValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WithdrawStoreValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawDetails = append(m.WithdrawDetails, MsgWithdrawStkAsset{})
			if err := m.WithdrawDetails[len(m.WithdrawDetails)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UnbondEmitFlag = append(m.UnbondEmitFlag, bool(v != 0))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBatch
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBatch
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBatch
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen
				if elementCount != 0 && len(m.UnbondEmitFlag) == 0 {
					m.UnbondEmitFlag = make([]bool, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBatch
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UnbondEmitFlag = append(m.UnbondEmitFlag, bool(v != 0))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondEmitFlag", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValueOutgoingUnbondStore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValueOutgoingUnbondStore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValueOutgoingUnbondStore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UndelegateMessages", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UndelegateMessages = append(m.UndelegateMessages, types.MsgUndelegate{})
			if err := m.UndelegateMessages[len(m.UndelegateMessages)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorStoreValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorStoreValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorStoreValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchestratorAddresses = append(m.OrchestratorAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MintingEpochValueMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MintingEpochValueMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MintingEpochValueMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxID", wireType)
			}
			m.TxID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValueUndelegateSuccessStore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValueUndelegateSuccessStore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValueUndelegateSuccessStore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UndelegateSuccess", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UndelegateSuccess.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddresses = append(m.ValidatorAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Ratio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			m.Counter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Counter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveBlockHeight", wireType)
			}
			m.ActiveBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SingleSignatureDataForOutgoingPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SingleSignatureDataForOutgoingPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SingleSignatureDataForOutgoingPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignMode", wireType)
			}
			m.SignMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SignMode |= signing.SignMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutgoingSignaturePoolValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutgoingSignaturePoolValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutgoingSignaturePoolValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SingleSignatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SingleSignatures = append(m.SingleSignatures, SingleSignatureDataForOutgoingPool{})
			if err := m.SingleSignatures[len(m.SingleSignatures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Ratio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddresses = append(m.ValidatorAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchestratorAddresses = append(m.OrchestratorAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			m.Counter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Counter |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveBlockHeight", wireType)
			}
			m.ActiveBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignedEventEmitted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SignedEventEmitted = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutgoingQueueValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutgoingQueueValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutgoingQueueValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RetryCounter", wireType)
			}
			m.RetryCounter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RetryCounter |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SlashingStoreValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SlashingStoreValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SlashingStoreValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashingDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashingDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Ratio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddresses = append(m.ValidatorAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			m.Counter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Counter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddedToCValue", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddedToCValue = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveBlockHeight", wireType)
			}
			m.ActiveBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MintTokenStoreValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MintTokenStoreValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MintTokenStoreValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintTokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MintTokens.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ratio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Ratio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddresses = append(m.ValidatorAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Counter", wireType)
			}
			m.Counter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Counter |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Minted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Minted = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddedToEpoch", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddedToEpoch = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActiveBlockHeight", wireType)
			}
			m.ActiveBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActiveBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EpochWithdrawSuccessStoreValue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EpochWithdrawSuccessStoreValue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EpochWithdrawSuccessStoreValue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Status = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBatch
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBatch
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBatch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBatch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBatch(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBatch
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBatch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBatch
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBatch
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBatch
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBatch        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBatch          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBatch = fmt.Errorf("proto: unexpected end of group")
)

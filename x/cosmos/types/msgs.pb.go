// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/v1beta1/msgs.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	tx "github.com/cosmos/cosmos-sdk/types/tx"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgSetOrchestrator struct {
	Validator    string `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator,omitempty"`
	Orchestrator string `protobuf:"bytes,2,opt,name=orchestrator,proto3" json:"orchestrator,omitempty"`
}

func (m *MsgSetOrchestrator) Reset()         { *m = MsgSetOrchestrator{} }
func (m *MsgSetOrchestrator) String() string { return proto.CompactTextString(m) }
func (*MsgSetOrchestrator) ProtoMessage()    {}
func (*MsgSetOrchestrator) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcec9e484c0426d0, []int{0}
}
func (m *MsgSetOrchestrator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetOrchestrator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetOrchestrator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetOrchestrator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetOrchestrator.Merge(m, src)
}
func (m *MsgSetOrchestrator) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetOrchestrator) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetOrchestrator.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetOrchestrator proto.InternalMessageInfo

func (m *MsgSetOrchestrator) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

func (m *MsgSetOrchestrator) GetOrchestrator() string {
	if m != nil {
		return m.Orchestrator
	}
	return ""
}

type MsgSetOrchestratorResponse struct {
}

func (m *MsgSetOrchestratorResponse) Reset()         { *m = MsgSetOrchestratorResponse{} }
func (m *MsgSetOrchestratorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetOrchestratorResponse) ProtoMessage()    {}
func (*MsgSetOrchestratorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcec9e484c0426d0, []int{1}
}
func (m *MsgSetOrchestratorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetOrchestratorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetOrchestratorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetOrchestratorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetOrchestratorResponse.Merge(m, src)
}
func (m *MsgSetOrchestratorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetOrchestratorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetOrchestratorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetOrchestratorResponse proto.InternalMessageInfo

type MsgWithdrawStkAsset struct {
	FromAddress string     `protobuf:"bytes,1,opt,name=from_address,json=fromAddress,proto3" json:"from_address,omitempty" yaml:"from_address"`
	ToAddress   string     `protobuf:"bytes,2,opt,name=to_address,json=toAddress,proto3" json:"to_address,omitempty" yaml:"to_address"`
	Amount      types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
}

func (m *MsgWithdrawStkAsset) Reset()         { *m = MsgWithdrawStkAsset{} }
func (m *MsgWithdrawStkAsset) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawStkAsset) ProtoMessage()    {}
func (*MsgWithdrawStkAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcec9e484c0426d0, []int{2}
}
func (m *MsgWithdrawStkAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawStkAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawStkAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawStkAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawStkAsset.Merge(m, src)
}
func (m *MsgWithdrawStkAsset) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawStkAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawStkAsset.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawStkAsset proto.InternalMessageInfo

type MsgWithdrawStkAssetResponse struct {
}

func (m *MsgWithdrawStkAssetResponse) Reset()         { *m = MsgWithdrawStkAssetResponse{} }
func (m *MsgWithdrawStkAssetResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawStkAssetResponse) ProtoMessage()    {}
func (*MsgWithdrawStkAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcec9e484c0426d0, []int{3}
}
func (m *MsgWithdrawStkAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawStkAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawStkAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawStkAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawStkAssetResponse.Merge(m, src)
}
func (m *MsgWithdrawStkAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawStkAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawStkAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawStkAssetResponse proto.InternalMessageInfo

type MsgVote struct {
	ProposalId uint64     `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id" yaml:"proposal_id"`
	Voter      string     `protobuf:"bytes,2,opt,name=voter,proto3" json:"voter,omitempty"`
	Option     VoteOption `protobuf:"varint,3,opt,name=option,proto3,enum=comsos.v1beta1.VoteOption" json:"option,omitempty"`
}

func (m *MsgVote) Reset()      { *m = MsgVote{} }
func (*MsgVote) ProtoMessage() {}
func (*MsgVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcec9e484c0426d0, []int{4}
}
func (m *MsgVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVote.Merge(m, src)
}
func (m *MsgVote) XXX_Size() int {
	return m.Size()
}
func (m *MsgVote) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVote.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVote proto.InternalMessageInfo

type MsgVoteResponse struct {
}

func (m *MsgVoteResponse) Reset()         { *m = MsgVoteResponse{} }
func (m *MsgVoteResponse) String() string { return proto.CompactTextString(m) }
func (*MsgVoteResponse) ProtoMessage()    {}
func (*MsgVoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcec9e484c0426d0, []int{5}
}
func (m *MsgVoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteResponse.Merge(m, src)
}
func (m *MsgVoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteResponse proto.InternalMessageInfo

type MsgVoteWeighted struct {
	ProposalId uint64               `protobuf:"varint,1,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty" yaml:"proposal_id"`
	Voter      string               `protobuf:"bytes,2,opt,name=voter,proto3" json:"voter,omitempty"`
	Options    []WeightedVoteOption `protobuf:"bytes,3,rep,name=options,proto3" json:"options"`
}

func (m *MsgVoteWeighted) Reset()      { *m = MsgVoteWeighted{} }
func (*MsgVoteWeighted) ProtoMessage() {}
func (*MsgVoteWeighted) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcec9e484c0426d0, []int{6}
}
func (m *MsgVoteWeighted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteWeighted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteWeighted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteWeighted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteWeighted.Merge(m, src)
}
func (m *MsgVoteWeighted) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteWeighted) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteWeighted.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteWeighted proto.InternalMessageInfo

type MsgVoteWeightedResponse struct {
}

func (m *MsgVoteWeightedResponse) Reset()         { *m = MsgVoteWeightedResponse{} }
func (m *MsgVoteWeightedResponse) String() string { return proto.CompactTextString(m) }
func (*MsgVoteWeightedResponse) ProtoMessage()    {}
func (*MsgVoteWeightedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcec9e484c0426d0, []int{7}
}
func (m *MsgVoteWeightedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteWeightedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteWeightedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteWeightedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteWeightedResponse.Merge(m, src)
}
func (m *MsgVoteWeightedResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteWeightedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteWeightedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteWeightedResponse proto.InternalMessageInfo

type MsgMintTokensForAccount struct {
	AddressFromMemo     string                                   `protobuf:"bytes,1,opt,name=address_from_memo,json=addressFromMemo,proto3" json:"address_from_memo,omitempty" yaml:"address_from_memo"`
	OrchestratorAddress string                                   `protobuf:"bytes,2,opt,name=orchestrator_address,json=orchestratorAddress,proto3" json:"orchestrator_address,omitempty" yaml:"orchestrator_address"`
	Amount              github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
	TxHash              string                                   `protobuf:"bytes,4,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty" yaml:"tx_hash"`
	ChainID             string                                   `protobuf:"bytes,5,opt,name=chain_i_d,json=chainID,proto3" json:"chain_i_d,omitempty" yaml:"chain_id"`
	BlockHeight         int64                                    `protobuf:"varint,6,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty" yaml:"block_height"`
}

func (m *MsgMintTokensForAccount) Reset()         { *m = MsgMintTokensForAccount{} }
func (m *MsgMintTokensForAccount) String() string { return proto.CompactTextString(m) }
func (*MsgMintTokensForAccount) ProtoMessage()    {}
func (*MsgMintTokensForAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcec9e484c0426d0, []int{8}
}
func (m *MsgMintTokensForAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintTokensForAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintTokensForAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintTokensForAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintTokensForAccount.Merge(m, src)
}
func (m *MsgMintTokensForAccount) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintTokensForAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintTokensForAccount.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintTokensForAccount proto.InternalMessageInfo

func (m *MsgMintTokensForAccount) GetAddressFromMemo() string {
	if m != nil {
		return m.AddressFromMemo
	}
	return ""
}

func (m *MsgMintTokensForAccount) GetOrchestratorAddress() string {
	if m != nil {
		return m.OrchestratorAddress
	}
	return ""
}

func (m *MsgMintTokensForAccount) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *MsgMintTokensForAccount) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *MsgMintTokensForAccount) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *MsgMintTokensForAccount) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type MsgMintTokensForAccountResponse struct {
}

func (m *MsgMintTokensForAccountResponse) Reset()         { *m = MsgMintTokensForAccountResponse{} }
func (m *MsgMintTokensForAccountResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMintTokensForAccountResponse) ProtoMessage()    {}
func (*MsgMintTokensForAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcec9e484c0426d0, []int{9}
}
func (m *MsgMintTokensForAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintTokensForAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintTokensForAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintTokensForAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintTokensForAccountResponse.Merge(m, src)
}
func (m *MsgMintTokensForAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintTokensForAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintTokensForAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintTokensForAccountResponse proto.InternalMessageInfo

type MsgMakeProposal struct {
	Title               string    `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty" yaml:"title"`
	Description         string    `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	OrchestratorAddress string    `protobuf:"bytes,3,opt,name=orchestrator_address,json=orchestratorAddress,proto3" json:"orchestrator_address,omitempty" yaml:"orchestrator_address"`
	ProposalID          uint64    `protobuf:"varint,4,opt,name=proposal_i_d,json=proposalID,proto3" json:"proposal_i_d,omitempty" yaml:"proposal_id"`
	ChainID             string    `protobuf:"bytes,5,opt,name=chain_i_d,json=chainID,proto3" json:"chain_i_d,omitempty" yaml:"chain_id"`
	BlockHeight         int64     `protobuf:"varint,6,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty" yaml:"block_height"`
	VotingStartTime     time.Time `protobuf:"bytes,7,opt,name=voting_start_time,json=votingStartTime,proto3,stdtime" json:"voting_start_time,omitempty" yaml:"voting_start_time"`
	VotingEndTime       time.Time `protobuf:"bytes,8,opt,name=voting_end_time,json=votingEndTime,proto3,stdtime" json:"voting_end_time,omitempty" yaml:"voting_end_time"`
}

func (m *MsgMakeProposal) Reset()         { *m = MsgMakeProposal{} }
func (m *MsgMakeProposal) String() string { return proto.CompactTextString(m) }
func (*MsgMakeProposal) ProtoMessage()    {}
func (*MsgMakeProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcec9e484c0426d0, []int{10}
}
func (m *MsgMakeProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMakeProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMakeProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMakeProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMakeProposal.Merge(m, src)
}
func (m *MsgMakeProposal) XXX_Size() int {
	return m.Size()
}
func (m *MsgMakeProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMakeProposal.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMakeProposal proto.InternalMessageInfo

func (m *MsgMakeProposal) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *MsgMakeProposal) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgMakeProposal) GetOrchestratorAddress() string {
	if m != nil {
		return m.OrchestratorAddress
	}
	return ""
}

func (m *MsgMakeProposal) GetProposalID() uint64 {
	if m != nil {
		return m.ProposalID
	}
	return 0
}

func (m *MsgMakeProposal) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *MsgMakeProposal) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *MsgMakeProposal) GetVotingStartTime() time.Time {
	if m != nil {
		return m.VotingStartTime
	}
	return time.Time{}
}

func (m *MsgMakeProposal) GetVotingEndTime() time.Time {
	if m != nil {
		return m.VotingEndTime
	}
	return time.Time{}
}

type MsgMakeProposalResponse struct {
}

func (m *MsgMakeProposalResponse) Reset()         { *m = MsgMakeProposalResponse{} }
func (m *MsgMakeProposalResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMakeProposalResponse) ProtoMessage()    {}
func (*MsgMakeProposalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcec9e484c0426d0, []int{11}
}
func (m *MsgMakeProposalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMakeProposalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMakeProposalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMakeProposalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMakeProposalResponse.Merge(m, src)
}
func (m *MsgMakeProposalResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMakeProposalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMakeProposalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMakeProposalResponse proto.InternalMessageInfo

type MsgSignedTx struct {
	TxID                uint64 `protobuf:"varint,1,opt,name=tx_i_d,json=txID,proto3" json:"tx_i_d,omitempty"`
	Tx                  tx.Tx  `protobuf:"bytes,2,opt,name=tx,proto3" json:"tx"`
	OrchestratorAddress string `protobuf:"bytes,3,opt,name=orchestrator_address,json=orchestratorAddress,proto3" json:"orchestrator_address,omitempty"`
}

func (m *MsgSignedTx) Reset()         { *m = MsgSignedTx{} }
func (m *MsgSignedTx) String() string { return proto.CompactTextString(m) }
func (*MsgSignedTx) ProtoMessage()    {}
func (*MsgSignedTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcec9e484c0426d0, []int{12}
}
func (m *MsgSignedTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignedTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignedTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignedTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignedTx.Merge(m, src)
}
func (m *MsgSignedTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignedTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignedTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignedTx proto.InternalMessageInfo

func (m *MsgSignedTx) GetTxID() uint64 {
	if m != nil {
		return m.TxID
	}
	return 0
}

func (m *MsgSignedTx) GetTx() tx.Tx {
	if m != nil {
		return m.Tx
	}
	return tx.Tx{}
}

func (m *MsgSignedTx) GetOrchestratorAddress() string {
	if m != nil {
		return m.OrchestratorAddress
	}
	return ""
}

type MsgSignedTxResponse struct {
}

func (m *MsgSignedTxResponse) Reset()         { *m = MsgSignedTxResponse{} }
func (m *MsgSignedTxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSignedTxResponse) ProtoMessage()    {}
func (*MsgSignedTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcec9e484c0426d0, []int{13}
}
func (m *MsgSignedTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSignedTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSignedTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSignedTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSignedTxResponse.Merge(m, src)
}
func (m *MsgSignedTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSignedTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSignedTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSignedTxResponse proto.InternalMessageInfo

type MsgTxStatus struct {
	OrchestratorAddress string `protobuf:"bytes,1,opt,name=orchestrator_address,json=orchestratorAddress,proto3" json:"orchestrator_address,omitempty"`
	TxHash              string `protobuf:"bytes,2,opt,name=txHash,proto3" json:"txHash,omitempty"`
	//TODO : Handle other errors
	Status string `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *MsgTxStatus) Reset()         { *m = MsgTxStatus{} }
func (m *MsgTxStatus) String() string { return proto.CompactTextString(m) }
func (*MsgTxStatus) ProtoMessage()    {}
func (*MsgTxStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcec9e484c0426d0, []int{14}
}
func (m *MsgTxStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTxStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTxStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTxStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTxStatus.Merge(m, src)
}
func (m *MsgTxStatus) XXX_Size() int {
	return m.Size()
}
func (m *MsgTxStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTxStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTxStatus proto.InternalMessageInfo

func (m *MsgTxStatus) GetOrchestratorAddress() string {
	if m != nil {
		return m.OrchestratorAddress
	}
	return ""
}

func (m *MsgTxStatus) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *MsgTxStatus) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type MsgTxStatusResponse struct {
}

func (m *MsgTxStatusResponse) Reset()         { *m = MsgTxStatusResponse{} }
func (m *MsgTxStatusResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTxStatusResponse) ProtoMessage()    {}
func (*MsgTxStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcec9e484c0426d0, []int{15}
}
func (m *MsgTxStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTxStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTxStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTxStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTxStatusResponse.Merge(m, src)
}
func (m *MsgTxStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTxStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTxStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTxStatusResponse proto.InternalMessageInfo

type MsgUndelegateSuccess struct {
	DelegatorAddress    string     `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	ValidatorAddress    string     `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	Amount              types.Coin `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount"`
	OrchestratorAddress string     `protobuf:"bytes,4,opt,name=orchestrator_address,json=orchestratorAddress,proto3" json:"orchestrator_address,omitempty"`
	TxHash              string     `protobuf:"bytes,5,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty" yaml:"tx_hash"`
	ChainID             string     `protobuf:"bytes,6,opt,name=chain_i_d,json=chainID,proto3" json:"chain_i_d,omitempty" yaml:"chain_id"`
	BlockHeight         int64      `protobuf:"varint,7,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty" yaml:"block_height"`
}

func (m *MsgUndelegateSuccess) Reset()         { *m = MsgUndelegateSuccess{} }
func (m *MsgUndelegateSuccess) String() string { return proto.CompactTextString(m) }
func (*MsgUndelegateSuccess) ProtoMessage()    {}
func (*MsgUndelegateSuccess) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcec9e484c0426d0, []int{16}
}
func (m *MsgUndelegateSuccess) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUndelegateSuccess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUndelegateSuccess.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUndelegateSuccess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUndelegateSuccess.Merge(m, src)
}
func (m *MsgUndelegateSuccess) XXX_Size() int {
	return m.Size()
}
func (m *MsgUndelegateSuccess) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUndelegateSuccess.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUndelegateSuccess proto.InternalMessageInfo

func (m *MsgUndelegateSuccess) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

func (m *MsgUndelegateSuccess) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *MsgUndelegateSuccess) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *MsgUndelegateSuccess) GetOrchestratorAddress() string {
	if m != nil {
		return m.OrchestratorAddress
	}
	return ""
}

func (m *MsgUndelegateSuccess) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *MsgUndelegateSuccess) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *MsgUndelegateSuccess) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

type MsgUndelegateSuccessResponse struct {
}

func (m *MsgUndelegateSuccessResponse) Reset()         { *m = MsgUndelegateSuccessResponse{} }
func (m *MsgUndelegateSuccessResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUndelegateSuccessResponse) ProtoMessage()    {}
func (*MsgUndelegateSuccessResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_bcec9e484c0426d0, []int{17}
}
func (m *MsgUndelegateSuccessResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUndelegateSuccessResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUndelegateSuccessResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUndelegateSuccessResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUndelegateSuccessResponse.Merge(m, src)
}
func (m *MsgUndelegateSuccessResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUndelegateSuccessResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUndelegateSuccessResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUndelegateSuccessResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgSetOrchestrator)(nil), "comsos.v1beta1.MsgSetOrchestrator")
	proto.RegisterType((*MsgSetOrchestratorResponse)(nil), "comsos.v1beta1.MsgSetOrchestratorResponse")
	proto.RegisterType((*MsgWithdrawStkAsset)(nil), "comsos.v1beta1.MsgWithdrawStkAsset")
	proto.RegisterType((*MsgWithdrawStkAssetResponse)(nil), "comsos.v1beta1.MsgWithdrawStkAssetResponse")
	proto.RegisterType((*MsgVote)(nil), "comsos.v1beta1.MsgVote")
	proto.RegisterType((*MsgVoteResponse)(nil), "comsos.v1beta1.MsgVoteResponse")
	proto.RegisterType((*MsgVoteWeighted)(nil), "comsos.v1beta1.MsgVoteWeighted")
	proto.RegisterType((*MsgVoteWeightedResponse)(nil), "comsos.v1beta1.MsgVoteWeightedResponse")
	proto.RegisterType((*MsgMintTokensForAccount)(nil), "comsos.v1beta1.MsgMintTokensForAccount")
	proto.RegisterType((*MsgMintTokensForAccountResponse)(nil), "comsos.v1beta1.MsgMintTokensForAccountResponse")
	proto.RegisterType((*MsgMakeProposal)(nil), "comsos.v1beta1.MsgMakeProposal")
	proto.RegisterType((*MsgMakeProposalResponse)(nil), "comsos.v1beta1.MsgMakeProposalResponse")
	proto.RegisterType((*MsgSignedTx)(nil), "comsos.v1beta1.MsgSignedTx")
	proto.RegisterType((*MsgSignedTxResponse)(nil), "comsos.v1beta1.MsgSignedTxResponse")
	proto.RegisterType((*MsgTxStatus)(nil), "comsos.v1beta1.MsgTxStatus")
	proto.RegisterType((*MsgTxStatusResponse)(nil), "comsos.v1beta1.MsgTxStatusResponse")
	proto.RegisterType((*MsgUndelegateSuccess)(nil), "comsos.v1beta1.MsgUndelegateSuccess")
	proto.RegisterType((*MsgUndelegateSuccessResponse)(nil), "comsos.v1beta1.MsgUndelegateSuccessResponse")
}

func init() { proto.RegisterFile("cosmos/v1beta1/msgs.proto", fileDescriptor_bcec9e484c0426d0) }

var fileDescriptor_bcec9e484c0426d0 = []byte{
	// 1389 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x41, 0x6f, 0x13, 0x47,
	0x14, 0xf6, 0xc6, 0x89, 0x93, 0x8c, 0x53, 0x12, 0x4f, 0x42, 0x70, 0x36, 0xc1, 0x9b, 0x0e, 0x05,
	0x2c, 0x0c, 0x5e, 0x08, 0x55, 0x41, 0xb9, 0x54, 0x18, 0x8a, 0xe0, 0xe0, 0x82, 0x36, 0x29, 0x48,
	0x1c, 0x6a, 0x6d, 0xbc, 0xc3, 0x7a, 0x15, 0xef, 0xce, 0x6a, 0x67, 0x92, 0x6e, 0x6e, 0x15, 0xa8,
	0x52, 0xa5, 0x4a, 0x15, 0x55, 0x55, 0xa9, 0x47, 0x2e, 0xbd, 0x54, 0xea, 0xb5, 0xbf, 0x01, 0xf5,
	0x84, 0xd4, 0x4b, 0x0f, 0x95, 0xa9, 0xa0, 0x87, 0x8a, 0xa3, 0x0f, 0x3d, 0x57, 0x3b, 0x3b, 0xbb,
	0x5e, 0xaf, 0xd7, 0x10, 0x40, 0xea, 0xc9, 0x9e, 0xf7, 0xbe, 0x79, 0xf3, 0xbd, 0x7d, 0xdf, 0xbc,
	0x79, 0x60, 0xa5, 0x4d, 0xa8, 0x4d, 0xa8, 0xba, 0x7f, 0x61, 0x07, 0x33, 0xfd, 0x82, 0x6a, 0x53,
	0x93, 0xd6, 0x5d, 0x8f, 0x30, 0x02, 0x8f, 0xb4, 0x89, 0x4d, 0x09, 0xad, 0x0b, 0x97, 0xbc, 0x64,
	0x12, 0x93, 0x70, 0x97, 0x1a, 0xfc, 0x0b, 0x51, 0xf2, 0x9a, 0x49, 0x88, 0xd9, 0xc5, 0xaa, 0xee,
	0x5a, 0xaa, 0xee, 0x38, 0x84, 0xe9, 0xcc, 0x22, 0x8e, 0x88, 0x21, 0xaf, 0x08, 0x2f, 0x5f, 0xed,
	0xec, 0xdd, 0x57, 0x75, 0xe7, 0x40, 0xb8, 0x56, 0x53, 0x27, 0x87, 0x4b, 0xe1, 0x3c, 0x9e, 0x72,
	0xba, 0x1e, 0x71, 0x09, 0xd5, 0xbb, 0xc2, 0xad, 0xa4, 0xc3, 0x32, 0xcb, 0xc6, 0x94, 0xe9, 0xb6,
	0x2b, 0x00, 0xb2, 0xd8, 0xcf, 0xfc, 0x38, 0x04, 0xf3, 0x85, 0xaf, 0x22, 0x7c, 0x3b, 0x3a, 0xc5,
	0x89, 0xd3, 0x2d, 0x27, 0xf4, 0xa3, 0x3b, 0x00, 0x36, 0xa9, 0xb9, 0x85, 0xd9, 0x2d, 0xaf, 0xdd,
	0xc1, 0x94, 0x79, 0x3a, 0x23, 0x1e, 0x5c, 0x03, 0xb3, 0xfb, 0x7a, 0xd7, 0x32, 0x82, 0x45, 0x59,
	0x5a, 0x97, 0xaa, 0xb3, 0xda, 0xc0, 0x00, 0x11, 0x98, 0x23, 0x09, 0x74, 0x79, 0x82, 0x03, 0x86,
	0x6c, 0x68, 0x0d, 0xc8, 0xa3, 0x71, 0x35, 0x4c, 0x5d, 0xe2, 0x50, 0x8c, 0x7e, 0x93, 0xc0, 0x62,
	0x93, 0x9a, 0x77, 0x2d, 0xd6, 0x31, 0x3c, 0xfd, 0x8b, 0x2d, 0xb6, 0x7b, 0x85, 0x52, 0xcc, 0xe0,
	0x26, 0x98, 0xbb, 0xef, 0x11, 0xbb, 0xa5, 0x1b, 0x86, 0x87, 0x29, 0x0d, 0x8f, 0x6e, 0x1c, 0xeb,
	0xf7, 0x94, 0xc5, 0x03, 0xdd, 0xee, 0x6e, 0xa2, 0xa4, 0x17, 0x69, 0xc5, 0x60, 0x79, 0x25, 0x5c,
	0xc1, 0x0f, 0x01, 0x60, 0x24, 0xde, 0xc9, 0x39, 0x35, 0x8e, 0xf6, 0x7b, 0x4a, 0x29, 0xdc, 0x39,
	0xf0, 0x21, 0x6d, 0x96, 0x91, 0x68, 0xd7, 0x25, 0x50, 0xd0, 0x6d, 0xb2, 0xe7, 0xb0, 0x72, 0x7e,
	0x5d, 0xaa, 0x16, 0x37, 0x56, 0xea, 0xa2, 0x34, 0xc1, 0x07, 0x8b, 0xd4, 0x50, 0xbf, 0x4a, 0x2c,
	0xa7, 0x31, 0xf9, 0xa4, 0xa7, 0xe4, 0x34, 0x01, 0xdf, 0x9c, 0xf9, 0xfa, 0xb1, 0x92, 0xfb, 0xe7,
	0xb1, 0x92, 0x43, 0xc7, 0xc1, 0x6a, 0x46, 0x2e, 0x71, 0xae, 0xbf, 0x48, 0x60, 0xba, 0x49, 0xcd,
	0x3b, 0x84, 0x61, 0x78, 0x1d, 0x14, 0xa3, 0xe2, 0xb6, 0x2c, 0x83, 0xa7, 0x37, 0xd9, 0x38, 0xf9,
	0xb2, 0xa7, 0x24, 0xcd, 0xfd, 0x9e, 0x02, 0x43, 0xce, 0x09, 0x23, 0xd2, 0x40, 0xb4, 0xba, 0x69,
	0xc0, 0x25, 0x30, 0xb5, 0x4f, 0x18, 0x8e, 0x3e, 0x7d, 0xb8, 0x80, 0x1b, 0xa0, 0x40, 0xdc, 0x40,
	0x90, 0x3c, 0x97, 0x23, 0x1b, 0x72, 0x7d, 0x58, 0xd4, 0xf5, 0x80, 0xc3, 0x2d, 0x8e, 0xd0, 0x04,
	0x72, 0x73, 0x21, 0x48, 0xe3, 0x47, 0x91, 0xca, 0x97, 0x7f, 0xae, 0xe7, 0x50, 0x09, 0xcc, 0x0b,
	0xba, 0x71, 0x0a, 0xbf, 0x4a, 0xb1, 0xed, 0x2e, 0xb6, 0xcc, 0x0e, 0xc3, 0x06, 0xbc, 0x94, 0x95,
	0xca, 0xf2, 0x5b, 0x73, 0x6f, 0x80, 0xe9, 0x90, 0x11, 0x2d, 0xe7, 0xd7, 0xf3, 0xd5, 0xe2, 0x06,
	0x4a, 0x93, 0x8f, 0x4e, 0x1e, 0x24, 0x21, 0x2a, 0x12, 0x6d, 0xcc, 0xc8, 0x65, 0x05, 0x1c, 0x4b,
	0xf1, 0x1e, 0xe4, 0x94, 0xe7, 0xbe, 0xa6, 0xe5, 0xb0, 0x6d, 0xb2, 0x8b, 0x1d, 0x7a, 0x9d, 0x78,
	0x57, 0xda, 0xed, 0xa0, 0xb6, 0xf0, 0x06, 0x28, 0x09, 0xad, 0xb4, 0xb8, 0xe0, 0x6c, 0x6c, 0x13,
	0xa1, 0xc5, 0xb5, 0x7e, 0x4f, 0x29, 0x87, 0x19, 0x8e, 0x40, 0x90, 0x36, 0x2f, 0x6c, 0xd7, 0x3d,
	0x62, 0x37, 0xb1, 0x4d, 0xa0, 0x06, 0x96, 0x92, 0xd7, 0x22, 0x25, 0x4f, 0xa5, 0xdf, 0x53, 0x56,
	0xc3, 0x60, 0x59, 0x28, 0xa4, 0x2d, 0x26, 0xcd, 0x91, 0x64, 0xdb, 0x09, 0xc9, 0xe6, 0x5f, 0x2d,
	0xd9, 0xf3, 0xc1, 0x07, 0xfa, 0xf9, 0x99, 0x52, 0x35, 0x2d, 0xd6, 0xd9, 0xdb, 0x09, 0x3e, 0xa9,
	0x68, 0x3d, 0xe2, 0xe7, 0x1c, 0x35, 0x76, 0x55, 0x76, 0xe0, 0x62, 0xca, 0x37, 0xd0, 0x48, 0xde,
	0xb0, 0x06, 0xa6, 0x99, 0xdf, 0xea, 0xe8, 0xb4, 0x53, 0x9e, 0xe4, 0x5c, 0x61, 0xbf, 0xa7, 0x1c,
	0x11, 0x57, 0x29, 0x74, 0x20, 0xad, 0xc0, 0xfc, 0x1b, 0x3a, 0xed, 0x40, 0x15, 0xcc, 0xb6, 0x3b,
	0xba, 0xe5, 0xb4, 0xac, 0x96, 0x51, 0x9e, 0xe2, 0xf0, 0xc5, 0x7e, 0x4f, 0x99, 0x0f, 0xe1, 0xc2,
	0x65, 0x20, 0x6d, 0x9a, 0xff, 0xbd, 0x79, 0x2d, 0xb8, 0xe7, 0x3b, 0x5d, 0xd2, 0xde, 0x6d, 0x75,
	0x78, 0x59, 0xca, 0x85, 0x75, 0xa9, 0x9a, 0x4f, 0xde, 0xf3, 0xa4, 0x17, 0x69, 0x45, 0xbe, 0xbc,
	0x11, 0xae, 0xde, 0x07, 0xca, 0x98, 0xba, 0xc5, 0xb5, 0x7d, 0x30, 0xc5, 0xf5, 0xda, 0xd4, 0x77,
	0xf1, 0x6d, 0x21, 0x3c, 0x78, 0x0a, 0x4c, 0x31, 0x8b, 0x75, 0xb1, 0xa8, 0xe3, 0x42, 0xbf, 0xa7,
	0xcc, 0x89, 0x74, 0x02, 0x33, 0xd2, 0x42, 0x37, 0xbc, 0x0c, 0x8a, 0x06, 0xa6, 0x6d, 0xcf, 0x0a,
	0x6f, 0x52, 0x58, 0xa8, 0x84, 0xae, 0x13, 0x4e, 0xa4, 0x25, 0xa1, 0x63, 0x6b, 0x9d, 0x7f, 0x87,
	0x5a, 0x5f, 0x06, 0x73, 0x83, 0x8b, 0xd4, 0x32, 0x78, 0x2d, 0x0e, 0x73, 0xcd, 0xae, 0xfd, 0xaf,
	0x35, 0x81, 0xdf, 0x48, 0xa0, 0xb4, 0x4f, 0x98, 0xe5, 0x98, 0x2d, 0xca, 0x74, 0x8f, 0xb5, 0x82,
	0x27, 0xaa, 0x3c, 0xcd, 0x3b, 0xaa, 0x5c, 0x0f, 0xdf, 0xaf, 0x7a, 0xf4, 0x7e, 0xd5, 0xb7, 0xa3,
	0xf7, 0xab, 0x71, 0x35, 0xd0, 0xe7, 0xcb, 0x9e, 0xb2, 0x3a, 0xb2, 0xf9, 0x2c, 0xb1, 0x2d, 0x86,
	0x6d, 0x97, 0x1d, 0x0c, 0x2e, 0xdc, 0x08, 0x08, 0x3d, 0x7a, 0xa6, 0x48, 0xda, 0x7c, 0x68, 0xdf,
	0x0a, 0xcc, 0x41, 0x68, 0xf8, 0x50, 0x02, 0xc2, 0xd6, 0xc2, 0x8e, 0x11, 0x72, 0x99, 0x79, 0x2d,
	0x97, 0x8f, 0x05, 0x97, 0x95, 0xd4, 0xd6, 0x21, 0x26, 0xcb, 0x43, 0x4c, 0x22, 0x48, 0xc8, 0xe3,
	0xbd, 0xd0, 0xfa, 0x89, 0x63, 0x04, 0x41, 0x45, 0xef, 0x49, 0x6a, 0x30, 0xd6, 0xe7, 0x43, 0x09,
	0x14, 0x83, 0xd7, 0xd1, 0x32, 0x1d, 0x6c, 0x6c, 0xfb, 0x70, 0x09, 0x14, 0x98, 0xcf, 0x0b, 0xc5,
	0xdb, 0xa8, 0x36, 0xc9, 0xfc, 0x9b, 0xd7, 0x60, 0x0d, 0x4c, 0x30, 0x9f, 0x0b, 0xb0, 0xb8, 0x71,
	0x34, 0xba, 0xe3, 0xcc, 0x8f, 0x6f, 0xf8, 0xb6, 0x2f, 0x1a, 0xe0, 0x04, 0xf3, 0xe1, 0x85, 0x57,
	0x89, 0x2f, 0x53, 0x5b, 0xe8, 0x28, 0x7f, 0x83, 0x23, 0x12, 0x31, 0x39, 0x97, 0x73, 0xdb, 0xf6,
	0xb7, 0x98, 0xce, 0xf6, 0xe8, 0xd8, 0xc0, 0xd2, 0xd8, 0xc0, 0x70, 0x19, 0x88, 0xc6, 0x20, 0x5a,
	0x7c, 0xd4, 0x26, 0x96, 0x41, 0x81, 0xf2, 0xa0, 0x82, 0x95, 0x58, 0x09, 0x22, 0xd1, 0x89, 0x31,
	0x91, 0x7f, 0x27, 0xc0, 0x52, 0x93, 0x9a, 0x9f, 0x39, 0x06, 0xee, 0x62, 0x53, 0x67, 0x78, 0x6b,
	0xaf, 0xdd, 0x0e, 0xe2, 0xd7, 0x40, 0x49, 0x98, 0x46, 0xf8, 0x2c, 0xc4, 0x8e, 0x88, 0x4c, 0x0d,
	0x94, 0xe2, 0xc9, 0x65, 0xb8, 0xfd, 0x6a, 0x0b, 0xb1, 0xe3, 0x5d, 0xa7, 0x81, 0xb1, 0x5f, 0x69,
	0x72, 0xfc, 0x57, 0x4a, 0x74, 0xd8, 0xa9, 0x37, 0xeb, 0xb0, 0x85, 0xb7, 0xb8, 0xcd, 0xd3, 0x6f,
	0xd0, 0x61, 0x2b, 0x60, 0x2d, 0xeb, 0xbb, 0x47, 0x85, 0xd9, 0xf8, 0x61, 0x06, 0xe4, 0x9b, 0xd4,
	0x84, 0xdf, 0x49, 0x60, 0x3e, 0x3d, 0x39, 0x8e, 0x3c, 0xdb, 0xa3, 0x53, 0xa0, 0x7c, 0xe6, 0xf5,
	0x98, 0x58, 0x04, 0xf5, 0x07, 0xbf, 0xff, 0xfd, 0xfd, 0x44, 0x15, 0x9d, 0x52, 0x5d, 0xca, 0xf4,
	0x5d, 0xac, 0xa6, 0x66, 0xe5, 0xf4, 0xf9, 0xdf, 0x4a, 0x60, 0x26, 0x1a, 0xc5, 0xe0, 0x89, 0x8c,
	0x83, 0xd2, 0x73, 0x9a, 0x5c, 0x3b, 0x04, 0x28, 0xa6, 0x73, 0x9e, 0xd3, 0x39, 0x83, 0xaa, 0x63,
	0xe8, 0xa4, 0x37, 0x52, 0xf8, 0x93, 0x04, 0x96, 0x32, 0x87, 0x8c, 0xd3, 0x19, 0xe7, 0x66, 0x01,
	0x65, 0xf5, 0x90, 0xc0, 0x98, 0xe4, 0x45, 0x4e, 0xf2, 0x1c, 0xaa, 0x8d, 0x21, 0x99, 0x49, 0xe7,
	0x2b, 0x09, 0xcc, 0x0d, 0x3d, 0x98, 0x4a, 0xd6, 0xb1, 0x09, 0x80, 0x7c, 0xfa, 0x35, 0x80, 0x98,
	0x4f, 0x8d, 0xf3, 0x39, 0x89, 0x4e, 0x8c, 0xe3, 0x93, 0x3c, 0xb6, 0x01, 0x26, 0xf9, 0xa8, 0x7c,
	0x2c, 0x23, 0x7a, 0xe0, 0x90, 0x95, 0x31, 0x8e, 0xf8, 0xb8, 0x1c, 0xbc, 0x07, 0xe6, 0x86, 0x66,
	0xd5, 0x71, 0x5b, 0x22, 0x40, 0x66, 0x2a, 0x99, 0x53, 0x63, 0x0e, 0x7e, 0x0e, 0xca, 0x51, 0xcb,
	0x0c, 0xa6, 0xbc, 0x21, 0xf1, 0xad, 0x66, 0x09, 0x5b, 0x80, 0xe5, 0x13, 0xaf, 0x70, 0x26, 0xe2,
	0x7f, 0x0a, 0x66, 0xe2, 0xde, 0x9b, 0x15, 0x2f, 0x72, 0x66, 0xc6, 0x1b, 0xe9, 0xa1, 0x39, 0x68,
	0x81, 0xd2, 0x68, 0x07, 0xfd, 0x20, 0x63, 0xef, 0x08, 0x4a, 0x3e, 0x7b, 0x18, 0xd4, 0xe0, 0xa8,
	0xc6, 0xed, 0x27, 0xcf, 0x2b, 0xd2, 0xd3, 0xe7, 0x15, 0xe9, 0xaf, 0xe7, 0x15, 0xe9, 0xd1, 0x8b,
	0x4a, 0xee, 0xe9, 0x8b, 0x4a, 0xee, 0x8f, 0x17, 0x95, 0xdc, 0xbd, 0x8f, 0x12, 0xf3, 0xa7, 0x8b,
	0x3d, 0x6a, 0x51, 0x86, 0x9d, 0x36, 0xbe, 0xe5, 0x60, 0xd5, 0xdd, 0x0a, 0x24, 0x71, 0xce, 0xd1,
	0x99, 0xb5, 0x8f, 0x55, 0x3f, 0xd2, 0x06, 0x9f, 0x49, 0x77, 0x0a, 0xfc, 0x9d, 0xbe, 0xf8, 0x5f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xe1, 0x37, 0x7b, 0x3a, 0xb9, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	SetOrchestrator(ctx context.Context, in *MsgSetOrchestrator, opts ...grpc.CallOption) (*MsgSetOrchestratorResponse, error)
	Withdraw(ctx context.Context, in *MsgWithdrawStkAsset, opts ...grpc.CallOption) (*MsgWithdrawStkAssetResponse, error)
	MintTokensForAccount(ctx context.Context, in *MsgMintTokensForAccount, opts ...grpc.CallOption) (*MsgMintTokensForAccountResponse, error)
	MakeProposal(ctx context.Context, in *MsgMakeProposal, opts ...grpc.CallOption) (*MsgMakeProposalResponse, error)
	Vote(ctx context.Context, in *MsgVote, opts ...grpc.CallOption) (*MsgVoteResponse, error)
	VoteWeighted(ctx context.Context, in *MsgVoteWeighted, opts ...grpc.CallOption) (*MsgVoteWeightedResponse, error)
	SignedTxFromOrchestrator(ctx context.Context, in *MsgSignedTx, opts ...grpc.CallOption) (*MsgSignedTxResponse, error)
	TxStatus(ctx context.Context, in *MsgTxStatus, opts ...grpc.CallOption) (*MsgTxStatusResponse, error)
	UndelegateSuccess(ctx context.Context, in *MsgUndelegateSuccess, opts ...grpc.CallOption) (*MsgUndelegateSuccessResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SetOrchestrator(ctx context.Context, in *MsgSetOrchestrator, opts ...grpc.CallOption) (*MsgSetOrchestratorResponse, error) {
	out := new(MsgSetOrchestratorResponse)
	err := c.cc.Invoke(ctx, "/comsos.v1beta1.Msg/SetOrchestrator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Withdraw(ctx context.Context, in *MsgWithdrawStkAsset, opts ...grpc.CallOption) (*MsgWithdrawStkAssetResponse, error) {
	out := new(MsgWithdrawStkAssetResponse)
	err := c.cc.Invoke(ctx, "/comsos.v1beta1.Msg/Withdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MintTokensForAccount(ctx context.Context, in *MsgMintTokensForAccount, opts ...grpc.CallOption) (*MsgMintTokensForAccountResponse, error) {
	out := new(MsgMintTokensForAccountResponse)
	err := c.cc.Invoke(ctx, "/comsos.v1beta1.Msg/MintTokensForAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) MakeProposal(ctx context.Context, in *MsgMakeProposal, opts ...grpc.CallOption) (*MsgMakeProposalResponse, error) {
	out := new(MsgMakeProposalResponse)
	err := c.cc.Invoke(ctx, "/comsos.v1beta1.Msg/MakeProposal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Vote(ctx context.Context, in *MsgVote, opts ...grpc.CallOption) (*MsgVoteResponse, error) {
	out := new(MsgVoteResponse)
	err := c.cc.Invoke(ctx, "/comsos.v1beta1.Msg/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) VoteWeighted(ctx context.Context, in *MsgVoteWeighted, opts ...grpc.CallOption) (*MsgVoteWeightedResponse, error) {
	out := new(MsgVoteWeightedResponse)
	err := c.cc.Invoke(ctx, "/comsos.v1beta1.Msg/VoteWeighted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SignedTxFromOrchestrator(ctx context.Context, in *MsgSignedTx, opts ...grpc.CallOption) (*MsgSignedTxResponse, error) {
	out := new(MsgSignedTxResponse)
	err := c.cc.Invoke(ctx, "/comsos.v1beta1.Msg/SignedTxFromOrchestrator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) TxStatus(ctx context.Context, in *MsgTxStatus, opts ...grpc.CallOption) (*MsgTxStatusResponse, error) {
	out := new(MsgTxStatusResponse)
	err := c.cc.Invoke(ctx, "/comsos.v1beta1.Msg/TxStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UndelegateSuccess(ctx context.Context, in *MsgUndelegateSuccess, opts ...grpc.CallOption) (*MsgUndelegateSuccessResponse, error) {
	out := new(MsgUndelegateSuccessResponse)
	err := c.cc.Invoke(ctx, "/comsos.v1beta1.Msg/UndelegateSuccess", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	SetOrchestrator(context.Context, *MsgSetOrchestrator) (*MsgSetOrchestratorResponse, error)
	Withdraw(context.Context, *MsgWithdrawStkAsset) (*MsgWithdrawStkAssetResponse, error)
	MintTokensForAccount(context.Context, *MsgMintTokensForAccount) (*MsgMintTokensForAccountResponse, error)
	MakeProposal(context.Context, *MsgMakeProposal) (*MsgMakeProposalResponse, error)
	Vote(context.Context, *MsgVote) (*MsgVoteResponse, error)
	VoteWeighted(context.Context, *MsgVoteWeighted) (*MsgVoteWeightedResponse, error)
	SignedTxFromOrchestrator(context.Context, *MsgSignedTx) (*MsgSignedTxResponse, error)
	TxStatus(context.Context, *MsgTxStatus) (*MsgTxStatusResponse, error)
	UndelegateSuccess(context.Context, *MsgUndelegateSuccess) (*MsgUndelegateSuccessResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SetOrchestrator(ctx context.Context, req *MsgSetOrchestrator) (*MsgSetOrchestratorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOrchestrator not implemented")
}
func (*UnimplementedMsgServer) Withdraw(ctx context.Context, req *MsgWithdrawStkAsset) (*MsgWithdrawStkAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraw not implemented")
}
func (*UnimplementedMsgServer) MintTokensForAccount(ctx context.Context, req *MsgMintTokensForAccount) (*MsgMintTokensForAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintTokensForAccount not implemented")
}
func (*UnimplementedMsgServer) MakeProposal(ctx context.Context, req *MsgMakeProposal) (*MsgMakeProposalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeProposal not implemented")
}
func (*UnimplementedMsgServer) Vote(ctx context.Context, req *MsgVote) (*MsgVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (*UnimplementedMsgServer) VoteWeighted(ctx context.Context, req *MsgVoteWeighted) (*MsgVoteWeightedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteWeighted not implemented")
}
func (*UnimplementedMsgServer) SignedTxFromOrchestrator(ctx context.Context, req *MsgSignedTx) (*MsgSignedTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignedTxFromOrchestrator not implemented")
}
func (*UnimplementedMsgServer) TxStatus(ctx context.Context, req *MsgTxStatus) (*MsgTxStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxStatus not implemented")
}
func (*UnimplementedMsgServer) UndelegateSuccess(ctx context.Context, req *MsgUndelegateSuccess) (*MsgUndelegateSuccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndelegateSuccess not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SetOrchestrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetOrchestrator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetOrchestrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comsos.v1beta1.Msg/SetOrchestrator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetOrchestrator(ctx, req.(*MsgSetOrchestrator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawStkAsset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comsos.v1beta1.Msg/Withdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Withdraw(ctx, req.(*MsgWithdrawStkAsset))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MintTokensForAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMintTokensForAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MintTokensForAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comsos.v1beta1.Msg/MintTokensForAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MintTokensForAccount(ctx, req.(*MsgMintTokensForAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_MakeProposal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMakeProposal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MakeProposal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comsos.v1beta1.Msg/MakeProposal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MakeProposal(ctx, req.(*MsgMakeProposal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comsos.v1beta1.Msg/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Vote(ctx, req.(*MsgVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_VoteWeighted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVoteWeighted)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).VoteWeighted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comsos.v1beta1.Msg/VoteWeighted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).VoteWeighted(ctx, req.(*MsgVoteWeighted))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SignedTxFromOrchestrator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSignedTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SignedTxFromOrchestrator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comsos.v1beta1.Msg/SignedTxFromOrchestrator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SignedTxFromOrchestrator(ctx, req.(*MsgSignedTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_TxStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTxStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).TxStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comsos.v1beta1.Msg/TxStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).TxStatus(ctx, req.(*MsgTxStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UndelegateSuccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUndelegateSuccess)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UndelegateSuccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/comsos.v1beta1.Msg/UndelegateSuccess",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UndelegateSuccess(ctx, req.(*MsgUndelegateSuccess))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comsos.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetOrchestrator",
			Handler:    _Msg_SetOrchestrator_Handler,
		},
		{
			MethodName: "Withdraw",
			Handler:    _Msg_Withdraw_Handler,
		},
		{
			MethodName: "MintTokensForAccount",
			Handler:    _Msg_MintTokensForAccount_Handler,
		},
		{
			MethodName: "MakeProposal",
			Handler:    _Msg_MakeProposal_Handler,
		},
		{
			MethodName: "Vote",
			Handler:    _Msg_Vote_Handler,
		},
		{
			MethodName: "VoteWeighted",
			Handler:    _Msg_VoteWeighted_Handler,
		},
		{
			MethodName: "SignedTxFromOrchestrator",
			Handler:    _Msg_SignedTxFromOrchestrator_Handler,
		},
		{
			MethodName: "TxStatus",
			Handler:    _Msg_TxStatus_Handler,
		},
		{
			MethodName: "UndelegateSuccess",
			Handler:    _Msg_UndelegateSuccess_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cosmos/v1beta1/msgs.proto",
}

func (m *MsgSetOrchestrator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetOrchestrator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetOrchestrator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Orchestrator) > 0 {
		i -= len(m.Orchestrator)
		copy(dAtA[i:], m.Orchestrator)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Orchestrator)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetOrchestratorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetOrchestratorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetOrchestratorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawStkAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawStkAsset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawStkAsset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawStkAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawStkAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawStkAssetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Option != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.Option))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Voter) > 0 {
		i -= len(m.Voter)
		copy(dAtA[i:], m.Voter)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Voter)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProposalId != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgVoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgVoteWeighted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteWeighted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteWeighted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Options) > 0 {
		for iNdEx := len(m.Options) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Options[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgs(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Voter) > 0 {
		i -= len(m.Voter)
		copy(dAtA[i:], m.Voter)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Voter)))
		i--
		dAtA[i] = 0x12
	}
	if m.ProposalId != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgVoteWeightedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteWeightedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteWeightedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMintTokensForAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintTokensForAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintTokensForAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMsgs(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.OrchestratorAddress) > 0 {
		i -= len(m.OrchestratorAddress)
		copy(dAtA[i:], m.OrchestratorAddress)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.OrchestratorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AddressFromMemo) > 0 {
		i -= len(m.AddressFromMemo)
		copy(dAtA[i:], m.AddressFromMemo)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.AddressFromMemo)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMintTokensForAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintTokensForAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintTokensForAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgMakeProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMakeProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMakeProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.VotingEndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.VotingEndTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintMsgs(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x42
	n3, err3 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.VotingStartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.VotingStartTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintMsgs(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x3a
	if m.BlockHeight != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ProposalID != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.ProposalID))
		i--
		dAtA[i] = 0x20
	}
	if len(m.OrchestratorAddress) > 0 {
		i -= len(m.OrchestratorAddress)
		copy(dAtA[i:], m.OrchestratorAddress)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.OrchestratorAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMakeProposalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMakeProposalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMakeProposalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSignedTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignedTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignedTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OrchestratorAddress) > 0 {
		i -= len(m.OrchestratorAddress)
		copy(dAtA[i:], m.OrchestratorAddress)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.OrchestratorAddress)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Tx.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.TxID != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.TxID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSignedTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSignedTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSignedTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTxStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTxStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTxStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrchestratorAddress) > 0 {
		i -= len(m.OrchestratorAddress)
		copy(dAtA[i:], m.OrchestratorAddress)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.OrchestratorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTxStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTxStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTxStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUndelegateSuccess) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUndelegateSuccess) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUndelegateSuccess) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintMsgs(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x38
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OrchestratorAddress) > 0 {
		i -= len(m.OrchestratorAddress)
		copy(dAtA[i:], m.OrchestratorAddress)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.OrchestratorAddress)))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMsgs(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintMsgs(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUndelegateSuccessResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUndelegateSuccessResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUndelegateSuccessResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMsgs(dAtA []byte, offset int, v uint64) int {
	offset -= sovMsgs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSetOrchestrator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Orchestrator)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgSetOrchestratorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdrawStkAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovMsgs(uint64(l))
	return n
}

func (m *MsgWithdrawStkAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalId != 0 {
		n += 1 + sovMsgs(uint64(m.ProposalId))
	}
	l = len(m.Voter)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.Option != 0 {
		n += 1 + sovMsgs(uint64(m.Option))
	}
	return n
}

func (m *MsgVoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgVoteWeighted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ProposalId != 0 {
		n += 1 + sovMsgs(uint64(m.ProposalId))
	}
	l = len(m.Voter)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if len(m.Options) > 0 {
		for _, e := range m.Options {
			l = e.Size()
			n += 1 + l + sovMsgs(uint64(l))
		}
	}
	return n
}

func (m *MsgVoteWeightedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMintTokensForAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AddressFromMemo)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.OrchestratorAddress)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovMsgs(uint64(l))
		}
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovMsgs(uint64(m.BlockHeight))
	}
	return n
}

func (m *MsgMintTokensForAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgMakeProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.OrchestratorAddress)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.ProposalID != 0 {
		n += 1 + sovMsgs(uint64(m.ProposalID))
	}
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovMsgs(uint64(m.BlockHeight))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.VotingStartTime)
	n += 1 + l + sovMsgs(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.VotingEndTime)
	n += 1 + l + sovMsgs(uint64(l))
	return n
}

func (m *MsgMakeProposalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSignedTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxID != 0 {
		n += 1 + sovMsgs(uint64(m.TxID))
	}
	l = m.Tx.Size()
	n += 1 + l + sovMsgs(uint64(l))
	l = len(m.OrchestratorAddress)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgSignedTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTxStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrchestratorAddress)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	return n
}

func (m *MsgTxStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUndelegateSuccess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovMsgs(uint64(l))
	l = len(m.OrchestratorAddress)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovMsgs(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovMsgs(uint64(m.BlockHeight))
	}
	return n
}

func (m *MsgUndelegateSuccessResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMsgs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMsgs(x uint64) (n int) {
	return sovMsgs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSetOrchestrator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetOrchestrator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetOrchestrator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orchestrator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Orchestrator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetOrchestratorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetOrchestratorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetOrchestratorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawStkAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawStkAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawStkAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawStkAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawStkAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawStkAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Option", wireType)
			}
			m.Option = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Option |= VoteOption(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteWeighted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteWeighted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteWeighted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Voter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Voter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Options = append(m.Options, WeightedVoteOption{})
			if err := m.Options[len(m.Options)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteWeightedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteWeightedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteWeightedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintTokensForAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintTokensForAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintTokensForAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddressFromMemo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddressFromMemo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchestratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintTokensForAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintTokensForAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintTokensForAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMakeProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMakeProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMakeProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchestratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalID", wireType)
			}
			m.ProposalID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingStartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.VotingStartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotingEndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.VotingEndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMakeProposalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMakeProposalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMakeProposalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSignedTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignedTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignedTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxID", wireType)
			}
			m.TxID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchestratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSignedTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSignedTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSignedTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTxStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTxStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTxStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchestratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTxStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTxStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTxStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUndelegateSuccess) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUndelegateSuccess: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUndelegateSuccess: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrchestratorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrchestratorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMsgs
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMsgs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUndelegateSuccessResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUndelegateSuccessResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUndelegateSuccessResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMsgs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMsgs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMsgs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMsgs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMsgs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMsgs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMsgs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMsgs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMsgs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMsgs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMsgs = fmt.Errorf("proto: unexpected end of group")
)

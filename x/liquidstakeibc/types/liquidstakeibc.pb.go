// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pstake/liquidstakeibc/v1beta1/liquidstakeibc.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ICAAccount_ChannelState int32

const (
	// ICA channel is being created
	ICAAccount_ICA_CHANNEL_CREATING ICAAccount_ChannelState = 0
	// ICA is established and the account can be used
	ICAAccount_ICA_CHANNEL_CREATED ICAAccount_ChannelState = 1
)

var ICAAccount_ChannelState_name = map[int32]string{
	0: "ICA_CHANNEL_CREATING",
	1: "ICA_CHANNEL_CREATED",
}

var ICAAccount_ChannelState_value = map[string]int32{
	"ICA_CHANNEL_CREATING": 0,
	"ICA_CHANNEL_CREATED":  1,
}

func (x ICAAccount_ChannelState) String() string {
	return proto.EnumName(ICAAccount_ChannelState_name, int32(x))
}

func (ICAAccount_ChannelState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_71a9a61e676043b6, []int{2, 0}
}

type Deposit_DepositState int32

const (
	// no action has been initiated on the deposit
	Deposit_DEPOSIT_PENDING Deposit_DepositState = 0
	// deposit sent to the host chain delegator address
	Deposit_DEPOSIT_SENT Deposit_DepositState = 1
	// deposit received by the host chain delegator address
	Deposit_DEPOSIT_RECEIVED Deposit_DepositState = 2
	// delegation submitted for the deposit on the host chain
	Deposit_DEPOSIT_DELEGATING Deposit_DepositState = 3
)

var Deposit_DepositState_name = map[int32]string{
	0: "DEPOSIT_PENDING",
	1: "DEPOSIT_SENT",
	2: "DEPOSIT_RECEIVED",
	3: "DEPOSIT_DELEGATING",
}

var Deposit_DepositState_value = map[string]int32{
	"DEPOSIT_PENDING":    0,
	"DEPOSIT_SENT":       1,
	"DEPOSIT_RECEIVED":   2,
	"DEPOSIT_DELEGATING": 3,
}

func (x Deposit_DepositState) String() string {
	return proto.EnumName(Deposit_DepositState_name, int32(x))
}

func (Deposit_DepositState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_71a9a61e676043b6, []int{4, 0}
}

type Unbonding_UnbondingState int32

const (
	// no action has been initiated on the unbonding
	Unbonding_UNBONDING_PENDING Unbonding_UnbondingState = 0
	// unbonding action has been sent to the host chain
	Unbonding_UNBONDING_INITIATED Unbonding_UnbondingState = 1
	// unbonding is waiting for the maturing period of the host chain
	Unbonding_UNBONDING_MATURING Unbonding_UnbondingState = 2
	// unbonding has matured and is ready to transfer from the host chain
	Unbonding_UNBONDING_MATURED Unbonding_UnbondingState = 3
	// unbonding is on the persistence chain and can be claimed
	Unbonding_UNBONDING_CLAIMABLE Unbonding_UnbondingState = 4
	// unbonding has failed
	Unbonding_UNBONDING_FAILED Unbonding_UnbondingState = 5
)

var Unbonding_UnbondingState_name = map[int32]string{
	0: "UNBONDING_PENDING",
	1: "UNBONDING_INITIATED",
	2: "UNBONDING_MATURING",
	3: "UNBONDING_MATURED",
	4: "UNBONDING_CLAIMABLE",
	5: "UNBONDING_FAILED",
}

var Unbonding_UnbondingState_value = map[string]int32{
	"UNBONDING_PENDING":   0,
	"UNBONDING_INITIATED": 1,
	"UNBONDING_MATURING":  2,
	"UNBONDING_MATURED":   3,
	"UNBONDING_CLAIMABLE": 4,
	"UNBONDING_FAILED":    5,
}

func (x Unbonding_UnbondingState) String() string {
	return proto.EnumName(Unbonding_UnbondingState_name, int32(x))
}

func (Unbonding_UnbondingState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_71a9a61e676043b6, []int{5, 0}
}

type HostChain struct {
	// host chain id
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// ibc connection id
	ConnectionId string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	// module params
	Params *HostChainLSParams `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
	// native token denom
	HostDenom string `protobuf:"bytes,4,opt,name=host_denom,json=hostDenom,proto3" json:"host_denom,omitempty"`
	// ibc connection channel id
	ChannelId string `protobuf:"bytes,5,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// ibc connection port id
	PortId string `protobuf:"bytes,6,opt,name=port_id,json=portId,proto3" json:"port_id,omitempty"`
	// delegation host account
	DelegationAccount *ICAAccount `protobuf:"bytes,7,opt,name=delegation_account,json=delegationAccount,proto3" json:"delegation_account,omitempty"`
	// reward host account
	RewardsAccount *ICAAccount `protobuf:"bytes,8,opt,name=rewards_account,json=rewardsAccount,proto3" json:"rewards_account,omitempty"`
	// validator set
	Validators []*Validator `protobuf:"bytes,9,rep,name=validators,proto3" json:"validators,omitempty"`
	// minimum ls amount
	MinimumDeposit github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,10,opt,name=minimum_deposit,json=minimumDeposit,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"minimum_deposit"`
	// redemption rate
	CValue github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,11,opt,name=c_value,json=cValue,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"c_value"`
	// the hash of the next validator set
	NextValsetHash []byte `protobuf:"bytes,12,opt,name=next_valset_hash,json=nextValsetHash,proto3" json:"next_valset_hash,omitempty"`
	// undelegation epoch factor
	UnbondingFactor int64 `protobuf:"varint,13,opt,name=unbonding_factor,json=unbondingFactor,proto3" json:"unbonding_factor,omitempty"`
	// whether the chain is ready to accept delegations or not
	Active bool `protobuf:"varint,14,opt,name=active,proto3" json:"active,omitempty"`
}

func (m *HostChain) Reset()         { *m = HostChain{} }
func (m *HostChain) String() string { return proto.CompactTextString(m) }
func (*HostChain) ProtoMessage()    {}
func (*HostChain) Descriptor() ([]byte, []int) {
	return fileDescriptor_71a9a61e676043b6, []int{0}
}
func (m *HostChain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostChain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostChain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HostChain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostChain.Merge(m, src)
}
func (m *HostChain) XXX_Size() int {
	return m.Size()
}
func (m *HostChain) XXX_DiscardUnknown() {
	xxx_messageInfo_HostChain.DiscardUnknown(m)
}

var xxx_messageInfo_HostChain proto.InternalMessageInfo

func (m *HostChain) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *HostChain) GetConnectionId() string {
	if m != nil {
		return m.ConnectionId
	}
	return ""
}

func (m *HostChain) GetParams() *HostChainLSParams {
	if m != nil {
		return m.Params
	}
	return nil
}

func (m *HostChain) GetHostDenom() string {
	if m != nil {
		return m.HostDenom
	}
	return ""
}

func (m *HostChain) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *HostChain) GetPortId() string {
	if m != nil {
		return m.PortId
	}
	return ""
}

func (m *HostChain) GetDelegationAccount() *ICAAccount {
	if m != nil {
		return m.DelegationAccount
	}
	return nil
}

func (m *HostChain) GetRewardsAccount() *ICAAccount {
	if m != nil {
		return m.RewardsAccount
	}
	return nil
}

func (m *HostChain) GetValidators() []*Validator {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *HostChain) GetNextValsetHash() []byte {
	if m != nil {
		return m.NextValsetHash
	}
	return nil
}

func (m *HostChain) GetUnbondingFactor() int64 {
	if m != nil {
		return m.UnbondingFactor
	}
	return 0
}

func (m *HostChain) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

type HostChainLSParams struct {
	DepositFee    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=deposit_fee,json=depositFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"deposit_fee"`
	RestakeFee    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=restake_fee,json=restakeFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"restake_fee"`
	UnstakeFee    github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=unstake_fee,json=unstakeFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"unstake_fee"`
	RedemptionFee github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=redemption_fee,json=redemptionFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"redemption_fee"`
}

func (m *HostChainLSParams) Reset()         { *m = HostChainLSParams{} }
func (m *HostChainLSParams) String() string { return proto.CompactTextString(m) }
func (*HostChainLSParams) ProtoMessage()    {}
func (*HostChainLSParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_71a9a61e676043b6, []int{1}
}
func (m *HostChainLSParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HostChainLSParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HostChainLSParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HostChainLSParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HostChainLSParams.Merge(m, src)
}
func (m *HostChainLSParams) XXX_Size() int {
	return m.Size()
}
func (m *HostChainLSParams) XXX_DiscardUnknown() {
	xxx_messageInfo_HostChainLSParams.DiscardUnknown(m)
}

var xxx_messageInfo_HostChainLSParams proto.InternalMessageInfo

type ICAAccount struct {
	// address of the ica on the controller chain
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// token balance of the ica
	Balance types.Coin `protobuf:"bytes,2,opt,name=balance,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"balance"`
	// owner string
	Owner        string                  `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	ChannelState ICAAccount_ChannelState `protobuf:"varint,4,opt,name=channel_state,json=channelState,proto3,enum=pstake.liquidstakeibc.v1beta1.ICAAccount_ChannelState" json:"channel_state,omitempty"`
}

func (m *ICAAccount) Reset()         { *m = ICAAccount{} }
func (m *ICAAccount) String() string { return proto.CompactTextString(m) }
func (*ICAAccount) ProtoMessage()    {}
func (*ICAAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_71a9a61e676043b6, []int{2}
}
func (m *ICAAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ICAAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ICAAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ICAAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ICAAccount.Merge(m, src)
}
func (m *ICAAccount) XXX_Size() int {
	return m.Size()
}
func (m *ICAAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_ICAAccount.DiscardUnknown(m)
}

var xxx_messageInfo_ICAAccount proto.InternalMessageInfo

func (m *ICAAccount) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ICAAccount) GetBalance() types.Coin {
	if m != nil {
		return m.Balance
	}
	return types.Coin{}
}

func (m *ICAAccount) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *ICAAccount) GetChannelState() ICAAccount_ChannelState {
	if m != nil {
		return m.ChannelState
	}
	return ICAAccount_ICA_CHANNEL_CREATING
}

type Validator struct {
	// valoper address
	OperatorAddress string `protobuf:"bytes,1,opt,name=operator_address,json=operatorAddress,proto3" json:"operator_address,omitempty"`
	// validator status
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	// validator weight in the set
	Weight github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=weight,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"weight"`
	// amount delegated by the module to the validator
	DelegatedAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=delegated_amount,json=delegatedAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"delegated_amount"`
	// total amount delegated to the validator (including amount not delegated by the module)
	TotalAmount github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,5,opt,name=total_amount,json=totalAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"total_amount"`
	// total number of shares issued by the validator to its delegators
	DelegatorShares github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=delegator_shares,json=delegatorShares,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"delegator_shares"`
	// the unbonding epoch number when the validator transitioned into the state
	UnbondingEpoch int64 `protobuf:"varint,7,opt,name=unbonding_epoch,json=unbondingEpoch,proto3" json:"unbonding_epoch,omitempty"`
}

func (m *Validator) Reset()         { *m = Validator{} }
func (m *Validator) String() string { return proto.CompactTextString(m) }
func (*Validator) ProtoMessage()    {}
func (*Validator) Descriptor() ([]byte, []int) {
	return fileDescriptor_71a9a61e676043b6, []int{3}
}
func (m *Validator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Validator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Validator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Validator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator.Merge(m, src)
}
func (m *Validator) XXX_Size() int {
	return m.Size()
}
func (m *Validator) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator.DiscardUnknown(m)
}

var xxx_messageInfo_Validator proto.InternalMessageInfo

func (m *Validator) GetOperatorAddress() string {
	if m != nil {
		return m.OperatorAddress
	}
	return ""
}

func (m *Validator) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Validator) GetUnbondingEpoch() int64 {
	if m != nil {
		return m.UnbondingEpoch
	}
	return 0
}

type Deposit struct {
	// deposit target chain
	ChainId string     `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Amount  types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
	// epoch number of the deposit
	Epoch github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=epoch,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"epoch"`
	// state
	State Deposit_DepositState `protobuf:"varint,4,opt,name=state,proto3,enum=pstake.liquidstakeibc.v1beta1.Deposit_DepositState" json:"state,omitempty"`
	// sequence id of the ibc transaction
	IbcSequenceId string `protobuf:"bytes,5,opt,name=ibc_sequence_id,json=ibcSequenceId,proto3" json:"ibc_sequence_id,omitempty"`
}

func (m *Deposit) Reset()         { *m = Deposit{} }
func (m *Deposit) String() string { return proto.CompactTextString(m) }
func (*Deposit) ProtoMessage()    {}
func (*Deposit) Descriptor() ([]byte, []int) {
	return fileDescriptor_71a9a61e676043b6, []int{4}
}
func (m *Deposit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Deposit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Deposit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Deposit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Deposit.Merge(m, src)
}
func (m *Deposit) XXX_Size() int {
	return m.Size()
}
func (m *Deposit) XXX_DiscardUnknown() {
	xxx_messageInfo_Deposit.DiscardUnknown(m)
}

var xxx_messageInfo_Deposit proto.InternalMessageInfo

func (m *Deposit) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *Deposit) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *Deposit) GetState() Deposit_DepositState {
	if m != nil {
		return m.State
	}
	return Deposit_DEPOSIT_PENDING
}

func (m *Deposit) GetIbcSequenceId() string {
	if m != nil {
		return m.IbcSequenceId
	}
	return ""
}

type Unbonding struct {
	// unbonding target chain
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// epoch number of the unbonding record
	EpochNumber int64 `protobuf:"varint,2,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
	// time when the unbonding matures and can be collected
	MatureTime time.Time `protobuf:"bytes,3,opt,name=mature_time,json=matureTime,proto3,stdtime" json:"mature_time"`
	// stk token amount that is burned with the unbonding
	BurnAmount types.Coin `protobuf:"bytes,4,opt,name=burn_amount,json=burnAmount,proto3" json:"burn_amount"`
	// host token amount that is being unbonded
	UnbondAmount types.Coin `protobuf:"bytes,5,opt,name=unbond_amount,json=unbondAmount,proto3" json:"unbond_amount"`
	// sequence id of the ibc transaction
	IbcSequenceId string `protobuf:"bytes,6,opt,name=ibc_sequence_id,json=ibcSequenceId,proto3" json:"ibc_sequence_id,omitempty"`
	// state of the unbonding during the process
	State Unbonding_UnbondingState `protobuf:"varint,7,opt,name=state,proto3,enum=pstake.liquidstakeibc.v1beta1.Unbonding_UnbondingState" json:"state,omitempty"`
}

func (m *Unbonding) Reset()         { *m = Unbonding{} }
func (m *Unbonding) String() string { return proto.CompactTextString(m) }
func (*Unbonding) ProtoMessage()    {}
func (*Unbonding) Descriptor() ([]byte, []int) {
	return fileDescriptor_71a9a61e676043b6, []int{5}
}
func (m *Unbonding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Unbonding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Unbonding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Unbonding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Unbonding.Merge(m, src)
}
func (m *Unbonding) XXX_Size() int {
	return m.Size()
}
func (m *Unbonding) XXX_DiscardUnknown() {
	xxx_messageInfo_Unbonding.DiscardUnknown(m)
}

var xxx_messageInfo_Unbonding proto.InternalMessageInfo

func (m *Unbonding) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *Unbonding) GetEpochNumber() int64 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

func (m *Unbonding) GetMatureTime() time.Time {
	if m != nil {
		return m.MatureTime
	}
	return time.Time{}
}

func (m *Unbonding) GetBurnAmount() types.Coin {
	if m != nil {
		return m.BurnAmount
	}
	return types.Coin{}
}

func (m *Unbonding) GetUnbondAmount() types.Coin {
	if m != nil {
		return m.UnbondAmount
	}
	return types.Coin{}
}

func (m *Unbonding) GetIbcSequenceId() string {
	if m != nil {
		return m.IbcSequenceId
	}
	return ""
}

func (m *Unbonding) GetState() Unbonding_UnbondingState {
	if m != nil {
		return m.State
	}
	return Unbonding_UNBONDING_PENDING
}

type UserUnbonding struct {
	// unbonding target chain
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// epoch when the unbonding started
	EpochNumber int64 `protobuf:"varint,2,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
	// address which requested the unbonding
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// stk token amount that is being unbonded
	StkAmount types.Coin `protobuf:"bytes,4,opt,name=stk_amount,json=stkAmount,proto3" json:"stk_amount"`
	// host token amount that is being unbonded
	UnbondAmount types.Coin `protobuf:"bytes,5,opt,name=unbond_amount,json=unbondAmount,proto3" json:"unbond_amount"`
}

func (m *UserUnbonding) Reset()         { *m = UserUnbonding{} }
func (m *UserUnbonding) String() string { return proto.CompactTextString(m) }
func (*UserUnbonding) ProtoMessage()    {}
func (*UserUnbonding) Descriptor() ([]byte, []int) {
	return fileDescriptor_71a9a61e676043b6, []int{6}
}
func (m *UserUnbonding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserUnbonding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserUnbonding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserUnbonding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserUnbonding.Merge(m, src)
}
func (m *UserUnbonding) XXX_Size() int {
	return m.Size()
}
func (m *UserUnbonding) XXX_DiscardUnknown() {
	xxx_messageInfo_UserUnbonding.DiscardUnknown(m)
}

var xxx_messageInfo_UserUnbonding proto.InternalMessageInfo

func (m *UserUnbonding) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *UserUnbonding) GetEpochNumber() int64 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

func (m *UserUnbonding) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UserUnbonding) GetStkAmount() types.Coin {
	if m != nil {
		return m.StkAmount
	}
	return types.Coin{}
}

func (m *UserUnbonding) GetUnbondAmount() types.Coin {
	if m != nil {
		return m.UnbondAmount
	}
	return types.Coin{}
}

type ValidatorUnbonding struct {
	// unbonding target chain
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// epoch when the unbonding started
	EpochNumber int64 `protobuf:"varint,2,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
	// time when the unbonding matures and can be collected
	MatureTime time.Time `protobuf:"bytes,3,opt,name=mature_time,json=matureTime,proto3,stdtime" json:"mature_time"`
	// address of the validator that is being unbonded
	ValidatorAddress string `protobuf:"bytes,4,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	// amount unbonded from the validator
	Amount types.Coin `protobuf:"bytes,5,opt,name=amount,proto3" json:"amount"`
	// sequence id of the ibc transaction
	IbcSequenceId string `protobuf:"bytes,6,opt,name=ibc_sequence_id,json=ibcSequenceId,proto3" json:"ibc_sequence_id,omitempty"`
}

func (m *ValidatorUnbonding) Reset()         { *m = ValidatorUnbonding{} }
func (m *ValidatorUnbonding) String() string { return proto.CompactTextString(m) }
func (*ValidatorUnbonding) ProtoMessage()    {}
func (*ValidatorUnbonding) Descriptor() ([]byte, []int) {
	return fileDescriptor_71a9a61e676043b6, []int{7}
}
func (m *ValidatorUnbonding) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorUnbonding) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorUnbonding.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorUnbonding) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorUnbonding.Merge(m, src)
}
func (m *ValidatorUnbonding) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorUnbonding) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorUnbonding.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorUnbonding proto.InternalMessageInfo

func (m *ValidatorUnbonding) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

func (m *ValidatorUnbonding) GetEpochNumber() int64 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

func (m *ValidatorUnbonding) GetMatureTime() time.Time {
	if m != nil {
		return m.MatureTime
	}
	return time.Time{}
}

func (m *ValidatorUnbonding) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *ValidatorUnbonding) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *ValidatorUnbonding) GetIbcSequenceId() string {
	if m != nil {
		return m.IbcSequenceId
	}
	return ""
}

type KVUpdate struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *KVUpdate) Reset()         { *m = KVUpdate{} }
func (m *KVUpdate) String() string { return proto.CompactTextString(m) }
func (*KVUpdate) ProtoMessage()    {}
func (*KVUpdate) Descriptor() ([]byte, []int) {
	return fileDescriptor_71a9a61e676043b6, []int{8}
}
func (m *KVUpdate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *KVUpdate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_KVUpdate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *KVUpdate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KVUpdate.Merge(m, src)
}
func (m *KVUpdate) XXX_Size() int {
	return m.Size()
}
func (m *KVUpdate) XXX_DiscardUnknown() {
	xxx_messageInfo_KVUpdate.DiscardUnknown(m)
}

var xxx_messageInfo_KVUpdate proto.InternalMessageInfo

func (m *KVUpdate) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KVUpdate) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterEnum("pstake.liquidstakeibc.v1beta1.ICAAccount_ChannelState", ICAAccount_ChannelState_name, ICAAccount_ChannelState_value)
	proto.RegisterEnum("pstake.liquidstakeibc.v1beta1.Deposit_DepositState", Deposit_DepositState_name, Deposit_DepositState_value)
	proto.RegisterEnum("pstake.liquidstakeibc.v1beta1.Unbonding_UnbondingState", Unbonding_UnbondingState_name, Unbonding_UnbondingState_value)
	proto.RegisterType((*HostChain)(nil), "pstake.liquidstakeibc.v1beta1.HostChain")
	proto.RegisterType((*HostChainLSParams)(nil), "pstake.liquidstakeibc.v1beta1.HostChainLSParams")
	proto.RegisterType((*ICAAccount)(nil), "pstake.liquidstakeibc.v1beta1.ICAAccount")
	proto.RegisterType((*Validator)(nil), "pstake.liquidstakeibc.v1beta1.Validator")
	proto.RegisterType((*Deposit)(nil), "pstake.liquidstakeibc.v1beta1.Deposit")
	proto.RegisterType((*Unbonding)(nil), "pstake.liquidstakeibc.v1beta1.Unbonding")
	proto.RegisterType((*UserUnbonding)(nil), "pstake.liquidstakeibc.v1beta1.UserUnbonding")
	proto.RegisterType((*ValidatorUnbonding)(nil), "pstake.liquidstakeibc.v1beta1.ValidatorUnbonding")
	proto.RegisterType((*KVUpdate)(nil), "pstake.liquidstakeibc.v1beta1.KVUpdate")
}

func init() {
	proto.RegisterFile("pstake/liquidstakeibc/v1beta1/liquidstakeibc.proto", fileDescriptor_71a9a61e676043b6)
}

var fileDescriptor_71a9a61e676043b6 = []byte{
	// 1366 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x57, 0x4d, 0x6f, 0x13, 0x47,
	0x18, 0xce, 0xc6, 0x8e, 0x9d, 0xbc, 0xfe, 0xda, 0x0c, 0x29, 0x18, 0x24, 0x9c, 0xd4, 0x95, 0xc0,
	0x1c, 0x62, 0x17, 0x23, 0x15, 0xa9, 0xaa, 0xaa, 0x3a, 0xf6, 0x86, 0xac, 0x1a, 0x0c, 0x5a, 0x3b,
	0x51, 0x55, 0x54, 0xad, 0xd6, 0xbb, 0x83, 0xbd, 0x8a, 0xbd, 0x63, 0x76, 0xc6, 0x01, 0x7e, 0x41,
	0xd5, 0x1b, 0x17, 0xa4, 0xaa, 0x87, 0xaa, 0xe7, 0x9e, 0x7a, 0xe0, 0x0f, 0xf4, 0xc6, 0x11, 0x71,
	0xaa, 0xaa, 0x0a, 0x2a, 0xf8, 0x23, 0xd5, 0x7c, 0xec, 0xda, 0x7c, 0x88, 0x38, 0xc2, 0x87, 0x9e,
	0x3c, 0xf3, 0xbc, 0xfb, 0x3c, 0x33, 0xf3, 0x7e, 0xcd, 0x18, 0xea, 0x63, 0xca, 0x9c, 0x23, 0x5c,
	0x1b, 0xfa, 0xf7, 0x26, 0xbe, 0x27, 0xc6, 0x7e, 0xcf, 0xad, 0x1d, 0x5f, 0xed, 0x61, 0xe6, 0x5c,
	0x7d, 0x0b, 0xae, 0x8e, 0x43, 0xc2, 0x08, 0xba, 0x28, 0x39, 0xd5, 0xb7, 0x8c, 0x8a, 0x73, 0x61,
	0xa3, 0x4f, 0xfa, 0x44, 0x7c, 0x59, 0xe3, 0x23, 0x49, 0xba, 0x70, 0xde, 0x25, 0x74, 0x44, 0xa8,
	0x2d, 0x0d, 0x72, 0xa2, 0x4c, 0x25, 0x39, 0xab, 0xf5, 0x1c, 0x8a, 0xe3, 0x95, 0x5d, 0xe2, 0x07,
	0xca, 0xbe, 0xd9, 0x27, 0xa4, 0x3f, 0xc4, 0x35, 0x31, 0xeb, 0x4d, 0xee, 0xd6, 0x98, 0x3f, 0xc2,
	0x94, 0x39, 0xa3, 0xb1, 0xfc, 0xa0, 0xfc, 0x38, 0x05, 0x6b, 0x7b, 0x84, 0xb2, 0xe6, 0xc0, 0xf1,
	0x03, 0x74, 0x1e, 0x56, 0x5d, 0x3e, 0xb0, 0x7d, 0xaf, 0xa8, 0x6d, 0x69, 0x95, 0x35, 0x2b, 0x2d,
	0xe6, 0xa6, 0x87, 0x3e, 0x83, 0x9c, 0x4b, 0x82, 0x00, 0xbb, 0xcc, 0x27, 0xc2, 0xbe, 0x2c, 0xec,
	0xd9, 0x29, 0x68, 0x7a, 0x68, 0x0f, 0x52, 0x63, 0x27, 0x74, 0x46, 0xb4, 0x98, 0xd8, 0xd2, 0x2a,
	0x99, 0xfa, 0xe7, 0xd5, 0x0f, 0x9e, 0xb7, 0x1a, 0xaf, 0xbc, 0xdf, 0xb9, 0x2d, 0x78, 0x96, 0xe2,
	0xa3, 0x8b, 0x00, 0x03, 0x42, 0x99, 0xed, 0xe1, 0x80, 0x8c, 0x8a, 0x49, 0xb1, 0xd6, 0x1a, 0x47,
	0x5a, 0x1c, 0xe0, 0x66, 0x77, 0xe0, 0x04, 0x01, 0x1e, 0xf2, 0xad, 0xac, 0x48, 0xb3, 0x42, 0x4c,
	0x0f, 0x9d, 0x83, 0xf4, 0x98, 0x84, 0x8c, 0xdb, 0x52, 0xc2, 0x96, 0xe2, 0x53, 0xd3, 0x43, 0xdf,
	0x01, 0xf2, 0xf0, 0x10, 0xf7, 0x1d, 0x71, 0x0a, 0xc7, 0x75, 0xc9, 0x24, 0x60, 0xc5, 0xb4, 0xd8,
	0xec, 0x95, 0x13, 0x36, 0x6b, 0x36, 0x1b, 0x0d, 0x49, 0xb0, 0xd6, 0xa7, 0x22, 0x0a, 0x42, 0x16,
	0x14, 0x42, 0x7c, 0xdf, 0x09, 0x3d, 0x1a, 0xcb, 0xae, 0x9e, 0x56, 0x36, 0xaf, 0x14, 0x22, 0xcd,
	0x3d, 0x80, 0x63, 0x67, 0xe8, 0x7b, 0x0e, 0x23, 0x21, 0x2d, 0xae, 0x6d, 0x25, 0x2a, 0x99, 0x7a,
	0xe5, 0x04, 0xb9, 0xc3, 0x88, 0x60, 0xcd, 0x70, 0x11, 0x86, 0xc2, 0xc8, 0x0f, 0xfc, 0xd1, 0x64,
	0x64, 0x7b, 0x78, 0x4c, 0xa8, 0xcf, 0x8a, 0xc0, 0x1d, 0xb3, 0xf3, 0xd5, 0xd3, 0x17, 0x9b, 0x4b,
	0x7f, 0xbf, 0xd8, 0xbc, 0xd4, 0xf7, 0xd9, 0x60, 0xd2, 0xab, 0xba, 0x64, 0xa4, 0x32, 0x4c, 0xfd,
	0x6c, 0x53, 0xef, 0xa8, 0xc6, 0x1e, 0x8e, 0x31, 0xad, 0x9a, 0x01, 0x7b, 0xfe, 0x64, 0x1b, 0x54,
	0x02, 0x9a, 0x7c, 0xc3, 0x4a, 0xb4, 0x25, 0x35, 0xd1, 0x01, 0xa4, 0x5d, 0xfb, 0xd8, 0x19, 0x4e,
	0x70, 0x31, 0x73, 0x6a, 0xf9, 0x16, 0x76, 0x67, 0xe4, 0x5b, 0xd8, 0xb5, 0x52, 0xee, 0x21, 0xd7,
	0x42, 0x15, 0xd0, 0x03, 0xfc, 0x80, 0x71, 0x65, 0x8a, 0x99, 0x3d, 0x70, 0xe8, 0xa0, 0x98, 0xdd,
	0xd2, 0x2a, 0x59, 0x2b, 0xcf, 0xf1, 0x43, 0x01, 0xef, 0x39, 0x74, 0x80, 0xae, 0x80, 0x3e, 0x09,
	0x7a, 0x24, 0xf0, 0xfc, 0xa0, 0x6f, 0xdf, 0x75, 0x5c, 0x46, 0xc2, 0x62, 0x6e, 0x4b, 0xab, 0x24,
	0xac, 0x42, 0x8c, 0xef, 0x0a, 0x18, 0x9d, 0x85, 0x94, 0xe3, 0x32, 0xff, 0x18, 0x17, 0xf3, 0x5b,
	0x5a, 0x65, 0xd5, 0x52, 0xb3, 0x2f, 0x93, 0x3f, 0xff, 0xb6, 0xa9, 0x95, 0x1f, 0x27, 0x60, 0xfd,
	0x9d, 0xec, 0x44, 0x3f, 0x40, 0x46, 0xb9, 0xcf, 0xbe, 0x8b, 0xb1, 0x2c, 0x91, 0x8f, 0x3c, 0x23,
	0x28, 0xc1, 0x5d, 0x8c, 0xb9, 0x7c, 0x88, 0x45, 0x44, 0x85, 0xfc, 0xf2, 0x22, 0xe4, 0x95, 0xa0,
	0x92, 0x9f, 0x04, 0x53, 0xf9, 0xc4, 0x22, 0xe4, 0x95, 0x20, 0x97, 0x77, 0x21, 0x1f, 0x62, 0x0f,
	0x8f, 0xc6, 0xa2, 0xb6, 0xf8, 0x0a, 0xc9, 0x05, 0xac, 0x90, 0x9b, 0x6a, 0xee, 0x62, 0x5c, 0xfe,
	0x67, 0x19, 0x60, 0x5a, 0x31, 0xa8, 0x0e, 0x69, 0xc7, 0xf3, 0x42, 0x4c, 0xa9, 0x0a, 0x46, 0xf1,
	0xf9, 0x93, 0xed, 0x0d, 0x45, 0x6f, 0x48, 0x4b, 0x87, 0x85, 0x7e, 0xd0, 0xb7, 0xa2, 0x0f, 0x91,
	0x07, 0xe9, 0x9e, 0x33, 0x74, 0x02, 0x57, 0x7a, 0x38, 0x53, 0x3f, 0x5f, 0x55, 0x04, 0xde, 0x45,
	0xe3, 0x42, 0x6a, 0x12, 0x3f, 0xd8, 0xa9, 0xf1, 0xbd, 0xff, 0xfe, 0x72, 0xf3, 0xf2, 0x1c, 0x7b,
	0xe7, 0x04, 0x2b, 0x92, 0x46, 0x1b, 0xb0, 0x42, 0xee, 0x07, 0x38, 0x94, 0x6e, 0xb6, 0xe4, 0x04,
	0xdd, 0x81, 0x5c, 0xd4, 0xb7, 0x28, 0x73, 0x98, 0x74, 0x51, 0xbe, 0xfe, 0xc5, 0xdc, 0x3d, 0xa2,
	0xda, 0x94, 0xf4, 0x0e, 0x67, 0x5b, 0x59, 0x77, 0x66, 0x56, 0x6e, 0x40, 0x76, 0xd6, 0x8a, 0x8a,
	0xb0, 0x61, 0x36, 0x1b, 0x76, 0x73, 0xaf, 0xd1, 0x6e, 0x1b, 0xfb, 0x76, 0xd3, 0x32, 0x1a, 0x5d,
	0xb3, 0x7d, 0x43, 0x5f, 0x42, 0xe7, 0xe0, 0xcc, 0x3b, 0x16, 0xa3, 0xa5, 0x6b, 0xe5, 0x5f, 0x92,
	0xb0, 0x16, 0x77, 0x10, 0xd4, 0x04, 0x9d, 0x8c, 0x71, 0xc8, 0xc7, 0xf6, 0xbc, 0x6e, 0x2e, 0x44,
	0x0c, 0x05, 0xf3, 0x3a, 0xe3, 0x47, 0x9d, 0x50, 0x75, 0x63, 0xa8, 0x19, 0xea, 0x42, 0xea, 0x3e,
	0xf6, 0xfb, 0x03, 0xb6, 0x90, 0x44, 0x54, 0x5a, 0xa8, 0x0f, 0xba, 0xea, 0xcd, 0xd8, 0xb3, 0x9d,
	0x91, 0xe8, 0xc3, 0xc9, 0x05, 0x74, 0xba, 0x42, 0xac, 0xda, 0x10, 0xa2, 0xc8, 0x86, 0x2c, 0x23,
	0xcc, 0x19, 0x46, 0x8b, 0xac, 0x2c, 0x60, 0x91, 0x8c, 0x50, 0x54, 0x0b, 0x4c, 0x4f, 0x42, 0x42,
	0x9b, 0x0e, 0x9c, 0x10, 0x53, 0x79, 0x99, 0x7d, 0xa4, 0xa7, 0x0a, 0xb1, 0x6a, 0x47, 0x88, 0xa2,
	0xcb, 0x30, 0xed, 0x8d, 0x36, 0x1e, 0x13, 0x77, 0x20, 0x2e, 0xc4, 0x84, 0x95, 0x8f, 0x61, 0x83,
	0xa3, 0xe5, 0x9f, 0x12, 0x90, 0x8e, 0x3a, 0xfd, 0x07, 0x5e, 0x0a, 0xd7, 0x21, 0xa5, 0x7c, 0x72,
	0x62, 0x79, 0x25, 0xf9, 0x49, 0x2c, 0xf5, 0x39, 0xb2, 0x60, 0x45, 0x2e, 0x9f, 0x58, 0x80, 0x2f,
	0xa5, 0x14, 0x32, 0x61, 0x65, 0xb6, 0xd0, 0xae, 0x9d, 0x50, 0x68, 0xea, 0x78, 0xd1, 0xaf, 0xac,
	0x32, 0xa9, 0x80, 0x2e, 0x41, 0xc1, 0xef, 0xb9, 0x36, 0xc5, 0xf7, 0x26, 0x38, 0x70, 0xf1, 0xf4,
	0xe1, 0x91, 0xf3, 0x7b, 0x6e, 0x47, 0xa1, 0xa6, 0x57, 0x76, 0x21, 0x3b, 0x4b, 0x47, 0x67, 0xa0,
	0xd0, 0x32, 0x6e, 0xdf, 0xea, 0x98, 0x5d, 0xfb, 0xb6, 0xd1, 0x6e, 0xc9, 0x0a, 0xd4, 0x21, 0x1b,
	0x81, 0x1d, 0xa3, 0xdd, 0xd5, 0x35, 0xb4, 0x01, 0x7a, 0x84, 0x58, 0x46, 0xd3, 0x30, 0x0f, 0x8d,
	0x96, 0xbe, 0x8c, 0xce, 0x02, 0x8a, 0xd0, 0x96, 0xb1, 0x6f, 0xdc, 0x90, 0x15, 0x9c, 0x28, 0xff,
	0x91, 0x84, 0xb5, 0x83, 0x28, 0x3c, 0x1f, 0x8a, 0xc6, 0xa7, 0x90, 0x15, 0x9e, 0xb0, 0x83, 0xc9,
	0xa8, 0x87, 0x43, 0x11, 0x93, 0x84, 0x95, 0x11, 0x58, 0x5b, 0x40, 0xc8, 0x80, 0xcc, 0xc8, 0x61,
	0x93, 0x10, 0xdb, 0xfc, 0x75, 0xa8, 0x9e, 0x6e, 0x17, 0xaa, 0xf2, 0xe9, 0x58, 0x8d, 0x9e, 0x8e,
	0xd5, 0x6e, 0xf4, 0x74, 0xdc, 0x59, 0xe5, 0x91, 0x79, 0xf4, 0x72, 0x53, 0xb3, 0x40, 0x12, 0xb9,
	0x09, 0x7d, 0x03, 0x99, 0xde, 0x24, 0x0c, 0x66, 0xab, 0x6e, 0x8e, 0xe0, 0x03, 0xe7, 0xa8, 0x94,
	0x6f, 0x41, 0x4e, 0xa6, 0xdc, 0x6c, 0x51, 0xcd, 0xa1, 0x91, 0x95, 0x2c, 0xa5, 0xf2, 0x9e, 0x38,
	0xa5, 0xde, 0x13, 0x27, 0x74, 0x33, 0x4a, 0x8d, 0xb4, 0x48, 0x8d, 0xeb, 0x27, 0xa4, 0x46, 0xec,
	0xed, 0xe9, 0x68, 0x36, 0x3d, 0xca, 0xbf, 0x6a, 0x90, 0x7f, 0xd3, 0x82, 0x3e, 0x81, 0xf5, 0x83,
	0xf6, 0xce, 0x2d, 0x11, 0xf3, 0x99, 0xd8, 0x9f, 0x83, 0x33, 0x53, 0xd8, 0x6c, 0x9b, 0x5d, 0x53,
	0x76, 0x5f, 0x1e, 0xec, 0xa9, 0xe1, 0x66, 0xa3, 0x7b, 0x60, 0x71, 0xc2, 0xf2, 0x9b, 0x3a, 0x02,
	0x37, 0x5a, 0x7a, 0xe2, 0x4d, 0x9d, 0xe6, 0x7e, 0xc3, 0xbc, 0xd9, 0xd8, 0xd9, 0x37, 0xf4, 0x24,
	0x4f, 0xa5, 0xa9, 0x61, 0xb7, 0x61, 0xee, 0x1b, 0x2d, 0x7d, 0xa5, 0xfc, 0xe3, 0x32, 0xe4, 0x0e,
	0x28, 0x0e, 0x17, 0x95, 0x36, 0x33, 0x77, 0x6f, 0x62, 0xde, 0xbb, 0xf7, 0x6b, 0x00, 0xca, 0x8e,
	0x4e, 0x99, 0x22, 0x6b, 0x94, 0x1d, 0x2d, 0x32, 0x43, 0xca, 0x7f, 0x2e, 0x03, 0x8a, 0x6f, 0xb9,
	0xff, 0x59, 0x15, 0x19, 0xb0, 0x1e, 0xbf, 0xdb, 0xe3, 0x4b, 0x37, 0x79, 0x82, 0x7f, 0xf5, 0x98,
	0x12, 0xdd, 0xba, 0xd3, 0x26, 0xbc, 0x72, 0xba, 0x26, 0x3c, 0x67, 0xf5, 0x94, 0xeb, 0xb0, 0xfa,
	0xed, 0xe1, 0xc1, 0xd8, 0xe3, 0x79, 0xae, 0x43, 0xe2, 0x08, 0x3f, 0x54, 0x3e, 0xe3, 0x43, 0xfe,
	0xfa, 0x91, 0x7f, 0x03, 0xe4, 0x9d, 0x2f, 0x27, 0x3b, 0x77, 0x9e, 0xbe, 0x2a, 0x69, 0xcf, 0x5e,
	0x95, 0xb4, 0x7f, 0x5f, 0x95, 0xb4, 0x47, 0xaf, 0x4b, 0x4b, 0xcf, 0x5e, 0x97, 0x96, 0xfe, 0x7a,
	0x5d, 0x5a, 0xfa, 0xbe, 0x31, 0xd3, 0xe3, 0xc7, 0x38, 0xa4, 0x3e, 0x65, 0x7c, 0x9d, 0x5b, 0x01,
	0xae, 0xc9, 0xaa, 0xdc, 0x0e, 0x1c, 0xfe, 0x3a, 0xaf, 0x1d, 0xd7, 0x6b, 0x0f, 0xde, 0xfe, 0xc7,
	0x2d, 0xae, 0x80, 0x5e, 0x4a, 0xb8, 0xf8, 0xda, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x69, 0xad,
	0xc0, 0xcc, 0x97, 0x0f, 0x00, 0x00,
}

func (m *HostChain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostChain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostChain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.UnbondingFactor != 0 {
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(m.UnbondingFactor))
		i--
		dAtA[i] = 0x68
	}
	if len(m.NextValsetHash) > 0 {
		i -= len(m.NextValsetHash)
		copy(dAtA[i:], m.NextValsetHash)
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(len(m.NextValsetHash)))
		i--
		dAtA[i] = 0x62
	}
	{
		size := m.CValue.Size()
		i -= size
		if _, err := m.CValue.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x5a
	{
		size := m.MinimumDeposit.Size()
		i -= size
		if _, err := m.MinimumDeposit.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	if len(m.Validators) > 0 {
		for iNdEx := len(m.Validators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLiquidstakeibc(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.RewardsAccount != nil {
		{
			size, err := m.RewardsAccount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiquidstakeibc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.DelegationAccount != nil {
		{
			size, err := m.DelegationAccount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiquidstakeibc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PortId) > 0 {
		i -= len(m.PortId)
		copy(dAtA[i:], m.PortId)
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(len(m.PortId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ChannelId) > 0 {
		i -= len(m.ChannelId)
		copy(dAtA[i:], m.ChannelId)
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(len(m.ChannelId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.HostDenom) > 0 {
		i -= len(m.HostDenom)
		copy(dAtA[i:], m.HostDenom)
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(len(m.HostDenom)))
		i--
		dAtA[i] = 0x22
	}
	if m.Params != nil {
		{
			size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintLiquidstakeibc(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ConnectionId) > 0 {
		i -= len(m.ConnectionId)
		copy(dAtA[i:], m.ConnectionId)
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(len(m.ConnectionId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *HostChainLSParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HostChainLSParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HostChainLSParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.RedemptionFee.Size()
		i -= size
		if _, err := m.RedemptionFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.UnstakeFee.Size()
		i -= size
		if _, err := m.UnstakeFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.RestakeFee.Size()
		i -= size
		if _, err := m.RestakeFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.DepositFee.Size()
		i -= size
		if _, err := m.DepositFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ICAAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ICAAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ICAAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChannelState != 0 {
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(m.ChannelState))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.Balance.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Validator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Validator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Validator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UnbondingEpoch != 0 {
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(m.UnbondingEpoch))
		i--
		dAtA[i] = 0x38
	}
	{
		size := m.DelegatorShares.Size()
		i -= size
		if _, err := m.DelegatorShares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.TotalAmount.Size()
		i -= size
		if _, err := m.TotalAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.DelegatedAmount.Size()
		i -= size
		if _, err := m.DelegatedAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.Weight.Size()
		i -= size
		if _, err := m.Weight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OperatorAddress) > 0 {
		i -= len(m.OperatorAddress)
		copy(dAtA[i:], m.OperatorAddress)
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(len(m.OperatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Deposit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Deposit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Deposit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IbcSequenceId) > 0 {
		i -= len(m.IbcSequenceId)
		copy(dAtA[i:], m.IbcSequenceId)
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(len(m.IbcSequenceId)))
		i--
		dAtA[i] = 0x2a
	}
	if m.State != 0 {
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x20
	}
	{
		size := m.Epoch.Size()
		i -= size
		if _, err := m.Epoch.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Unbonding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Unbonding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Unbonding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x38
	}
	if len(m.IbcSequenceId) > 0 {
		i -= len(m.IbcSequenceId)
		copy(dAtA[i:], m.IbcSequenceId)
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(len(m.IbcSequenceId)))
		i--
		dAtA[i] = 0x32
	}
	{
		size, err := m.UnbondAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.BurnAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	n8, err8 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.MatureTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.MatureTime):])
	if err8 != nil {
		return 0, err8
	}
	i -= n8
	i = encodeVarintLiquidstakeibc(dAtA, i, uint64(n8))
	i--
	dAtA[i] = 0x1a
	if m.EpochNumber != 0 {
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserUnbonding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserUnbonding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserUnbonding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.UnbondAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.StkAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EpochNumber != 0 {
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorUnbonding) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorUnbonding) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorUnbonding) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IbcSequenceId) > 0 {
		i -= len(m.IbcSequenceId)
		copy(dAtA[i:], m.IbcSequenceId)
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(len(m.IbcSequenceId)))
		i--
		dAtA[i] = 0x32
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x22
	}
	n12, err12 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.MatureTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.MatureTime):])
	if err12 != nil {
		return 0, err12
	}
	i -= n12
	i = encodeVarintLiquidstakeibc(dAtA, i, uint64(n12))
	i--
	dAtA[i] = 0x1a
	if m.EpochNumber != 0 {
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *KVUpdate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KVUpdate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *KVUpdate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintLiquidstakeibc(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintLiquidstakeibc(dAtA []byte, offset int, v uint64) int {
	offset -= sovLiquidstakeibc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HostChain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovLiquidstakeibc(uint64(l))
	}
	l = len(m.ConnectionId)
	if l > 0 {
		n += 1 + l + sovLiquidstakeibc(uint64(l))
	}
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovLiquidstakeibc(uint64(l))
	}
	l = len(m.HostDenom)
	if l > 0 {
		n += 1 + l + sovLiquidstakeibc(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovLiquidstakeibc(uint64(l))
	}
	l = len(m.PortId)
	if l > 0 {
		n += 1 + l + sovLiquidstakeibc(uint64(l))
	}
	if m.DelegationAccount != nil {
		l = m.DelegationAccount.Size()
		n += 1 + l + sovLiquidstakeibc(uint64(l))
	}
	if m.RewardsAccount != nil {
		l = m.RewardsAccount.Size()
		n += 1 + l + sovLiquidstakeibc(uint64(l))
	}
	if len(m.Validators) > 0 {
		for _, e := range m.Validators {
			l = e.Size()
			n += 1 + l + sovLiquidstakeibc(uint64(l))
		}
	}
	l = m.MinimumDeposit.Size()
	n += 1 + l + sovLiquidstakeibc(uint64(l))
	l = m.CValue.Size()
	n += 1 + l + sovLiquidstakeibc(uint64(l))
	l = len(m.NextValsetHash)
	if l > 0 {
		n += 1 + l + sovLiquidstakeibc(uint64(l))
	}
	if m.UnbondingFactor != 0 {
		n += 1 + sovLiquidstakeibc(uint64(m.UnbondingFactor))
	}
	if m.Active {
		n += 2
	}
	return n
}

func (m *HostChainLSParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DepositFee.Size()
	n += 1 + l + sovLiquidstakeibc(uint64(l))
	l = m.RestakeFee.Size()
	n += 1 + l + sovLiquidstakeibc(uint64(l))
	l = m.UnstakeFee.Size()
	n += 1 + l + sovLiquidstakeibc(uint64(l))
	l = m.RedemptionFee.Size()
	n += 1 + l + sovLiquidstakeibc(uint64(l))
	return n
}

func (m *ICAAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovLiquidstakeibc(uint64(l))
	}
	l = m.Balance.Size()
	n += 1 + l + sovLiquidstakeibc(uint64(l))
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovLiquidstakeibc(uint64(l))
	}
	if m.ChannelState != 0 {
		n += 1 + sovLiquidstakeibc(uint64(m.ChannelState))
	}
	return n
}

func (m *Validator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OperatorAddress)
	if l > 0 {
		n += 1 + l + sovLiquidstakeibc(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovLiquidstakeibc(uint64(l))
	}
	l = m.Weight.Size()
	n += 1 + l + sovLiquidstakeibc(uint64(l))
	l = m.DelegatedAmount.Size()
	n += 1 + l + sovLiquidstakeibc(uint64(l))
	l = m.TotalAmount.Size()
	n += 1 + l + sovLiquidstakeibc(uint64(l))
	l = m.DelegatorShares.Size()
	n += 1 + l + sovLiquidstakeibc(uint64(l))
	if m.UnbondingEpoch != 0 {
		n += 1 + sovLiquidstakeibc(uint64(m.UnbondingEpoch))
	}
	return n
}

func (m *Deposit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovLiquidstakeibc(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovLiquidstakeibc(uint64(l))
	l = m.Epoch.Size()
	n += 1 + l + sovLiquidstakeibc(uint64(l))
	if m.State != 0 {
		n += 1 + sovLiquidstakeibc(uint64(m.State))
	}
	l = len(m.IbcSequenceId)
	if l > 0 {
		n += 1 + l + sovLiquidstakeibc(uint64(l))
	}
	return n
}

func (m *Unbonding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovLiquidstakeibc(uint64(l))
	}
	if m.EpochNumber != 0 {
		n += 1 + sovLiquidstakeibc(uint64(m.EpochNumber))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.MatureTime)
	n += 1 + l + sovLiquidstakeibc(uint64(l))
	l = m.BurnAmount.Size()
	n += 1 + l + sovLiquidstakeibc(uint64(l))
	l = m.UnbondAmount.Size()
	n += 1 + l + sovLiquidstakeibc(uint64(l))
	l = len(m.IbcSequenceId)
	if l > 0 {
		n += 1 + l + sovLiquidstakeibc(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovLiquidstakeibc(uint64(m.State))
	}
	return n
}

func (m *UserUnbonding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovLiquidstakeibc(uint64(l))
	}
	if m.EpochNumber != 0 {
		n += 1 + sovLiquidstakeibc(uint64(m.EpochNumber))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovLiquidstakeibc(uint64(l))
	}
	l = m.StkAmount.Size()
	n += 1 + l + sovLiquidstakeibc(uint64(l))
	l = m.UnbondAmount.Size()
	n += 1 + l + sovLiquidstakeibc(uint64(l))
	return n
}

func (m *ValidatorUnbonding) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovLiquidstakeibc(uint64(l))
	}
	if m.EpochNumber != 0 {
		n += 1 + sovLiquidstakeibc(uint64(m.EpochNumber))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.MatureTime)
	n += 1 + l + sovLiquidstakeibc(uint64(l))
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovLiquidstakeibc(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovLiquidstakeibc(uint64(l))
	l = len(m.IbcSequenceId)
	if l > 0 {
		n += 1 + l + sovLiquidstakeibc(uint64(l))
	}
	return n
}

func (m *KVUpdate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovLiquidstakeibc(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovLiquidstakeibc(uint64(l))
	}
	return n
}

func sovLiquidstakeibc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLiquidstakeibc(x uint64) (n int) {
	return sovLiquidstakeibc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HostChain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstakeibc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostChain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostChain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ConnectionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &HostChainLSParams{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PortId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PortId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DelegationAccount == nil {
				m.DelegationAccount = &ICAAccount{}
			}
			if err := m.DelegationAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RewardsAccount == nil {
				m.RewardsAccount = &ICAAccount{}
			}
			if err := m.RewardsAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validators = append(m.Validators, &Validator{})
			if err := m.Validators[len(m.Validators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinimumDeposit", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MinimumDeposit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CValue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextValsetHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextValsetHash = append(m.NextValsetHash[:0], dAtA[iNdEx:postIndex]...)
			if m.NextValsetHash == nil {
				m.NextValsetHash = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingFactor", wireType)
			}
			m.UnbondingFactor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondingFactor |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstakeibc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HostChainLSParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstakeibc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HostChainLSParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HostChainLSParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DepositFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RestakeFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RestakeFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnstakeFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnstakeFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RedemptionFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RedemptionFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstakeibc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ICAAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstakeibc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ICAAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ICAAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Balance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelState", wireType)
			}
			m.ChannelState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelState |= ICAAccount_ChannelState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstakeibc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Validator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstakeibc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Weight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegatedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorShares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegatorShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingEpoch", wireType)
			}
			m.UnbondingEpoch = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondingEpoch |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstakeibc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Deposit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstakeibc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Deposit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Deposit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Epoch", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Epoch.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= Deposit_DepositState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcSequenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcSequenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstakeibc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Unbonding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstakeibc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Unbonding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Unbonding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatureTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.MatureTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BurnAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnbondAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcSequenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcSequenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= Unbonding_UnbondingState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstakeibc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserUnbonding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstakeibc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserUnbonding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserUnbonding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StkAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StkAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnbondAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstakeibc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorUnbonding) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstakeibc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorUnbonding: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorUnbonding: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MatureTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.MatureTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IbcSequenceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IbcSequenceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstakeibc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KVUpdate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLiquidstakeibc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KVUpdate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KVUpdate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLiquidstakeibc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLiquidstakeibc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLiquidstakeibc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLiquidstakeibc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLiquidstakeibc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLiquidstakeibc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLiquidstakeibc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLiquidstakeibc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLiquidstakeibc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLiquidstakeibc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLiquidstakeibc = fmt.Errorf("proto: unexpected end of group")
)
